
CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008150  0800af50  0800af50  0001af50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130a0  080130a0  000301dc  2**0
                  CONTENTS
  4 .ARM          00000000  080130a0  080130a0  000301dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080130a0  080130a0  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130a0  080130a0  000230a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080130a4  080130a4  000230a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080130a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d24  200001dc  08013284  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f00  08013284  00030f00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc8c  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003805  00000000  00000000  0004de96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  000516a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  000524d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000295b2  00000000  00000000  00053148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eed2  00000000  00000000  0007c6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00109b2c  00000000  00000000  0008b5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ac  00000000  00000000  001950f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004570  00000000  00000000  001951a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af38 	.word	0x0800af38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800af38 	.word	0x0800af38

080001d0 <arm_relu_q7>:
 80001d0:	088b      	lsrs	r3, r1, #2
 80001d2:	b470      	push	{r4, r5, r6}
 80001d4:	d02f      	beq.n	8000236 <arm_relu_q7+0x66>
 80001d6:	1e5d      	subs	r5, r3, #1
 80001d8:	b2ad      	uxth	r5, r5
 80001da:	3501      	adds	r5, #1
 80001dc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80001e0:	2600      	movs	r6, #0
 80001e2:	4604      	mov	r4, r0
 80001e4:	f854 2b04 	ldr.w	r2, [r4], #4
 80001e8:	f002 3380 	and.w	r3, r2, #2155905152	; 0x80808080
 80001ec:	ea4f 13f3 	mov.w	r3, r3, ror #7
 80001f0:	42ac      	cmp	r4, r5
 80001f2:	fac6 f313 	qsub8	r3, r6, r3
 80001f6:	ea22 0303 	bic.w	r3, r2, r3
 80001fa:	6003      	str	r3, [r0, #0]
 80001fc:	4620      	mov	r0, r4
 80001fe:	d1f0      	bne.n	80001e2 <arm_relu_q7+0x12>
 8000200:	f011 0103 	ands.w	r1, r1, #3
 8000204:	d015      	beq.n	8000232 <arm_relu_q7+0x62>
 8000206:	f994 3000 	ldrsb.w	r3, [r4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	bfbc      	itt	lt
 800020e:	2300      	movlt	r3, #0
 8000210:	7023      	strblt	r3, [r4, #0]
 8000212:	2901      	cmp	r1, #1
 8000214:	d00d      	beq.n	8000232 <arm_relu_q7+0x62>
 8000216:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800021a:	2b00      	cmp	r3, #0
 800021c:	bfbc      	itt	lt
 800021e:	2300      	movlt	r3, #0
 8000220:	7063      	strblt	r3, [r4, #1]
 8000222:	2902      	cmp	r1, #2
 8000224:	d005      	beq.n	8000232 <arm_relu_q7+0x62>
 8000226:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800022a:	2b00      	cmp	r3, #0
 800022c:	bfbc      	itt	lt
 800022e:	2300      	movlt	r3, #0
 8000230:	70a3      	strblt	r3, [r4, #2]
 8000232:	bc70      	pop	{r4, r5, r6}
 8000234:	4770      	bx	lr
 8000236:	4604      	mov	r4, r0
 8000238:	e7e2      	b.n	8000200 <arm_relu_q7+0x30>
 800023a:	bf00      	nop

0800023c <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
 800023c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000240:	b08b      	sub	sp, #44	; 0x2c
 8000242:	f013 0f03 	tst.w	r3, #3
 8000246:	f8bd 5074 	ldrh.w	r5, [sp, #116]	; 0x74
 800024a:	9508      	str	r5, [sp, #32]
 800024c:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
 8000250:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8000254:	9509      	str	r5, [sp, #36]	; 0x24
 8000256:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800025a:	9205      	str	r2, [sp, #20]
 800025c:	4681      	mov	r9, r0
 800025e:	468e      	mov	lr, r1
 8000260:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 8000264:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8000268:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 800026c:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
 8000270:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8000274:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8000278:	f8bd 8080 	ldrh.w	r8, [sp, #128]	; 0x80
 800027c:	9506      	str	r5, [sp, #24]
 800027e:	f040 809f 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 8000282:	07d2      	lsls	r2, r2, #31
 8000284:	f100 809c 	bmi.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 8000288:	f1bc 0f01 	cmp.w	ip, #1
 800028c:	f040 8098 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 8000290:	2901      	cmp	r1, #1
 8000292:	f040 8095 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 8000296:	2800      	cmp	r0, #0
 8000298:	f040 8092 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 800029c:	2f00      	cmp	r7, #0
 800029e:	f040 808f 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 80002a2:	2c01      	cmp	r4, #1
 80002a4:	f040 808c 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 80002a8:	2e01      	cmp	r6, #1
 80002aa:	f040 8089 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	d070      	beq.n	8000394 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x158>
 80002b2:	461e      	mov	r6, r3
 80002b4:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80002b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80002ba:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 80002be:	9704      	str	r7, [sp, #16]
 80002c0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80002c4:	463d      	mov	r5, r7
 80002c6:	f8cd e01c 	str.w	lr, [sp, #28]
 80002ca:	4647      	mov	r7, r8
 80002cc:	4698      	mov	r8, r3
 80002ce:	b19f      	cbz	r7, 80002f8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0xbc>
 80002d0:	9b07      	ldr	r3, [sp, #28]
 80002d2:	2000      	movs	r0, #0
 80002d4:	fb05 f503 	mul.w	r5, r5, r3
 80002d8:	4604      	mov	r4, r0
 80002da:	4428      	add	r0, r5
 80002dc:	4651      	mov	r1, sl
 80002de:	fb06 9000 	mla	r0, r6, r0, r9
 80002e2:	4632      	mov	r2, r6
 80002e4:	44da      	add	sl, fp
 80002e6:	f001 ffaf 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 80002ea:	45d0      	cmp	r8, sl
 80002ec:	d056      	beq.n	800039c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x160>
 80002ee:	3401      	adds	r4, #1
 80002f0:	b224      	sxth	r4, r4
 80002f2:	42bc      	cmp	r4, r7
 80002f4:	4620      	mov	r0, r4
 80002f6:	dbf0      	blt.n	80002da <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x9e>
 80002f8:	9b04      	ldr	r3, [sp, #16]
 80002fa:	9a06      	ldr	r2, [sp, #24]
 80002fc:	3301      	adds	r3, #1
 80002fe:	b21b      	sxth	r3, r3
 8000300:	4293      	cmp	r3, r2
 8000302:	9304      	str	r3, [sp, #16]
 8000304:	461d      	mov	r5, r3
 8000306:	dbe2      	blt.n	80002ce <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x92>
 8000308:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800030a:	4553      	cmp	r3, sl
 800030c:	d042      	beq.n	8000394 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x158>
 800030e:	9b05      	ldr	r3, [sp, #20]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d03f      	beq.n	8000394 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x158>
 8000314:	10b6      	asrs	r6, r6, #2
 8000316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000318:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 800031c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800031e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8000322:	f106 38ff 	add.w	r8, r6, #4294967295
 8000326:	f04f 0901 	mov.w	r9, #1
 800032a:	fa1f f888 	uxth.w	r8, r8
 800032e:	44c8      	add	r8, r9
 8000330:	fa09 f902 	lsl.w	r9, r9, r2
 8000334:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8000338:	ea4f 0959 	mov.w	r9, r9, lsr #1
 800033c:	fa1f fc8e 	uxth.w	ip, lr
 8000340:	4693      	mov	fp, r2
 8000342:	ebae 030c 	sub.w	r3, lr, ip
 8000346:	b21b      	sxth	r3, r3
 8000348:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800034a:	56d3      	ldrsb	r3, [r2, r3]
 800034c:	fa03 f30a 	lsl.w	r3, r3, sl
 8000350:	444b      	add	r3, r9
 8000352:	b19e      	cbz	r6, 800037c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x140>
 8000354:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000356:	eb05 0708 	add.w	r7, r5, r8
 800035a:	f855 2b04 	ldr.w	r2, [r5], #4
 800035e:	6820      	ldr	r0, [r4, #0]
 8000360:	fa2f f182 	sxtb16	r1, r2
 8000364:	ea4f 2232 	mov.w	r2, r2, ror #8
 8000368:	fa2f f282 	sxtb16	r2, r2
 800036c:	fb21 3300 	smlad	r3, r1, r0, r3
 8000370:	6861      	ldr	r1, [r4, #4]
 8000372:	3408      	adds	r4, #8
 8000374:	fb22 3301 	smlad	r3, r2, r1, r3
 8000378:	42bd      	cmp	r5, r7
 800037a:	d1ee      	bne.n	800035a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11e>
 800037c:	fa43 f30b 	asr.w	r3, r3, fp
 8000380:	f303 0307 	ssat	r3, #8, r3
 8000384:	f80e 3b01 	strb.w	r3, [lr], #1
 8000388:	9a05      	ldr	r2, [sp, #20]
 800038a:	ebae 030c 	sub.w	r3, lr, ip
 800038e:	b21b      	sxth	r3, r3
 8000390:	4293      	cmp	r3, r2
 8000392:	dbd6      	blt.n	8000342 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x106>
 8000394:	2000      	movs	r0, #0
 8000396:	b00b      	add	sp, #44	; 0x2c
 8000398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800039c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800039e:	9303      	str	r3, [sp, #12]
 80003a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80003a2:	9302      	str	r3, [sp, #8]
 80003a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	9b08      	ldr	r3, [sp, #32]
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	9a05      	ldr	r2, [sp, #20]
 80003ae:	9922      	ldr	r1, [sp, #136]	; 0x88
 80003b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80003b2:	4633      	mov	r3, r6
 80003b4:	f001 fcec 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80003b8:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 80003bc:	901f      	str	r0, [sp, #124]	; 0x7c
 80003be:	e796      	b.n	80002ee <arm_convolve_1x1_HWC_q7_fast_nonsquare+0xb2>
 80003c0:	f06f 0002 	mvn.w	r0, #2
 80003c4:	b00b      	add	sp, #44	; 0x2c
 80003c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003ca:	bf00      	nop

080003cc <arm_convolve_HWC_q7_RGB>:
 80003cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003d0:	b097      	sub	sp, #92	; 0x5c
 80003d2:	2a03      	cmp	r2, #3
 80003d4:	9311      	str	r3, [sp, #68]	; 0x44
 80003d6:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80003da:	9312      	str	r3, [sp, #72]	; 0x48
 80003dc:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 80003e0:	9308      	str	r3, [sp, #32]
 80003e2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 80003e6:	9309      	str	r3, [sp, #36]	; 0x24
 80003e8:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80003ec:	9306      	str	r3, [sp, #24]
 80003ee:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 80003f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80003f4:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80003f8:	930e      	str	r3, [sp, #56]	; 0x38
 80003fa:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 80003fe:	930a      	str	r3, [sp, #40]	; 0x28
 8000400:	f040 8142 	bne.w	8000688 <arm_convolve_HWC_q7_RGB+0x2bc>
 8000404:	2b00      	cmp	r3, #0
 8000406:	f000 8113 	beq.w	8000630 <arm_convolve_HWC_q7_RGB+0x264>
 800040a:	9c08      	ldr	r4, [sp, #32]
 800040c:	0062      	lsls	r2, r4, #1
 800040e:	460e      	mov	r6, r1
 8000410:	9215      	str	r2, [sp, #84]	; 0x54
 8000412:	1911      	adds	r1, r2, r4
 8000414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000416:	0049      	lsls	r1, r1, #1
 8000418:	fb14 f304 	smulbb	r3, r4, r4
 800041c:	fb04 f101 	mul.w	r1, r4, r1
 8000420:	4605      	mov	r5, r0
 8000422:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8000424:	4250      	negs	r0, r2
 8000426:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800042a:	b283      	uxth	r3, r0
 800042c:	4618      	mov	r0, r3
 800042e:	9314      	str	r3, [sp, #80]	; 0x50
 8000430:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8000434:	2300      	movs	r3, #0
 8000436:	b292      	uxth	r2, r2
 8000438:	910c      	str	r1, [sp, #48]	; 0x30
 800043a:	920f      	str	r2, [sp, #60]	; 0x3c
 800043c:	900d      	str	r0, [sp, #52]	; 0x34
 800043e:	9310      	str	r3, [sp, #64]	; 0x40
 8000440:	461f      	mov	r7, r3
 8000442:	46a0      	mov	r8, r4
 8000444:	9a06      	ldr	r2, [sp, #24]
 8000446:	9908      	ldr	r1, [sp, #32]
 8000448:	fb02 1403 	mla	r4, r2, r3, r1
 800044c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800044e:	1aa4      	subs	r4, r4, r2
 8000450:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8000454:	920b      	str	r2, [sp, #44]	; 0x2c
 8000456:	2300      	movs	r3, #0
 8000458:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800045a:	9307      	str	r3, [sp, #28]
 800045c:	9205      	str	r2, [sp, #20]
 800045e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000460:	42a0      	cmp	r0, r4
 8000462:	da55      	bge.n	8000510 <arm_convolve_HWC_q7_RGB+0x144>
 8000464:	9a06      	ldr	r2, [sp, #24]
 8000466:	9908      	ldr	r1, [sp, #32]
 8000468:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800046c:	fb02 1303 	mla	r3, r2, r3, r1
 8000470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000472:	4686      	mov	lr, r0
 8000474:	1a99      	subs	r1, r3, r2
 8000476:	4603      	mov	r3, r0
 8000478:	4589      	cmp	r9, r1
 800047a:	da42      	bge.n	8000502 <arm_convolve_HWC_q7_RGB+0x136>
 800047c:	f1be 0f00 	cmp.w	lr, #0
 8000480:	fb06 fa03 	mul.w	sl, r6, r3
 8000484:	db32      	blt.n	80004ec <arm_convolve_HWC_q7_RGB+0x120>
 8000486:	429e      	cmp	r6, r3
 8000488:	f340 80d6 	ble.w	8000638 <arm_convolve_HWC_q7_RGB+0x26c>
 800048c:	f108 0206 	add.w	r2, r8, #6
 8000490:	46cc      	mov	ip, r9
 8000492:	464b      	mov	r3, r9
 8000494:	e021      	b.n	80004da <arm_convolve_HWC_q7_RGB+0x10e>
 8000496:	eb0a 080c 	add.w	r8, sl, ip
 800049a:	4566      	cmp	r6, ip
 800049c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80004a0:	dd1f      	ble.n	80004e2 <arm_convolve_HWC_q7_RGB+0x116>
 80004a2:	f855 c008 	ldr.w	ip, [r5, r8]
 80004a6:	fa2f f88c 	sxtb16	r8, ip
 80004aa:	ea4f 4b18 	mov.w	fp, r8, lsr #16
 80004ae:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 80004b2:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 80004b6:	fa2f fc8c 	sxtb16	ip, ip
 80004ba:	fa1f fc8c 	uxth.w	ip, ip
 80004be:	ea4b 0c0c 	orr.w	ip, fp, ip
 80004c2:	f822 8c06 	strh.w	r8, [r2, #-6]
 80004c6:	4690      	mov	r8, r2
 80004c8:	f8c0 c002 	str.w	ip, [r0, #2]
 80004cc:	3301      	adds	r3, #1
 80004ce:	b21b      	sxth	r3, r3
 80004d0:	428b      	cmp	r3, r1
 80004d2:	f102 0206 	add.w	r2, r2, #6
 80004d6:	469c      	mov	ip, r3
 80004d8:	da13      	bge.n	8000502 <arm_convolve_HWC_q7_RGB+0x136>
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f1a2 0006 	sub.w	r0, r2, #6
 80004e0:	dad9      	bge.n	8000496 <arm_convolve_HWC_q7_RGB+0xca>
 80004e2:	6007      	str	r7, [r0, #0]
 80004e4:	4690      	mov	r8, r2
 80004e6:	f822 7c02 	strh.w	r7, [r2, #-2]
 80004ea:	e7ef      	b.n	80004cc <arm_convolve_HWC_q7_RGB+0x100>
 80004ec:	464b      	mov	r3, r9
 80004ee:	3301      	adds	r3, #1
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	428b      	cmp	r3, r1
 80004f4:	f8c8 7000 	str.w	r7, [r8]
 80004f8:	f8a8 7004 	strh.w	r7, [r8, #4]
 80004fc:	f108 0806 	add.w	r8, r8, #6
 8000500:	dbf5      	blt.n	80004ee <arm_convolve_HWC_q7_RGB+0x122>
 8000502:	f10e 0e01 	add.w	lr, lr, #1
 8000506:	fa0f fe8e 	sxth.w	lr, lr
 800050a:	45a6      	cmp	lr, r4
 800050c:	4673      	mov	r3, lr
 800050e:	dbb3      	blt.n	8000478 <arm_convolve_HWC_q7_RGB+0xac>
 8000510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000512:	4598      	cmp	r8, r3
 8000514:	f000 80a4 	beq.w	8000660 <arm_convolve_HWC_q7_RGB+0x294>
 8000518:	9b07      	ldr	r3, [sp, #28]
 800051a:	9906      	ldr	r1, [sp, #24]
 800051c:	3301      	adds	r3, #1
 800051e:	b21b      	sxth	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	9307      	str	r3, [sp, #28]
 8000524:	9b05      	ldr	r3, [sp, #20]
 8000526:	440b      	add	r3, r1
 8000528:	990a      	ldr	r1, [sp, #40]	; 0x28
 800052a:	b29b      	uxth	r3, r3
 800052c:	428a      	cmp	r2, r1
 800052e:	9305      	str	r3, [sp, #20]
 8000530:	4613      	mov	r3, r2
 8000532:	db94      	blt.n	800045e <arm_convolve_HWC_q7_RGB+0x92>
 8000534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000536:	9906      	ldr	r1, [sp, #24]
 8000538:	3301      	adds	r3, #1
 800053a:	b21b      	sxth	r3, r3
 800053c:	461a      	mov	r2, r3
 800053e:	9310      	str	r3, [sp, #64]	; 0x40
 8000540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000542:	440b      	add	r3, r1
 8000544:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000546:	b29b      	uxth	r3, r3
 8000548:	428a      	cmp	r2, r1
 800054a:	930d      	str	r3, [sp, #52]	; 0x34
 800054c:	4613      	mov	r3, r2
 800054e:	f6ff af79 	blt.w	8000444 <arm_convolve_HWC_q7_RGB+0x78>
 8000552:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8000554:	4543      	cmp	r3, r8
 8000556:	d06b      	beq.n	8000630 <arm_convolve_HWC_q7_RGB+0x264>
 8000558:	9912      	ldr	r1, [sp, #72]	; 0x48
 800055a:	2900      	cmp	r1, #0
 800055c:	d068      	beq.n	8000630 <arm_convolve_HWC_q7_RGB+0x264>
 800055e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000560:	9a08      	ldr	r2, [sp, #32]
 8000562:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000564:	4f4b      	ldr	r7, [pc, #300]	; (8000694 <arm_convolve_HWC_q7_RGB+0x2c8>)
 8000566:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800056a:	461e      	mov	r6, r3
 800056c:	4416      	add	r6, r2
 800056e:	fb02 f606 	mul.w	r6, r2, r6
 8000572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000574:	468a      	mov	sl, r1
 8000576:	f3c6 068f 	ubfx	r6, r6, #2, #16
 800057a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800057c:	f003 0c03 	and.w	ip, r3, #3
 8000580:	1e73      	subs	r3, r6, #1
 8000582:	2201      	movs	r2, #1
 8000584:	b29b      	uxth	r3, r3
 8000586:	448a      	add	sl, r1
 8000588:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800058a:	f8cd c020 	str.w	ip, [sp, #32]
 800058e:	4413      	add	r3, r2
 8000590:	f10c 39ff 	add.w	r9, ip, #4294967295
 8000594:	fa1f f989 	uxth.w	r9, r9
 8000598:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800059c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80005a0:	4082      	lsls	r2, r0
 80005a2:	9305      	str	r3, [sp, #20]
 80005a4:	9824      	ldr	r0, [sp, #144]	; 0x90
 80005a6:	f109 0301 	add.w	r3, r9, #1
 80005aa:	9307      	str	r3, [sp, #28]
 80005ac:	0853      	lsrs	r3, r2, #1
 80005ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80005b2:	9306      	str	r3, [sp, #24]
 80005b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80005b6:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
 80005ba:	4093      	lsls	r3, r2
 80005bc:	9a06      	ldr	r2, [sp, #24]
 80005be:	4413      	add	r3, r2
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d05f      	beq.n	8000684 <arm_convolve_HWC_q7_RGB+0x2b8>
 80005c4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80005c6:	eb0e 0c0b 	add.w	ip, lr, fp
 80005ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80005ce:	fa2f f082 	sxtb16	r0, r2
 80005d2:	b284      	uxth	r4, r0
 80005d4:	ea4f 2232 	mov.w	r2, r2, ror #8
 80005d8:	6829      	ldr	r1, [r5, #0]
 80005da:	fa2f f282 	sxtb16	r2, r2
 80005de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005e2:	fb24 3101 	smlad	r1, r4, r1, r3
 80005e6:	ea02 0307 	and.w	r3, r2, r7
 80005ea:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80005ee:	686a      	ldr	r2, [r5, #4]
 80005f0:	3508      	adds	r5, #8
 80005f2:	fb23 1302 	smlad	r3, r3, r2, r1
 80005f6:	45f4      	cmp	ip, lr
 80005f8:	d1e7      	bne.n	80005ca <arm_convolve_HWC_q7_RGB+0x1fe>
 80005fa:	9905      	ldr	r1, [sp, #20]
 80005fc:	9a08      	ldr	r2, [sp, #32]
 80005fe:	b16a      	cbz	r2, 800061c <arm_convolve_HWC_q7_RGB+0x250>
 8000600:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000604:	eb0e 0509 	add.w	r5, lr, r9
 8000608:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 800060c:	f831 4b02 	ldrh.w	r4, [r1], #2
 8000610:	4295      	cmp	r5, r2
 8000612:	fb14 3300 	smlabb	r3, r4, r0, r3
 8000616:	d1f7      	bne.n	8000608 <arm_convolve_HWC_q7_RGB+0x23c>
 8000618:	9a07      	ldr	r2, [sp, #28]
 800061a:	4496      	add	lr, r2
 800061c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800061e:	4113      	asrs	r3, r2
 8000620:	f303 0307 	ssat	r3, #8, r3
 8000624:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8000626:	f802 3b01 	strb.w	r3, [r2], #1
 800062a:	4592      	cmp	sl, r2
 800062c:	9227      	str	r2, [sp, #156]	; 0x9c
 800062e:	d1c1      	bne.n	80005b4 <arm_convolve_HWC_q7_RGB+0x1e8>
 8000630:	2000      	movs	r0, #0
 8000632:	b017      	add	sp, #92	; 0x5c
 8000634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000638:	464b      	mov	r3, r9
 800063a:	3301      	adds	r3, #1
 800063c:	b21b      	sxth	r3, r3
 800063e:	428b      	cmp	r3, r1
 8000640:	f8c8 7000 	str.w	r7, [r8]
 8000644:	f8a8 7004 	strh.w	r7, [r8, #4]
 8000648:	f108 0806 	add.w	r8, r8, #6
 800064c:	dbf5      	blt.n	800063a <arm_convolve_HWC_q7_RGB+0x26e>
 800064e:	f10e 0e01 	add.w	lr, lr, #1
 8000652:	fa0f fe8e 	sxth.w	lr, lr
 8000656:	45a6      	cmp	lr, r4
 8000658:	4673      	mov	r3, lr
 800065a:	f6ff af0d 	blt.w	8000478 <arm_convolve_HWC_q7_RGB+0xac>
 800065e:	e757      	b.n	8000510 <arm_convolve_HWC_q7_RGB+0x144>
 8000660:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8000662:	9303      	str	r3, [sp, #12]
 8000664:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000674:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8000676:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000678:	f001 fa00 	bl	8001a7c <arm_nn_mat_mult_kernel_q7_q15>
 800067c:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 8000680:	9027      	str	r0, [sp, #156]	; 0x9c
 8000682:	e749      	b.n	8000518 <arm_convolve_HWC_q7_RGB+0x14c>
 8000684:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8000686:	e7b9      	b.n	80005fc <arm_convolve_HWC_q7_RGB+0x230>
 8000688:	f06f 0002 	mvn.w	r0, #2
 800068c:	b017      	add	sp, #92	; 0x5c
 800068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000692:	bf00      	nop
 8000694:	ffff0000 	.word	0xffff0000

08000698 <arm_convolve_HWC_q7_basic>:
 8000698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800069c:	b099      	sub	sp, #100	; 0x64
 800069e:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 80006a2:	9515      	str	r5, [sp, #84]	; 0x54
 80006a4:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 80006a8:	950b      	str	r5, [sp, #44]	; 0x2c
 80006aa:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 80006ae:	950c      	str	r5, [sp, #48]	; 0x30
 80006b0:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 80006b4:	f8bd 40a8 	ldrh.w	r4, [sp, #168]	; 0xa8
 80006b8:	9509      	str	r5, [sp, #36]	; 0x24
 80006ba:	f8bd 509c 	ldrh.w	r5, [sp, #156]	; 0x9c
 80006be:	9516      	str	r5, [sp, #88]	; 0x58
 80006c0:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 80006c4:	940d      	str	r4, [sp, #52]	; 0x34
 80006c6:	9511      	str	r5, [sp, #68]	; 0x44
 80006c8:	9007      	str	r0, [sp, #28]
 80006ca:	9206      	str	r2, [sp, #24]
 80006cc:	9314      	str	r3, [sp, #80]	; 0x50
 80006ce:	2c00      	cmp	r4, #0
 80006d0:	f000 80f8 	beq.w	80008c4 <arm_convolve_HWC_q7_basic+0x22c>
 80006d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80006d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80006d8:	ea4f 0942 	mov.w	r9, r2, lsl #1
 80006dc:	4610      	mov	r0, r2
 80006de:	4263      	negs	r3, r4
 80006e0:	468b      	mov	fp, r1
 80006e2:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80006e4:	fb05 f109 	mul.w	r1, r5, r9
 80006e8:	fb15 f205 	smulbb	r2, r5, r5
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	fb12 f200 	smulbb	r2, r2, r0
 80006f2:	fb05 f101 	mul.w	r1, r5, r1
 80006f6:	4618      	mov	r0, r3
 80006f8:	b292      	uxth	r2, r2
 80006fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80006fc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8000700:	2300      	movs	r3, #0
 8000702:	9212      	str	r2, [sp, #72]	; 0x48
 8000704:	910f      	str	r1, [sp, #60]	; 0x3c
 8000706:	9010      	str	r0, [sp, #64]	; 0x40
 8000708:	9313      	str	r3, [sp, #76]	; 0x4c
 800070a:	46a2      	mov	sl, r4
 800070c:	461a      	mov	r2, r3
 800070e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000712:	fb03 1302 	mla	r3, r3, r2, r1
 8000716:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	9305      	str	r3, [sp, #20]
 800071c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8000720:	930e      	str	r3, [sp, #56]	; 0x38
 8000722:	2200      	movs	r2, #0
 8000724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8000726:	920a      	str	r2, [sp, #40]	; 0x28
 8000728:	9308      	str	r3, [sp, #32]
 800072a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800072c:	9805      	ldr	r0, [sp, #20]
 800072e:	4281      	cmp	r1, r0
 8000730:	da3b      	bge.n	80007aa <arm_convolve_HWC_q7_basic+0x112>
 8000732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000734:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000736:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 800073a:	fb03 0202 	mla	r2, r3, r2, r0
 800073e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000740:	460e      	mov	r6, r1
 8000742:	1ad5      	subs	r5, r2, r3
 8000744:	460a      	mov	r2, r1
 8000746:	42af      	cmp	r7, r5
 8000748:	da29      	bge.n	800079e <arm_convolve_HWC_q7_basic+0x106>
 800074a:	2e00      	cmp	r6, #0
 800074c:	fb0b f802 	mul.w	r8, fp, r2
 8000750:	f2c0 80c8 	blt.w	80008e4 <arm_convolve_HWC_q7_basic+0x24c>
 8000754:	4593      	cmp	fp, r2
 8000756:	f340 80b9 	ble.w	80008cc <arm_convolve_HWC_q7_basic+0x234>
 800075a:	46be      	mov	lr, r7
 800075c:	463c      	mov	r4, r7
 800075e:	e007      	b.n	8000770 <arm_convolve_HWC_q7_basic+0xd8>
 8000760:	3401      	adds	r4, #1
 8000762:	b224      	sxth	r4, r4
 8000764:	f008 f81c 	bl	80087a0 <memset>
 8000768:	42ac      	cmp	r4, r5
 800076a:	44ca      	add	sl, r9
 800076c:	46a6      	mov	lr, r4
 800076e:	da16      	bge.n	800079e <arm_convolve_HWC_q7_basic+0x106>
 8000770:	2c00      	cmp	r4, #0
 8000772:	4650      	mov	r0, sl
 8000774:	464a      	mov	r2, r9
 8000776:	f04f 0100 	mov.w	r1, #0
 800077a:	dbf1      	blt.n	8000760 <arm_convolve_HWC_q7_basic+0xc8>
 800077c:	45f3      	cmp	fp, lr
 800077e:	ddef      	ble.n	8000760 <arm_convolve_HWC_q7_basic+0xc8>
 8000780:	9907      	ldr	r1, [sp, #28]
 8000782:	9a06      	ldr	r2, [sp, #24]
 8000784:	eb08 000e 	add.w	r0, r8, lr
 8000788:	3401      	adds	r4, #1
 800078a:	fb02 1000 	mla	r0, r2, r0, r1
 800078e:	b224      	sxth	r4, r4
 8000790:	4651      	mov	r1, sl
 8000792:	f001 fd21 	bl	80021d8 <arm_q7_to_q15_no_shift>
 8000796:	42ac      	cmp	r4, r5
 8000798:	44ca      	add	sl, r9
 800079a:	46a6      	mov	lr, r4
 800079c:	dbe8      	blt.n	8000770 <arm_convolve_HWC_q7_basic+0xd8>
 800079e:	3601      	adds	r6, #1
 80007a0:	9b05      	ldr	r3, [sp, #20]
 80007a2:	b236      	sxth	r6, r6
 80007a4:	429e      	cmp	r6, r3
 80007a6:	4632      	mov	r2, r6
 80007a8:	dbcd      	blt.n	8000746 <arm_convolve_HWC_q7_basic+0xae>
 80007aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80007ac:	459a      	cmp	sl, r3
 80007ae:	f000 80a5 	beq.w	80008fc <arm_convolve_HWC_q7_basic+0x264>
 80007b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80007b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80007b6:	3201      	adds	r2, #1
 80007b8:	b213      	sxth	r3, r2
 80007ba:	9a08      	ldr	r2, [sp, #32]
 80007bc:	930a      	str	r3, [sp, #40]	; 0x28
 80007be:	440a      	add	r2, r1
 80007c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80007c2:	b292      	uxth	r2, r2
 80007c4:	428b      	cmp	r3, r1
 80007c6:	9208      	str	r2, [sp, #32]
 80007c8:	461a      	mov	r2, r3
 80007ca:	dbae      	blt.n	800072a <arm_convolve_HWC_q7_basic+0x92>
 80007cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80007ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80007d0:	3201      	adds	r2, #1
 80007d2:	b213      	sxth	r3, r2
 80007d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80007d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80007d8:	440a      	add	r2, r1
 80007da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80007dc:	b292      	uxth	r2, r2
 80007de:	428b      	cmp	r3, r1
 80007e0:	9210      	str	r2, [sp, #64]	; 0x40
 80007e2:	461a      	mov	r2, r3
 80007e4:	db93      	blt.n	800070e <arm_convolve_HWC_q7_basic+0x76>
 80007e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80007e8:	459a      	cmp	sl, r3
 80007ea:	d06b      	beq.n	80008c4 <arm_convolve_HWC_q7_basic+0x22c>
 80007ec:	9915      	ldr	r1, [sp, #84]	; 0x54
 80007ee:	2900      	cmp	r1, #0
 80007f0:	d068      	beq.n	80008c4 <arm_convolve_HWC_q7_basic+0x22c>
 80007f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80007f4:	9b06      	ldr	r3, [sp, #24]
 80007f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80007f8:	4f4a      	ldr	r7, [pc, #296]	; (8000924 <arm_convolve_HWC_q7_basic+0x28c>)
 80007fa:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	fb02 f303 	mul.w	r3, r2, r3
 8000806:	f3c3 068f 	ubfx	r6, r3, #2, #16
 800080a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800080c:	468a      	mov	sl, r1
 800080e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8000810:	f003 0c03 	and.w	ip, r3, #3
 8000814:	1e73      	subs	r3, r6, #1
 8000816:	2201      	movs	r2, #1
 8000818:	b29b      	uxth	r3, r3
 800081a:	448a      	add	sl, r1
 800081c:	992b      	ldr	r1, [sp, #172]	; 0xac
 800081e:	f8cd c020 	str.w	ip, [sp, #32]
 8000822:	4413      	add	r3, r2
 8000824:	f10c 39ff 	add.w	r9, ip, #4294967295
 8000828:	fa1f f989 	uxth.w	r9, r9
 800082c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8000830:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8000834:	4082      	lsls	r2, r0
 8000836:	9305      	str	r3, [sp, #20]
 8000838:	9826      	ldr	r0, [sp, #152]	; 0x98
 800083a:	f109 0301 	add.w	r3, r9, #1
 800083e:	9307      	str	r3, [sp, #28]
 8000840:	0853      	lsrs	r3, r2, #1
 8000842:	f100 38ff 	add.w	r8, r0, #4294967295
 8000846:	9306      	str	r3, [sp, #24]
 8000848:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800084a:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
 800084e:	4093      	lsls	r3, r2
 8000850:	9a06      	ldr	r2, [sp, #24]
 8000852:	4413      	add	r3, r2
 8000854:	2e00      	cmp	r6, #0
 8000856:	d063      	beq.n	8000920 <arm_convolve_HWC_q7_basic+0x288>
 8000858:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800085a:	eb0e 0c0b 	add.w	ip, lr, fp
 800085e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8000862:	fa2f f082 	sxtb16	r0, r2
 8000866:	b284      	uxth	r4, r0
 8000868:	ea4f 2232 	mov.w	r2, r2, ror #8
 800086c:	6829      	ldr	r1, [r5, #0]
 800086e:	fa2f f282 	sxtb16	r2, r2
 8000872:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000876:	fb24 3101 	smlad	r1, r4, r1, r3
 800087a:	ea02 0307 	and.w	r3, r2, r7
 800087e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8000882:	686a      	ldr	r2, [r5, #4]
 8000884:	3508      	adds	r5, #8
 8000886:	fb23 1302 	smlad	r3, r3, r2, r1
 800088a:	45e6      	cmp	lr, ip
 800088c:	d1e7      	bne.n	800085e <arm_convolve_HWC_q7_basic+0x1c6>
 800088e:	9905      	ldr	r1, [sp, #20]
 8000890:	9a08      	ldr	r2, [sp, #32]
 8000892:	b16a      	cbz	r2, 80008b0 <arm_convolve_HWC_q7_basic+0x218>
 8000894:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000898:	eb0e 0509 	add.w	r5, lr, r9
 800089c:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 80008a0:	f831 4b02 	ldrh.w	r4, [r1], #2
 80008a4:	4295      	cmp	r5, r2
 80008a6:	fb14 3300 	smlabb	r3, r4, r0, r3
 80008aa:	d1f7      	bne.n	800089c <arm_convolve_HWC_q7_basic+0x204>
 80008ac:	9a07      	ldr	r2, [sp, #28]
 80008ae:	4496      	add	lr, r2
 80008b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80008b2:	4113      	asrs	r3, r2
 80008b4:	f303 0307 	ssat	r3, #8, r3
 80008b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80008ba:	f802 3b01 	strb.w	r3, [r2], #1
 80008be:	4552      	cmp	r2, sl
 80008c0:	9229      	str	r2, [sp, #164]	; 0xa4
 80008c2:	d1c1      	bne.n	8000848 <arm_convolve_HWC_q7_basic+0x1b0>
 80008c4:	2000      	movs	r0, #0
 80008c6:	b019      	add	sp, #100	; 0x64
 80008c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008cc:	463c      	mov	r4, r7
 80008ce:	3401      	adds	r4, #1
 80008d0:	4650      	mov	r0, sl
 80008d2:	464a      	mov	r2, r9
 80008d4:	2100      	movs	r1, #0
 80008d6:	b224      	sxth	r4, r4
 80008d8:	f007 ff62 	bl	80087a0 <memset>
 80008dc:	42a5      	cmp	r5, r4
 80008de:	44ca      	add	sl, r9
 80008e0:	dcf5      	bgt.n	80008ce <arm_convolve_HWC_q7_basic+0x236>
 80008e2:	e75c      	b.n	800079e <arm_convolve_HWC_q7_basic+0x106>
 80008e4:	463c      	mov	r4, r7
 80008e6:	3401      	adds	r4, #1
 80008e8:	4650      	mov	r0, sl
 80008ea:	464a      	mov	r2, r9
 80008ec:	2100      	movs	r1, #0
 80008ee:	b224      	sxth	r4, r4
 80008f0:	f007 ff56 	bl	80087a0 <memset>
 80008f4:	42ac      	cmp	r4, r5
 80008f6:	44ca      	add	sl, r9
 80008f8:	dbf5      	blt.n	80008e6 <arm_convolve_HWC_q7_basic+0x24e>
 80008fa:	e750      	b.n	800079e <arm_convolve_HWC_q7_basic+0x106>
 80008fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80008fe:	9303      	str	r3, [sp, #12]
 8000900:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800090e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000910:	992b      	ldr	r1, [sp, #172]	; 0xac
 8000912:	9814      	ldr	r0, [sp, #80]	; 0x50
 8000914:	f001 f8b2 	bl	8001a7c <arm_nn_mat_mult_kernel_q7_q15>
 8000918:	f8dd a0ac 	ldr.w	sl, [sp, #172]	; 0xac
 800091c:	9029      	str	r0, [sp, #164]	; 0xa4
 800091e:	e748      	b.n	80007b2 <arm_convolve_HWC_q7_basic+0x11a>
 8000920:	992b      	ldr	r1, [sp, #172]	; 0xac
 8000922:	e7b5      	b.n	8000890 <arm_convolve_HWC_q7_basic+0x1f8>
 8000924:	ffff0000 	.word	0xffff0000

08000928 <arm_convolve_HWC_q7_basic_nonsquare>:
 8000928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800092c:	b09b      	sub	sp, #108	; 0x6c
 800092e:	f8bd 60a8 	ldrh.w	r6, [sp, #168]	; 0xa8
 8000932:	960a      	str	r6, [sp, #40]	; 0x28
 8000934:	f8bd 60ac 	ldrh.w	r6, [sp, #172]	; 0xac
 8000938:	9616      	str	r6, [sp, #88]	; 0x58
 800093a:	f8bd 60b4 	ldrh.w	r6, [sp, #180]	; 0xb4
 800093e:	f8bd 40c4 	ldrh.w	r4, [sp, #196]	; 0xc4
 8000942:	9617      	str	r6, [sp, #92]	; 0x5c
 8000944:	f8bd 60b8 	ldrh.w	r6, [sp, #184]	; 0xb8
 8000948:	9418      	str	r4, [sp, #96]	; 0x60
 800094a:	9611      	str	r6, [sp, #68]	; 0x44
 800094c:	f8bd 60c0 	ldrh.w	r6, [sp, #192]	; 0xc0
 8000950:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 8000954:	f8bd 70a0 	ldrh.w	r7, [sp, #160]	; 0xa0
 8000958:	960d      	str	r6, [sp, #52]	; 0x34
 800095a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800095c:	9414      	str	r4, [sp, #80]	; 0x50
 800095e:	f8bd 509c 	ldrh.w	r5, [sp, #156]	; 0x9c
 8000962:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8000966:	970c      	str	r7, [sp, #48]	; 0x30
 8000968:	f8bd 70a4 	ldrh.w	r7, [sp, #164]	; 0xa4
 800096c:	940b      	str	r4, [sp, #44]	; 0x2c
 800096e:	9515      	str	r5, [sp, #84]	; 0x54
 8000970:	9719      	str	r7, [sp, #100]	; 0x64
 8000972:	2e00      	cmp	r6, #0
 8000974:	f000 80fe 	beq.w	8000b74 <arm_convolve_HWC_q7_basic_nonsquare+0x24c>
 8000978:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800097c:	9205      	str	r2, [sp, #20]
 800097e:	461a      	mov	r2, r3
 8000980:	468b      	mov	fp, r1
 8000982:	9007      	str	r0, [sp, #28]
 8000984:	fb14 f102 	smulbb	r1, r4, r2
 8000988:	fb09 f004 	mul.w	r0, r9, r4
 800098c:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 800098e:	9306      	str	r3, [sp, #24]
 8000990:	fb05 f000 	mul.w	r0, r5, r0
 8000994:	fb11 f105 	smulbb	r1, r1, r5
 8000998:	427a      	negs	r2, r7
 800099a:	2300      	movs	r3, #0
 800099c:	b292      	uxth	r2, r2
 800099e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80009a2:	b289      	uxth	r1, r1
 80009a4:	9210      	str	r2, [sp, #64]	; 0x40
 80009a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80009a8:	9112      	str	r1, [sp, #72]	; 0x48
 80009aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80009ac:	46a2      	mov	sl, r4
 80009ae:	461a      	mov	r2, r3
 80009b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d061      	beq.n	8000a7a <arm_convolve_HWC_q7_basic_nonsquare+0x152>
 80009b6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80009b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80009ba:	9819      	ldr	r0, [sp, #100]	; 0x64
 80009bc:	fb02 1303 	mla	r3, r2, r3, r1
 80009c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80009c2:	1a1b      	subs	r3, r3, r0
 80009c4:	4251      	negs	r1, r2
 80009c6:	9304      	str	r3, [sp, #16]
 80009c8:	b28b      	uxth	r3, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	9308      	str	r3, [sp, #32]
 80009ce:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80009d2:	9209      	str	r2, [sp, #36]	; 0x24
 80009d4:	930e      	str	r3, [sp, #56]	; 0x38
 80009d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80009d8:	9804      	ldr	r0, [sp, #16]
 80009da:	4281      	cmp	r1, r0
 80009dc:	da3c      	bge.n	8000a58 <arm_convolve_HWC_q7_basic_nonsquare+0x130>
 80009de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80009e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80009e2:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80009e6:	fb02 0203 	mla	r2, r2, r3, r0
 80009ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80009ec:	460e      	mov	r6, r1
 80009ee:	1ad5      	subs	r5, r2, r3
 80009f0:	460a      	mov	r2, r1
 80009f2:	42af      	cmp	r7, r5
 80009f4:	da2a      	bge.n	8000a4c <arm_convolve_HWC_q7_basic_nonsquare+0x124>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	fb0b f802 	mul.w	r8, fp, r2
 80009fc:	f2c0 80ca 	blt.w	8000b94 <arm_convolve_HWC_q7_basic_nonsquare+0x26c>
 8000a00:	9b05      	ldr	r3, [sp, #20]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	f340 80ba 	ble.w	8000b7c <arm_convolve_HWC_q7_basic_nonsquare+0x254>
 8000a08:	46be      	mov	lr, r7
 8000a0a:	463c      	mov	r4, r7
 8000a0c:	e007      	b.n	8000a1e <arm_convolve_HWC_q7_basic_nonsquare+0xf6>
 8000a0e:	3401      	adds	r4, #1
 8000a10:	b224      	sxth	r4, r4
 8000a12:	f007 fec5 	bl	80087a0 <memset>
 8000a16:	42ac      	cmp	r4, r5
 8000a18:	44ca      	add	sl, r9
 8000a1a:	46a6      	mov	lr, r4
 8000a1c:	da16      	bge.n	8000a4c <arm_convolve_HWC_q7_basic_nonsquare+0x124>
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	4650      	mov	r0, sl
 8000a22:	464a      	mov	r2, r9
 8000a24:	f04f 0100 	mov.w	r1, #0
 8000a28:	dbf1      	blt.n	8000a0e <arm_convolve_HWC_q7_basic_nonsquare+0xe6>
 8000a2a:	45f3      	cmp	fp, lr
 8000a2c:	ddef      	ble.n	8000a0e <arm_convolve_HWC_q7_basic_nonsquare+0xe6>
 8000a2e:	9907      	ldr	r1, [sp, #28]
 8000a30:	9a06      	ldr	r2, [sp, #24]
 8000a32:	eb08 000e 	add.w	r0, r8, lr
 8000a36:	3401      	adds	r4, #1
 8000a38:	fb02 1000 	mla	r0, r2, r0, r1
 8000a3c:	b224      	sxth	r4, r4
 8000a3e:	4651      	mov	r1, sl
 8000a40:	f001 fbca 	bl	80021d8 <arm_q7_to_q15_no_shift>
 8000a44:	42ac      	cmp	r4, r5
 8000a46:	44ca      	add	sl, r9
 8000a48:	46a6      	mov	lr, r4
 8000a4a:	dbe8      	blt.n	8000a1e <arm_convolve_HWC_q7_basic_nonsquare+0xf6>
 8000a4c:	3601      	adds	r6, #1
 8000a4e:	9b04      	ldr	r3, [sp, #16]
 8000a50:	b236      	sxth	r6, r6
 8000a52:	429e      	cmp	r6, r3
 8000a54:	4632      	mov	r2, r6
 8000a56:	dbcc      	blt.n	80009f2 <arm_convolve_HWC_q7_basic_nonsquare+0xca>
 8000a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000a5a:	459a      	cmp	sl, r3
 8000a5c:	f000 80a6 	beq.w	8000bac <arm_convolve_HWC_q7_basic_nonsquare+0x284>
 8000a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000a64:	3201      	adds	r2, #1
 8000a66:	b213      	sxth	r3, r2
 8000a68:	9a08      	ldr	r2, [sp, #32]
 8000a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a6c:	440a      	add	r2, r1
 8000a6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000a70:	b292      	uxth	r2, r2
 8000a72:	428b      	cmp	r3, r1
 8000a74:	9208      	str	r2, [sp, #32]
 8000a76:	461a      	mov	r2, r3
 8000a78:	dbad      	blt.n	80009d6 <arm_convolve_HWC_q7_basic_nonsquare+0xae>
 8000a7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8000a7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8000a7e:	3201      	adds	r2, #1
 8000a80:	b213      	sxth	r3, r2
 8000a82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8000a86:	440a      	add	r2, r1
 8000a88:	9918      	ldr	r1, [sp, #96]	; 0x60
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	9210      	str	r2, [sp, #64]	; 0x40
 8000a90:	461a      	mov	r2, r3
 8000a92:	db8d      	blt.n	80009b0 <arm_convolve_HWC_q7_basic_nonsquare+0x88>
 8000a94:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8000a96:	4553      	cmp	r3, sl
 8000a98:	d06c      	beq.n	8000b74 <arm_convolve_HWC_q7_basic_nonsquare+0x24c>
 8000a9a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	d069      	beq.n	8000b74 <arm_convolve_HWC_q7_basic_nonsquare+0x24c>
 8000aa0:	9b06      	ldr	r3, [sp, #24]
 8000aa2:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8000aa4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000aa6:	4f4b      	ldr	r7, [pc, #300]	; (8000bd4 <arm_convolve_HWC_q7_basic_nonsquare+0x2ac>)
 8000aa8:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 8000aac:	fb06 f603 	mul.w	r6, r6, r3
 8000ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ab2:	fb03 f306 	mul.w	r3, r3, r6
 8000ab6:	f3c3 068f 	ubfx	r6, r3, #2, #16
 8000aba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000abc:	468a      	mov	sl, r1
 8000abe:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8000ac0:	f003 0c03 	and.w	ip, r3, #3
 8000ac4:	1e73      	subs	r3, r6, #1
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	448a      	add	sl, r1
 8000acc:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8000ace:	f8cd c01c 	str.w	ip, [sp, #28]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	f10c 39ff 	add.w	r9, ip, #4294967295
 8000ad8:	fa1f f989 	uxth.w	r9, r9
 8000adc:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8000ae0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8000ae4:	4082      	lsls	r2, r0
 8000ae6:	9304      	str	r3, [sp, #16]
 8000ae8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000aea:	f109 0301 	add.w	r3, r9, #1
 8000aee:	9306      	str	r3, [sp, #24]
 8000af0:	0853      	lsrs	r3, r2, #1
 8000af2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af6:	9305      	str	r3, [sp, #20]
 8000af8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8000afa:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
 8000afe:	4093      	lsls	r3, r2
 8000b00:	9a05      	ldr	r2, [sp, #20]
 8000b02:	4413      	add	r3, r2
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d063      	beq.n	8000bd0 <arm_convolve_HWC_q7_basic_nonsquare+0x2a8>
 8000b08:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8000b0a:	eb0e 0c0b 	add.w	ip, lr, fp
 8000b0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8000b12:	fa2f f082 	sxtb16	r0, r2
 8000b16:	b284      	uxth	r4, r0
 8000b18:	ea4f 2232 	mov.w	r2, r2, ror #8
 8000b1c:	6829      	ldr	r1, [r5, #0]
 8000b1e:	fa2f f282 	sxtb16	r2, r2
 8000b22:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b26:	fb24 3101 	smlad	r1, r4, r1, r3
 8000b2a:	ea02 0307 	and.w	r3, r2, r7
 8000b2e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8000b32:	686a      	ldr	r2, [r5, #4]
 8000b34:	3508      	adds	r5, #8
 8000b36:	fb23 1302 	smlad	r3, r3, r2, r1
 8000b3a:	45e6      	cmp	lr, ip
 8000b3c:	d1e7      	bne.n	8000b0e <arm_convolve_HWC_q7_basic_nonsquare+0x1e6>
 8000b3e:	9904      	ldr	r1, [sp, #16]
 8000b40:	9a07      	ldr	r2, [sp, #28]
 8000b42:	b16a      	cbz	r2, 8000b60 <arm_convolve_HWC_q7_basic_nonsquare+0x238>
 8000b44:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000b48:	eb0e 0509 	add.w	r5, lr, r9
 8000b4c:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 8000b50:	f831 4b02 	ldrh.w	r4, [r1], #2
 8000b54:	4295      	cmp	r5, r2
 8000b56:	fb14 3300 	smlabb	r3, r4, r0, r3
 8000b5a:	d1f7      	bne.n	8000b4c <arm_convolve_HWC_q7_basic_nonsquare+0x224>
 8000b5c:	9a06      	ldr	r2, [sp, #24]
 8000b5e:	4496      	add	lr, r2
 8000b60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000b62:	4113      	asrs	r3, r2
 8000b64:	f303 0307 	ssat	r3, #8, r3
 8000b68:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8000b6a:	f802 3b01 	strb.w	r3, [r2], #1
 8000b6e:	4552      	cmp	r2, sl
 8000b70:	922f      	str	r2, [sp, #188]	; 0xbc
 8000b72:	d1c1      	bne.n	8000af8 <arm_convolve_HWC_q7_basic_nonsquare+0x1d0>
 8000b74:	2000      	movs	r0, #0
 8000b76:	b01b      	add	sp, #108	; 0x6c
 8000b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b7c:	463c      	mov	r4, r7
 8000b7e:	3401      	adds	r4, #1
 8000b80:	4650      	mov	r0, sl
 8000b82:	464a      	mov	r2, r9
 8000b84:	2100      	movs	r1, #0
 8000b86:	b224      	sxth	r4, r4
 8000b88:	f007 fe0a 	bl	80087a0 <memset>
 8000b8c:	42ac      	cmp	r4, r5
 8000b8e:	44ca      	add	sl, r9
 8000b90:	dbf5      	blt.n	8000b7e <arm_convolve_HWC_q7_basic_nonsquare+0x256>
 8000b92:	e75b      	b.n	8000a4c <arm_convolve_HWC_q7_basic_nonsquare+0x124>
 8000b94:	463c      	mov	r4, r7
 8000b96:	3401      	adds	r4, #1
 8000b98:	4650      	mov	r0, sl
 8000b9a:	464a      	mov	r2, r9
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	b224      	sxth	r4, r4
 8000ba0:	f007 fdfe 	bl	80087a0 <memset>
 8000ba4:	42ac      	cmp	r4, r5
 8000ba6:	44ca      	add	sl, r9
 8000ba8:	dbf5      	blt.n	8000b96 <arm_convolve_HWC_q7_basic_nonsquare+0x26e>
 8000baa:	e74f      	b.n	8000a4c <arm_convolve_HWC_q7_basic_nonsquare+0x124>
 8000bac:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000bbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000bc0:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8000bc2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000bc4:	f000 ff5a 	bl	8001a7c <arm_nn_mat_mult_kernel_q7_q15>
 8000bc8:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
 8000bcc:	902f      	str	r0, [sp, #188]	; 0xbc
 8000bce:	e747      	b.n	8000a60 <arm_convolve_HWC_q7_basic_nonsquare+0x138>
 8000bd0:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8000bd2:	e7b5      	b.n	8000b40 <arm_convolve_HWC_q7_basic_nonsquare+0x218>
 8000bd4:	ffff0000 	.word	0xffff0000

08000bd8 <arm_convolve_HWC_q7_fast>:
 8000bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bdc:	b09b      	sub	sp, #108	; 0x6c
 8000bde:	4693      	mov	fp, r2
 8000be0:	9314      	str	r3, [sp, #80]	; 0x50
 8000be2:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8000be6:	9004      	str	r0, [sp, #16]
 8000be8:	9315      	str	r3, [sp, #84]	; 0x54
 8000bea:	4618      	mov	r0, r3
 8000bec:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8000bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8000bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8000c00:	9309      	str	r3, [sp, #36]	; 0x24
 8000c02:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 8000c06:	9316      	str	r3, [sp, #88]	; 0x58
 8000c08:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 8000c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000c0e:	f01b 0f03 	tst.w	fp, #3
 8000c12:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 8000c16:	930d      	str	r3, [sp, #52]	; 0x34
 8000c18:	f040 8369 	bne.w	80012ee <arm_convolve_HWC_q7_fast+0x716>
 8000c1c:	f010 0301 	ands.w	r3, r0, #1
 8000c20:	f040 8365 	bne.w	80012ee <arm_convolve_HWC_q7_fast+0x716>
 8000c24:	460f      	mov	r7, r1
 8000c26:	2c00      	cmp	r4, #0
 8000c28:	f000 8366 	beq.w	80012f8 <arm_convolve_HWC_q7_fast+0x720>
 8000c2c:	fb02 f102 	mul.w	r1, r2, r2
 8000c30:	4264      	negs	r4, r4
 8000c32:	b2a0      	uxth	r0, r4
 8000c34:	0049      	lsls	r1, r1, #1
 8000c36:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8000c38:	9011      	str	r0, [sp, #68]	; 0x44
 8000c3a:	fb12 f202 	smulbb	r2, r2, r2
 8000c3e:	fb0b f101 	mul.w	r1, fp, r1
 8000c42:	fb12 f20b 	smulbb	r2, r2, fp
 8000c46:	b292      	uxth	r2, r2
 8000c48:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8000c4c:	9210      	str	r2, [sp, #64]	; 0x40
 8000c4e:	910e      	str	r1, [sp, #56]	; 0x38
 8000c50:	900f      	str	r0, [sp, #60]	; 0x3c
 8000c52:	9312      	str	r3, [sp, #72]	; 0x48
 8000c54:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8000c58:	46a2      	mov	sl, r4
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f8cd b018 	str.w	fp, [sp, #24]
 8000c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d05e      	beq.n	8000d24 <arm_convolve_HWC_q7_fast+0x14c>
 8000c66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c6a:	fb03 1302 	mla	r3, r3, r2, r1
 8000c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	9305      	str	r3, [sp, #20]
 8000c74:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8000c78:	930a      	str	r3, [sp, #40]	; 0x28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000c7e:	9208      	str	r2, [sp, #32]
 8000c80:	9307      	str	r3, [sp, #28]
 8000c82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c84:	9805      	ldr	r0, [sp, #20]
 8000c86:	4281      	cmp	r1, r0
 8000c88:	da3b      	bge.n	8000d02 <arm_convolve_HWC_q7_fast+0x12a>
 8000c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000c8e:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8000c92:	fb03 0202 	mla	r2, r3, r2, r0
 8000c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000c98:	460e      	mov	r6, r1
 8000c9a:	1ad5      	subs	r5, r2, r3
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	45a8      	cmp	r8, r5
 8000ca0:	da29      	bge.n	8000cf6 <arm_convolve_HWC_q7_fast+0x11e>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	fb07 fb02 	mul.w	fp, r7, r2
 8000ca8:	f2c0 82a2 	blt.w	80011f0 <arm_convolve_HWC_q7_fast+0x618>
 8000cac:	4297      	cmp	r7, r2
 8000cae:	f340 8287 	ble.w	80011c0 <arm_convolve_HWC_q7_fast+0x5e8>
 8000cb2:	46c6      	mov	lr, r8
 8000cb4:	4644      	mov	r4, r8
 8000cb6:	e007      	b.n	8000cc8 <arm_convolve_HWC_q7_fast+0xf0>
 8000cb8:	3401      	adds	r4, #1
 8000cba:	b224      	sxth	r4, r4
 8000cbc:	f007 fd70 	bl	80087a0 <memset>
 8000cc0:	42ac      	cmp	r4, r5
 8000cc2:	44ca      	add	sl, r9
 8000cc4:	46a6      	mov	lr, r4
 8000cc6:	da16      	bge.n	8000cf6 <arm_convolve_HWC_q7_fast+0x11e>
 8000cc8:	2c00      	cmp	r4, #0
 8000cca:	4650      	mov	r0, sl
 8000ccc:	464a      	mov	r2, r9
 8000cce:	f04f 0100 	mov.w	r1, #0
 8000cd2:	dbf1      	blt.n	8000cb8 <arm_convolve_HWC_q7_fast+0xe0>
 8000cd4:	4577      	cmp	r7, lr
 8000cd6:	ddef      	ble.n	8000cb8 <arm_convolve_HWC_q7_fast+0xe0>
 8000cd8:	9904      	ldr	r1, [sp, #16]
 8000cda:	9a06      	ldr	r2, [sp, #24]
 8000cdc:	eb0b 000e 	add.w	r0, fp, lr
 8000ce0:	3401      	adds	r4, #1
 8000ce2:	fb02 1000 	mla	r0, r2, r0, r1
 8000ce6:	b224      	sxth	r4, r4
 8000ce8:	4651      	mov	r1, sl
 8000cea:	f001 faad 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8000cee:	42ac      	cmp	r4, r5
 8000cf0:	44ca      	add	sl, r9
 8000cf2:	46a6      	mov	lr, r4
 8000cf4:	dbe8      	blt.n	8000cc8 <arm_convolve_HWC_q7_fast+0xf0>
 8000cf6:	3601      	adds	r6, #1
 8000cf8:	9b05      	ldr	r3, [sp, #20]
 8000cfa:	b236      	sxth	r6, r6
 8000cfc:	429e      	cmp	r6, r3
 8000cfe:	4632      	mov	r2, r6
 8000d00:	dbcd      	blt.n	8000c9e <arm_convolve_HWC_q7_fast+0xc6>
 8000d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000d04:	459a      	cmp	sl, r3
 8000d06:	f000 829d 	beq.w	8001244 <arm_convolve_HWC_q7_fast+0x66c>
 8000d0a:	9a08      	ldr	r2, [sp, #32]
 8000d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000d0e:	3201      	adds	r2, #1
 8000d10:	b213      	sxth	r3, r2
 8000d12:	9a07      	ldr	r2, [sp, #28]
 8000d14:	9308      	str	r3, [sp, #32]
 8000d16:	440a      	add	r2, r1
 8000d18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000d1a:	b292      	uxth	r2, r2
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	9207      	str	r2, [sp, #28]
 8000d20:	461a      	mov	r2, r3
 8000d22:	dbae      	blt.n	8000c82 <arm_convolve_HWC_q7_fast+0xaa>
 8000d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000d26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000d28:	3201      	adds	r2, #1
 8000d2a:	b213      	sxth	r3, r2
 8000d2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000d2e:	9312      	str	r3, [sp, #72]	; 0x48
 8000d30:	440a      	add	r2, r1
 8000d32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000d34:	b292      	uxth	r2, r2
 8000d36:	428b      	cmp	r3, r1
 8000d38:	920f      	str	r2, [sp, #60]	; 0x3c
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	db90      	blt.n	8000c60 <arm_convolve_HWC_q7_fast+0x88>
 8000d3e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8000d42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000d44:	1a52      	subs	r2, r2, r1
 8000d46:	429a      	cmp	r2, r3
 8000d48:	9211      	str	r2, [sp, #68]	; 0x44
 8000d4a:	f340 813b 	ble.w	8000fc4 <arm_convolve_HWC_q7_fast+0x3ec>
 8000d4e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8000d52:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8000d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d58:	fb12 f204 	smulbb	r2, r2, r4
 8000d5c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8000d5e:	fb05 f005 	mul.w	r0, r5, r5
 8000d62:	fb15 f105 	smulbb	r1, r5, r5
 8000d66:	1b12      	subs	r2, r2, r4
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	fb0b f405 	mul.w	r4, fp, r5
 8000d6e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8000d70:	9407      	str	r4, [sp, #28]
 8000d72:	b292      	uxth	r2, r2
 8000d74:	fb0b f000 	mul.w	r0, fp, r0
 8000d78:	fb11 f10b 	smulbb	r1, r1, fp
 8000d7c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8000d80:	b289      	uxth	r1, r1
 8000d82:	9217      	str	r2, [sp, #92]	; 0x5c
 8000d84:	0062      	lsls	r2, r4, #1
 8000d86:	9208      	str	r2, [sp, #32]
 8000d88:	9010      	str	r0, [sp, #64]	; 0x40
 8000d8a:	9118      	str	r1, [sp, #96]	; 0x60
 8000d8c:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8000d90:	461a      	mov	r2, r3
 8000d92:	46d1      	mov	r9, sl
 8000d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 829c 	beq.w	80012d4 <arm_convolve_HWC_q7_fast+0x6fc>
 8000d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000d9e:	fb01 f202 	mul.w	r2, r1, r2
 8000da2:	1ad1      	subs	r1, r2, r3
 8000da4:	9219      	str	r2, [sp, #100]	; 0x64
 8000da6:	425a      	negs	r2, r3
 8000da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000daa:	18cb      	adds	r3, r1, r3
 8000dac:	9305      	str	r3, [sp, #20]
 8000dae:	b293      	uxth	r3, r2
 8000db0:	2400      	movs	r4, #0
 8000db2:	930f      	str	r3, [sp, #60]	; 0x3c
 8000db4:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8000db8:	940a      	str	r4, [sp, #40]	; 0x28
 8000dba:	930e      	str	r3, [sp, #56]	; 0x38
 8000dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000dbe:	9905      	ldr	r1, [sp, #20]
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	da3d      	bge.n	8000e40 <arm_convolve_HWC_q7_fast+0x268>
 8000dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000dc8:	fb03 1404 	mla	r4, r3, r4, r1
 8000dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000dce:	1ae5      	subs	r5, r4, r3
 8000dd0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8000dd4:	9306      	str	r3, [sp, #24]
 8000dd6:	4692      	mov	sl, r2
 8000dd8:	4616      	mov	r6, r2
 8000dda:	9a06      	ldr	r2, [sp, #24]
 8000ddc:	42aa      	cmp	r2, r5
 8000dde:	da29      	bge.n	8000e34 <arm_convolve_HWC_q7_fast+0x25c>
 8000de0:	4643      	mov	r3, r8
 8000de2:	fb07 fa0a 	mul.w	sl, r7, sl
 8000de6:	46b0      	mov	r8, r6
 8000de8:	4696      	mov	lr, r2
 8000dea:	4614      	mov	r4, r2
 8000dec:	461e      	mov	r6, r3
 8000dee:	e007      	b.n	8000e00 <arm_convolve_HWC_q7_fast+0x228>
 8000df0:	3401      	adds	r4, #1
 8000df2:	b224      	sxth	r4, r4
 8000df4:	f007 fcd4 	bl	80087a0 <memset>
 8000df8:	42ac      	cmp	r4, r5
 8000dfa:	44b1      	add	r9, r6
 8000dfc:	46a6      	mov	lr, r4
 8000dfe:	da16      	bge.n	8000e2e <arm_convolve_HWC_q7_fast+0x256>
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	4632      	mov	r2, r6
 8000e04:	f04f 0100 	mov.w	r1, #0
 8000e08:	4648      	mov	r0, r9
 8000e0a:	dbf1      	blt.n	8000df0 <arm_convolve_HWC_q7_fast+0x218>
 8000e0c:	4577      	cmp	r7, lr
 8000e0e:	ddef      	ble.n	8000df0 <arm_convolve_HWC_q7_fast+0x218>
 8000e10:	9b04      	ldr	r3, [sp, #16]
 8000e12:	eb0a 000e 	add.w	r0, sl, lr
 8000e16:	3401      	adds	r4, #1
 8000e18:	4649      	mov	r1, r9
 8000e1a:	b224      	sxth	r4, r4
 8000e1c:	fb0b 3000 	mla	r0, fp, r0, r3
 8000e20:	465a      	mov	r2, fp
 8000e22:	f001 fa11 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8000e26:	42ac      	cmp	r4, r5
 8000e28:	44b1      	add	r9, r6
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	dbe8      	blt.n	8000e00 <arm_convolve_HWC_q7_fast+0x228>
 8000e2e:	4633      	mov	r3, r6
 8000e30:	4646      	mov	r6, r8
 8000e32:	4698      	mov	r8, r3
 8000e34:	3601      	adds	r6, #1
 8000e36:	9b05      	ldr	r3, [sp, #20]
 8000e38:	b236      	sxth	r6, r6
 8000e3a:	429e      	cmp	r6, r3
 8000e3c:	46b2      	mov	sl, r6
 8000e3e:	dbcc      	blt.n	8000dda <arm_convolve_HWC_q7_fast+0x202>
 8000e40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000e42:	4599      	cmp	r9, r3
 8000e44:	f000 8234 	beq.w	80012b0 <arm_convolve_HWC_q7_fast+0x6d8>
 8000e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000e4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000e4c:	3201      	adds	r2, #1
 8000e4e:	b213      	sxth	r3, r2
 8000e50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000e52:	930a      	str	r3, [sp, #40]	; 0x28
 8000e54:	440a      	add	r2, r1
 8000e56:	b292      	uxth	r2, r2
 8000e58:	920f      	str	r2, [sp, #60]	; 0x3c
 8000e5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	461c      	mov	r4, r3
 8000e60:	dbac      	blt.n	8000dbc <arm_convolve_HWC_q7_fast+0x1e4>
 8000e62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000e64:	4293      	cmp	r3, r2
 8000e66:	da38      	bge.n	8000eda <arm_convolve_HWC_q7_fast+0x302>
 8000e68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8000e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000e6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8000e70:	f8cd 8014 	str.w	r8, [sp, #20]
 8000e74:	1ad5      	subs	r5, r2, r3
 8000e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	4415      	add	r5, r2
 8000e7c:	4699      	mov	r9, r3
 8000e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e80:	42aa      	cmp	r2, r5
 8000e82:	da1b      	bge.n	8000ebc <arm_convolve_HWC_q7_fast+0x2e4>
 8000e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e86:	fb03 f604 	mul.w	r6, r3, r4
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4647      	mov	r7, r8
 8000e90:	4614      	mov	r4, r2
 8000e92:	4698      	mov	r8, r3
 8000e94:	fb08 6000 	mla	r0, r8, r0, r6
 8000e98:	eba0 0009 	sub.w	r0, r0, r9
 8000e9c:	fb0b a000 	mla	r0, fp, r0, sl
 8000ea0:	4639      	mov	r1, r7
 8000ea2:	9a07      	ldr	r2, [sp, #28]
 8000ea4:	3401      	adds	r4, #1
 8000ea6:	f001 f9cf 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8000eaa:	b224      	sxth	r4, r4
 8000eac:	9b08      	ldr	r3, [sp, #32]
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	441f      	add	r7, r3
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	dbee      	blt.n	8000e94 <arm_convolve_HWC_q7_fast+0x2bc>
 8000eb6:	4643      	mov	r3, r8
 8000eb8:	46b8      	mov	r8, r7
 8000eba:	461f      	mov	r7, r3
 8000ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000ebe:	4598      	cmp	r8, r3
 8000ec0:	f000 81e4 	beq.w	800128c <arm_convolve_HWC_q7_fast+0x6b4>
 8000ec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000ec6:	3201      	adds	r2, #1
 8000ec8:	b213      	sxth	r3, r2
 8000eca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	461c      	mov	r4, r3
 8000ed2:	dbd4      	blt.n	8000e7e <arm_convolve_HWC_q7_fast+0x2a6>
 8000ed4:	46c1      	mov	r9, r8
 8000ed6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8000eda:	461a      	mov	r2, r3
 8000edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4291      	cmp	r1, r2
 8000ee2:	dd60      	ble.n	8000fa6 <arm_convolve_HWC_q7_fast+0x3ce>
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8000eea:	9919      	ldr	r1, [sp, #100]	; 0x64
 8000eec:	fb13 f202 	smulbb	r2, r3, r2
 8000ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	1ad2      	subs	r2, r2, r3
 8000ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ef8:	18cb      	adds	r3, r1, r3
 8000efa:	9305      	str	r3, [sp, #20]
 8000efc:	b293      	uxth	r3, r2
 8000efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000f02:	9905      	ldr	r1, [sp, #20]
 8000f04:	428a      	cmp	r2, r1
 8000f06:	da3e      	bge.n	8000f86 <arm_convolve_HWC_q7_fast+0x3ae>
 8000f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000f0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000f0e:	fb01 0503 	mla	r5, r1, r3, r0
 8000f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f14:	1aed      	subs	r5, r5, r3
 8000f16:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8000f1a:	9306      	str	r3, [sp, #24]
 8000f1c:	4692      	mov	sl, r2
 8000f1e:	4616      	mov	r6, r2
 8000f20:	9a06      	ldr	r2, [sp, #24]
 8000f22:	42aa      	cmp	r2, r5
 8000f24:	da29      	bge.n	8000f7a <arm_convolve_HWC_q7_fast+0x3a2>
 8000f26:	4643      	mov	r3, r8
 8000f28:	fb07 fa0a 	mul.w	sl, r7, sl
 8000f2c:	46b0      	mov	r8, r6
 8000f2e:	4696      	mov	lr, r2
 8000f30:	4614      	mov	r4, r2
 8000f32:	461e      	mov	r6, r3
 8000f34:	e007      	b.n	8000f46 <arm_convolve_HWC_q7_fast+0x36e>
 8000f36:	3401      	adds	r4, #1
 8000f38:	b224      	sxth	r4, r4
 8000f3a:	f007 fc31 	bl	80087a0 <memset>
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	44b1      	add	r9, r6
 8000f42:	46a6      	mov	lr, r4
 8000f44:	da16      	bge.n	8000f74 <arm_convolve_HWC_q7_fast+0x39c>
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	4632      	mov	r2, r6
 8000f4a:	f04f 0100 	mov.w	r1, #0
 8000f4e:	4648      	mov	r0, r9
 8000f50:	dbf1      	blt.n	8000f36 <arm_convolve_HWC_q7_fast+0x35e>
 8000f52:	4577      	cmp	r7, lr
 8000f54:	ddef      	ble.n	8000f36 <arm_convolve_HWC_q7_fast+0x35e>
 8000f56:	9b04      	ldr	r3, [sp, #16]
 8000f58:	eb0a 000e 	add.w	r0, sl, lr
 8000f5c:	3401      	adds	r4, #1
 8000f5e:	4649      	mov	r1, r9
 8000f60:	b224      	sxth	r4, r4
 8000f62:	fb0b 3000 	mla	r0, fp, r0, r3
 8000f66:	465a      	mov	r2, fp
 8000f68:	f001 f96e 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8000f6c:	42ac      	cmp	r4, r5
 8000f6e:	44b1      	add	r9, r6
 8000f70:	46a6      	mov	lr, r4
 8000f72:	dbe8      	blt.n	8000f46 <arm_convolve_HWC_q7_fast+0x36e>
 8000f74:	4633      	mov	r3, r6
 8000f76:	4646      	mov	r6, r8
 8000f78:	4698      	mov	r8, r3
 8000f7a:	3601      	adds	r6, #1
 8000f7c:	9b05      	ldr	r3, [sp, #20]
 8000f7e:	b236      	sxth	r6, r6
 8000f80:	429e      	cmp	r6, r3
 8000f82:	46b2      	mov	sl, r6
 8000f84:	dbcc      	blt.n	8000f20 <arm_convolve_HWC_q7_fast+0x348>
 8000f86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000f88:	4599      	cmp	r9, r3
 8000f8a:	f000 8149 	beq.w	8001220 <arm_convolve_HWC_q7_fast+0x648>
 8000f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000f92:	3201      	adds	r2, #1
 8000f94:	b213      	sxth	r3, r2
 8000f96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000f98:	930a      	str	r3, [sp, #40]	; 0x28
 8000f9a:	440a      	add	r2, r1
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	920f      	str	r2, [sp, #60]	; 0x3c
 8000fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	dbac      	blt.n	8000f00 <arm_convolve_HWC_q7_fast+0x328>
 8000fa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000faa:	3201      	adds	r2, #1
 8000fac:	b213      	sxth	r3, r2
 8000fae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8000fb0:	9312      	str	r3, [sp, #72]	; 0x48
 8000fb2:	440a      	add	r2, r1
 8000fb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000fb6:	b292      	uxth	r2, r2
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	9217      	str	r2, [sp, #92]	; 0x5c
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f6ff aee9 	blt.w	8000d94 <arm_convolve_HWC_q7_fast+0x1bc>
 8000fc2:	46ca      	mov	sl, r9
 8000fc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	f340 8090 	ble.w	80010ec <arm_convolve_HWC_q7_fast+0x514>
 8000fcc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8000fd0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8000fd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000fd6:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8000fd8:	f8cd b018 	str.w	fp, [sp, #24]
 8000fdc:	fb12 f204 	smulbb	r2, r2, r4
 8000fe0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8000fe2:	fb01 f001 	mul.w	r0, r1, r1
 8000fe6:	1b12      	subs	r2, r2, r4
 8000fe8:	0040      	lsls	r0, r0, #1
 8000fea:	fb11 f101 	smulbb	r1, r1, r1
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	fb0b f000 	mul.w	r0, fp, r0
 8000ff4:	fb11 f10b 	smulbb	r1, r1, fp
 8000ff8:	4264      	negs	r4, r4
 8000ffa:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8000ffe:	b289      	uxth	r1, r1
 8001000:	920f      	str	r2, [sp, #60]	; 0x3c
 8001002:	b2a2      	uxth	r2, r4
 8001004:	9211      	str	r2, [sp, #68]	; 0x44
 8001006:	900a      	str	r0, [sp, #40]	; 0x28
 8001008:	9110      	str	r1, [sp, #64]	; 0x40
 800100a:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800100e:	461a      	mov	r2, r3
 8001010:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001014:	fb03 1302 	mla	r3, r3, r2, r1
 8001018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800101a:	1a5b      	subs	r3, r3, r1
 800101c:	9305      	str	r3, [sp, #20]
 800101e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8001022:	930e      	str	r3, [sp, #56]	; 0x38
 8001024:	2200      	movs	r2, #0
 8001026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001028:	9208      	str	r2, [sp, #32]
 800102a:	9307      	str	r3, [sp, #28]
 800102c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800102e:	9805      	ldr	r0, [sp, #20]
 8001030:	4281      	cmp	r1, r0
 8001032:	da3b      	bge.n	80010ac <arm_convolve_HWC_q7_fast+0x4d4>
 8001034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001036:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001038:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 800103c:	fb03 0202 	mla	r2, r3, r2, r0
 8001040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001042:	460e      	mov	r6, r1
 8001044:	1ad5      	subs	r5, r2, r3
 8001046:	460a      	mov	r2, r1
 8001048:	45a8      	cmp	r8, r5
 800104a:	da29      	bge.n	80010a0 <arm_convolve_HWC_q7_fast+0x4c8>
 800104c:	2e00      	cmp	r6, #0
 800104e:	fb07 fb02 	mul.w	fp, r7, r2
 8001052:	f2c0 80d9 	blt.w	8001208 <arm_convolve_HWC_q7_fast+0x630>
 8001056:	4297      	cmp	r7, r2
 8001058:	f340 80be 	ble.w	80011d8 <arm_convolve_HWC_q7_fast+0x600>
 800105c:	46c6      	mov	lr, r8
 800105e:	4644      	mov	r4, r8
 8001060:	e007      	b.n	8001072 <arm_convolve_HWC_q7_fast+0x49a>
 8001062:	3401      	adds	r4, #1
 8001064:	b224      	sxth	r4, r4
 8001066:	f007 fb9b 	bl	80087a0 <memset>
 800106a:	42ac      	cmp	r4, r5
 800106c:	44ca      	add	sl, r9
 800106e:	46a6      	mov	lr, r4
 8001070:	da16      	bge.n	80010a0 <arm_convolve_HWC_q7_fast+0x4c8>
 8001072:	2c00      	cmp	r4, #0
 8001074:	4650      	mov	r0, sl
 8001076:	464a      	mov	r2, r9
 8001078:	f04f 0100 	mov.w	r1, #0
 800107c:	dbf1      	blt.n	8001062 <arm_convolve_HWC_q7_fast+0x48a>
 800107e:	4577      	cmp	r7, lr
 8001080:	ddef      	ble.n	8001062 <arm_convolve_HWC_q7_fast+0x48a>
 8001082:	9904      	ldr	r1, [sp, #16]
 8001084:	9a06      	ldr	r2, [sp, #24]
 8001086:	eb0b 000e 	add.w	r0, fp, lr
 800108a:	3401      	adds	r4, #1
 800108c:	fb02 1000 	mla	r0, r2, r0, r1
 8001090:	b224      	sxth	r4, r4
 8001092:	4651      	mov	r1, sl
 8001094:	f001 f8d8 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001098:	42ac      	cmp	r4, r5
 800109a:	44ca      	add	sl, r9
 800109c:	46a6      	mov	lr, r4
 800109e:	dbe8      	blt.n	8001072 <arm_convolve_HWC_q7_fast+0x49a>
 80010a0:	3601      	adds	r6, #1
 80010a2:	9b05      	ldr	r3, [sp, #20]
 80010a4:	b236      	sxth	r6, r6
 80010a6:	429e      	cmp	r6, r3
 80010a8:	4632      	mov	r2, r6
 80010aa:	dbcd      	blt.n	8001048 <arm_convolve_HWC_q7_fast+0x470>
 80010ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010ae:	459a      	cmp	sl, r3
 80010b0:	f000 80da 	beq.w	8001268 <arm_convolve_HWC_q7_fast+0x690>
 80010b4:	9a08      	ldr	r2, [sp, #32]
 80010b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80010b8:	3201      	adds	r2, #1
 80010ba:	b213      	sxth	r3, r2
 80010bc:	9a07      	ldr	r2, [sp, #28]
 80010be:	9308      	str	r3, [sp, #32]
 80010c0:	440a      	add	r2, r1
 80010c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80010c4:	b292      	uxth	r2, r2
 80010c6:	428b      	cmp	r3, r1
 80010c8:	9207      	str	r2, [sp, #28]
 80010ca:	461a      	mov	r2, r3
 80010cc:	dbae      	blt.n	800102c <arm_convolve_HWC_q7_fast+0x454>
 80010ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80010d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80010d2:	3201      	adds	r2, #1
 80010d4:	b213      	sxth	r3, r2
 80010d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80010d8:	9312      	str	r3, [sp, #72]	; 0x48
 80010da:	440a      	add	r2, r1
 80010dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80010de:	b292      	uxth	r2, r2
 80010e0:	428b      	cmp	r3, r1
 80010e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80010e4:	461a      	mov	r2, r3
 80010e6:	db93      	blt.n	8001010 <arm_convolve_HWC_q7_fast+0x438>
 80010e8:	f8dd b018 	ldr.w	fp, [sp, #24]
 80010ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80010ee:	4553      	cmp	r3, sl
 80010f0:	d062      	beq.n	80011b8 <arm_convolve_HWC_q7_fast+0x5e0>
 80010f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80010f4:	2900      	cmp	r1, #0
 80010f6:	d05f      	beq.n	80011b8 <arm_convolve_HWC_q7_fast+0x5e0>
 80010f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80010fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80010fc:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8001100:	fb02 f50b 	mul.w	r5, r2, fp
 8001104:	fb02 f505 	mul.w	r5, r2, r5
 8001108:	fb12 f002 	smulbb	r0, r2, r2
 800110c:	4688      	mov	r8, r1
 800110e:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8001112:	992b      	ldr	r1, [sp, #172]	; 0xac
 8001114:	fb10 f00b 	smulbb	r0, r0, fp
 8001118:	1e6b      	subs	r3, r5, #1
 800111a:	f000 0003 	and.w	r0, r0, #3
 800111e:	2201      	movs	r2, #1
 8001120:	4488      	add	r8, r1
 8001122:	b29b      	uxth	r3, r3
 8001124:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001126:	9005      	str	r0, [sp, #20]
 8001128:	4413      	add	r3, r2
 800112a:	f100 3cff 	add.w	ip, r0, #4294967295
 800112e:	40a2      	lsls	r2, r4
 8001130:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8001132:	fa1f fc8c 	uxth.w	ip, ip
 8001136:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800113a:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 800113e:	0853      	lsrs	r3, r2, #1
 8001140:	1e67      	subs	r7, r4, #1
 8001142:	f10c 0b01 	add.w	fp, ip, #1
 8001146:	9304      	str	r3, [sp, #16]
 8001148:	4640      	mov	r0, r8
 800114a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800114c:	f917 3f01 	ldrsb.w	r3, [r7, #1]!
 8001150:	4093      	lsls	r3, r2
 8001152:	9a04      	ldr	r2, [sp, #16]
 8001154:	4413      	add	r3, r2
 8001156:	2d00      	cmp	r5, #0
 8001158:	f000 80c7 	beq.w	80012ea <arm_convolve_HWC_q7_fast+0x712>
 800115c:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800115e:	eb0e 0809 	add.w	r8, lr, r9
 8001162:	f85e 2b04 	ldr.w	r2, [lr], #4
 8001166:	6834      	ldr	r4, [r6, #0]
 8001168:	fa2f f182 	sxtb16	r1, r2
 800116c:	ea4f 2232 	mov.w	r2, r2, ror #8
 8001170:	fa2f f282 	sxtb16	r2, r2
 8001174:	fb21 3304 	smlad	r3, r1, r4, r3
 8001178:	6871      	ldr	r1, [r6, #4]
 800117a:	3608      	adds	r6, #8
 800117c:	fb22 3301 	smlad	r3, r2, r1, r3
 8001180:	45c6      	cmp	lr, r8
 8001182:	d1ee      	bne.n	8001162 <arm_convolve_HWC_q7_fast+0x58a>
 8001184:	4651      	mov	r1, sl
 8001186:	9a05      	ldr	r2, [sp, #20]
 8001188:	b162      	cbz	r2, 80011a4 <arm_convolve_HWC_q7_fast+0x5cc>
 800118a:	f10e 32ff 	add.w	r2, lr, #4294967295
 800118e:	eb0e 080c 	add.w	r8, lr, ip
 8001192:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8001196:	f831 6b02 	ldrh.w	r6, [r1], #2
 800119a:	4542      	cmp	r2, r8
 800119c:	fb16 3304 	smlabb	r3, r6, r4, r3
 80011a0:	d1f7      	bne.n	8001192 <arm_convolve_HWC_q7_fast+0x5ba>
 80011a2:	44de      	add	lr, fp
 80011a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80011a6:	4113      	asrs	r3, r2
 80011a8:	f303 0307 	ssat	r3, #8, r3
 80011ac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80011ae:	f802 3b01 	strb.w	r3, [r2], #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	922b      	str	r2, [sp, #172]	; 0xac
 80011b6:	d1c8      	bne.n	800114a <arm_convolve_HWC_q7_fast+0x572>
 80011b8:	2000      	movs	r0, #0
 80011ba:	b01b      	add	sp, #108	; 0x6c
 80011bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011c0:	4644      	mov	r4, r8
 80011c2:	3401      	adds	r4, #1
 80011c4:	4650      	mov	r0, sl
 80011c6:	464a      	mov	r2, r9
 80011c8:	2100      	movs	r1, #0
 80011ca:	b224      	sxth	r4, r4
 80011cc:	f007 fae8 	bl	80087a0 <memset>
 80011d0:	42ac      	cmp	r4, r5
 80011d2:	44ca      	add	sl, r9
 80011d4:	dbf5      	blt.n	80011c2 <arm_convolve_HWC_q7_fast+0x5ea>
 80011d6:	e58e      	b.n	8000cf6 <arm_convolve_HWC_q7_fast+0x11e>
 80011d8:	4644      	mov	r4, r8
 80011da:	3401      	adds	r4, #1
 80011dc:	4650      	mov	r0, sl
 80011de:	464a      	mov	r2, r9
 80011e0:	2100      	movs	r1, #0
 80011e2:	b224      	sxth	r4, r4
 80011e4:	f007 fadc 	bl	80087a0 <memset>
 80011e8:	42ac      	cmp	r4, r5
 80011ea:	44ca      	add	sl, r9
 80011ec:	dbf5      	blt.n	80011da <arm_convolve_HWC_q7_fast+0x602>
 80011ee:	e757      	b.n	80010a0 <arm_convolve_HWC_q7_fast+0x4c8>
 80011f0:	4644      	mov	r4, r8
 80011f2:	3401      	adds	r4, #1
 80011f4:	4650      	mov	r0, sl
 80011f6:	464a      	mov	r2, r9
 80011f8:	2100      	movs	r1, #0
 80011fa:	b224      	sxth	r4, r4
 80011fc:	f007 fad0 	bl	80087a0 <memset>
 8001200:	42ac      	cmp	r4, r5
 8001202:	44ca      	add	sl, r9
 8001204:	dbf5      	blt.n	80011f2 <arm_convolve_HWC_q7_fast+0x61a>
 8001206:	e576      	b.n	8000cf6 <arm_convolve_HWC_q7_fast+0x11e>
 8001208:	4644      	mov	r4, r8
 800120a:	3401      	adds	r4, #1
 800120c:	4650      	mov	r0, sl
 800120e:	464a      	mov	r2, r9
 8001210:	2100      	movs	r1, #0
 8001212:	b224      	sxth	r4, r4
 8001214:	f007 fac4 	bl	80087a0 <memset>
 8001218:	42ac      	cmp	r4, r5
 800121a:	44ca      	add	sl, r9
 800121c:	dbf5      	blt.n	800120a <arm_convolve_HWC_q7_fast+0x632>
 800121e:	e73f      	b.n	80010a0 <arm_convolve_HWC_q7_fast+0x4c8>
 8001220:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001222:	9303      	str	r3, [sp, #12]
 8001224:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001232:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001234:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001236:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001238:	f000 fdaa 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 800123c:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
 8001240:	902b      	str	r0, [sp, #172]	; 0xac
 8001242:	e6a4      	b.n	8000f8e <arm_convolve_HWC_q7_fast+0x3b6>
 8001244:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001246:	9303      	str	r3, [sp, #12]
 8001248:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001258:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800125a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800125c:	f000 fd98 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001260:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8001264:	902b      	str	r0, [sp, #172]	; 0xac
 8001266:	e550      	b.n	8000d0a <arm_convolve_HWC_q7_fast+0x132>
 8001268:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800126a:	9303      	str	r3, [sp, #12]
 800126c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800127a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800127c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800127e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001280:	f000 fd86 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001284:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8001288:	902b      	str	r0, [sp, #172]	; 0xac
 800128a:	e713      	b.n	80010b4 <arm_convolve_HWC_q7_fast+0x4dc>
 800128c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800128e:	9303      	str	r3, [sp, #12]
 8001290:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800129e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80012a0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80012a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80012a4:	f000 fd74 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80012a8:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 80012ac:	902b      	str	r0, [sp, #172]	; 0xac
 80012ae:	e609      	b.n	8000ec4 <arm_convolve_HWC_q7_fast+0x2ec>
 80012b0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80012b2:	9303      	str	r3, [sp, #12]
 80012b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80012c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80012c4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80012c6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80012c8:	f000 fd62 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80012cc:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
 80012d0:	902b      	str	r0, [sp, #172]	; 0xac
 80012d2:	e5b9      	b.n	8000e48 <arm_convolve_HWC_q7_fast+0x270>
 80012d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012d6:	fb03 f302 	mul.w	r3, r3, r2
 80012da:	9319      	str	r3, [sp, #100]	; 0x64
 80012dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012de:	930a      	str	r3, [sp, #40]	; 0x28
 80012e0:	461c      	mov	r4, r3
 80012e2:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 80012e6:	930e      	str	r3, [sp, #56]	; 0x38
 80012e8:	e5be      	b.n	8000e68 <arm_convolve_HWC_q7_fast+0x290>
 80012ea:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80012ec:	e74b      	b.n	8001186 <arm_convolve_HWC_q7_fast+0x5ae>
 80012ee:	f06f 0002 	mvn.w	r0, #2
 80012f2:	b01b      	add	sp, #108	; 0x6c
 80012f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f8:	4623      	mov	r3, r4
 80012fa:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 80012fe:	9412      	str	r4, [sp, #72]	; 0x48
 8001300:	4621      	mov	r1, r4
 8001302:	e51e      	b.n	8000d42 <arm_convolve_HWC_q7_fast+0x16a>

08001304 <arm_convolve_HWC_q7_fast_nonsquare>:
 8001304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001308:	b0a1      	sub	sp, #132	; 0x84
 800130a:	f8bd e0c0 	ldrh.w	lr, [sp, #192]	; 0xc0
 800130e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8001312:	f8bd e0c4 	ldrh.w	lr, [sp, #196]	; 0xc4
 8001316:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 800131a:	f8bd e0cc 	ldrh.w	lr, [sp, #204]	; 0xcc
 800131e:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001322:	f8bd e0d0 	ldrh.w	lr, [sp, #208]	; 0xd0
 8001326:	f8bd 40ac 	ldrh.w	r4, [sp, #172]	; 0xac
 800132a:	f8bd 70b8 	ldrh.w	r7, [sp, #184]	; 0xb8
 800132e:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8001332:	f8bd e0d8 	ldrh.w	lr, [sp, #216]	; 0xd8
 8001336:	9418      	str	r4, [sp, #96]	; 0x60
 8001338:	f8bd 50b0 	ldrh.w	r5, [sp, #176]	; 0xb0
 800133c:	f8bd 60b4 	ldrh.w	r6, [sp, #180]	; 0xb4
 8001340:	970c      	str	r7, [sp, #48]	; 0x30
 8001342:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8001346:	f8bd 70bc 	ldrh.w	r7, [sp, #188]	; 0xbc
 800134a:	f8bd e0dc 	ldrh.w	lr, [sp, #220]	; 0xdc
 800134e:	950d      	str	r5, [sp, #52]	; 0x34
 8001350:	079c      	lsls	r4, r3, #30
 8001352:	9616      	str	r6, [sp, #88]	; 0x58
 8001354:	9714      	str	r7, [sp, #80]	; 0x50
 8001356:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 800135a:	f040 8384 	bne.w	8001a66 <arm_convolve_HWC_q7_fast_nonsquare+0x762>
 800135e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8001360:	f014 0401 	ands.w	r4, r4, #1
 8001364:	f040 837f 	bne.w	8001a66 <arm_convolve_HWC_q7_fast_nonsquare+0x762>
 8001368:	9205      	str	r2, [sp, #20]
 800136a:	4688      	mov	r8, r1
 800136c:	9004      	str	r0, [sp, #16]
 800136e:	469b      	mov	fp, r3
 8001370:	2f00      	cmp	r7, #0
 8001372:	f000 837d 	beq.w	8001a70 <arm_convolve_HWC_q7_fast_nonsquare+0x76c>
 8001376:	006a      	lsls	r2, r5, #1
 8001378:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800137a:	9412      	str	r4, [sp, #72]	; 0x48
 800137c:	fb06 f202 	mul.w	r2, r6, r2
 8001380:	fb16 f305 	smulbb	r3, r6, r5
 8001384:	fb0b f202 	mul.w	r2, fp, r2
 8001388:	fb13 f30b 	smulbb	r3, r3, fp
 800138c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001390:	4279      	negs	r1, r7
 8001392:	920f      	str	r2, [sp, #60]	; 0x3c
 8001394:	b29a      	uxth	r2, r3
 8001396:	b28b      	uxth	r3, r1
 8001398:	9213      	str	r2, [sp, #76]	; 0x4c
 800139a:	9310      	str	r3, [sp, #64]	; 0x40
 800139c:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80013a0:	4682      	mov	sl, r0
 80013a2:	4622      	mov	r2, r4
 80013a4:	f8cd b01c 	str.w	fp, [sp, #28]
 80013a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d061      	beq.n	8001472 <arm_convolve_HWC_q7_fast_nonsquare+0x16e>
 80013ae:	9916      	ldr	r1, [sp, #88]	; 0x58
 80013b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80013b2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80013b4:	fb02 1303 	mla	r3, r2, r3, r1
 80013b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80013ba:	1a1b      	subs	r3, r3, r0
 80013bc:	4251      	negs	r1, r2
 80013be:	9306      	str	r3, [sp, #24]
 80013c0:	b28b      	uxth	r3, r1
 80013c2:	2200      	movs	r2, #0
 80013c4:	9308      	str	r3, [sp, #32]
 80013c6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80013ca:	9209      	str	r2, [sp, #36]	; 0x24
 80013cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80013ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80013d0:	9806      	ldr	r0, [sp, #24]
 80013d2:	4281      	cmp	r1, r0
 80013d4:	da3c      	bge.n	8001450 <arm_convolve_HWC_q7_fast_nonsquare+0x14c>
 80013d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80013da:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80013de:	fb02 0203 	mla	r2, r2, r3, r0
 80013e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013e4:	460e      	mov	r6, r1
 80013e6:	1ad5      	subs	r5, r2, r3
 80013e8:	460a      	mov	r2, r1
 80013ea:	42af      	cmp	r7, r5
 80013ec:	da2a      	bge.n	8001444 <arm_convolve_HWC_q7_fast_nonsquare+0x140>
 80013ee:	2e00      	cmp	r6, #0
 80013f0:	fb08 fb02 	mul.w	fp, r8, r2
 80013f4:	f2c0 82c1 	blt.w	800197a <arm_convolve_HWC_q7_fast_nonsquare+0x676>
 80013f8:	9b05      	ldr	r3, [sp, #20]
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f340 82a5 	ble.w	800194a <arm_convolve_HWC_q7_fast_nonsquare+0x646>
 8001400:	46be      	mov	lr, r7
 8001402:	463c      	mov	r4, r7
 8001404:	e007      	b.n	8001416 <arm_convolve_HWC_q7_fast_nonsquare+0x112>
 8001406:	3401      	adds	r4, #1
 8001408:	b224      	sxth	r4, r4
 800140a:	f007 f9c9 	bl	80087a0 <memset>
 800140e:	42ac      	cmp	r4, r5
 8001410:	44ca      	add	sl, r9
 8001412:	46a6      	mov	lr, r4
 8001414:	da16      	bge.n	8001444 <arm_convolve_HWC_q7_fast_nonsquare+0x140>
 8001416:	2c00      	cmp	r4, #0
 8001418:	4650      	mov	r0, sl
 800141a:	464a      	mov	r2, r9
 800141c:	f04f 0100 	mov.w	r1, #0
 8001420:	dbf1      	blt.n	8001406 <arm_convolve_HWC_q7_fast_nonsquare+0x102>
 8001422:	45f0      	cmp	r8, lr
 8001424:	ddef      	ble.n	8001406 <arm_convolve_HWC_q7_fast_nonsquare+0x102>
 8001426:	9904      	ldr	r1, [sp, #16]
 8001428:	9a07      	ldr	r2, [sp, #28]
 800142a:	eb0b 000e 	add.w	r0, fp, lr
 800142e:	3401      	adds	r4, #1
 8001430:	fb02 1000 	mla	r0, r2, r0, r1
 8001434:	b224      	sxth	r4, r4
 8001436:	4651      	mov	r1, sl
 8001438:	f000 ff06 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 800143c:	42ac      	cmp	r4, r5
 800143e:	44ca      	add	sl, r9
 8001440:	46a6      	mov	lr, r4
 8001442:	dbe8      	blt.n	8001416 <arm_convolve_HWC_q7_fast_nonsquare+0x112>
 8001444:	3601      	adds	r6, #1
 8001446:	9b06      	ldr	r3, [sp, #24]
 8001448:	b236      	sxth	r6, r6
 800144a:	429e      	cmp	r6, r3
 800144c:	4632      	mov	r2, r6
 800144e:	dbcc      	blt.n	80013ea <arm_convolve_HWC_q7_fast_nonsquare+0xe6>
 8001450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001452:	459a      	cmp	sl, r3
 8001454:	f000 82cc 	beq.w	80019f0 <arm_convolve_HWC_q7_fast_nonsquare+0x6ec>
 8001458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800145a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800145c:	3201      	adds	r2, #1
 800145e:	b213      	sxth	r3, r2
 8001460:	9a08      	ldr	r2, [sp, #32]
 8001462:	9309      	str	r3, [sp, #36]	; 0x24
 8001464:	440a      	add	r2, r1
 8001466:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001468:	b292      	uxth	r2, r2
 800146a:	428b      	cmp	r3, r1
 800146c:	9208      	str	r2, [sp, #32]
 800146e:	461a      	mov	r2, r3
 8001470:	dbad      	blt.n	80013ce <arm_convolve_HWC_q7_fast_nonsquare+0xca>
 8001472:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001474:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001476:	3201      	adds	r2, #1
 8001478:	b213      	sxth	r3, r2
 800147a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800147c:	9312      	str	r3, [sp, #72]	; 0x48
 800147e:	440a      	add	r2, r1
 8001480:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001482:	b292      	uxth	r2, r2
 8001484:	428b      	cmp	r3, r1
 8001486:	9210      	str	r2, [sp, #64]	; 0x40
 8001488:	461a      	mov	r2, r3
 800148a:	db8d      	blt.n	80013a8 <arm_convolve_HWC_q7_fast_nonsquare+0xa4>
 800148c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8001490:	9317      	str	r3, [sp, #92]	; 0x5c
 8001492:	4608      	mov	r0, r1
 8001494:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001496:	1a13      	subs	r3, r2, r0
 8001498:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800149a:	931f      	str	r3, [sp, #124]	; 0x7c
 800149c:	4293      	cmp	r3, r2
 800149e:	f340 814f 	ble.w	8001740 <arm_convolve_HWC_q7_fast_nonsquare+0x43c>
 80014a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80014a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80014a8:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 80014ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80014ae:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 80014b2:	0061      	lsls	r1, r4, #1
 80014b4:	fb13 f305 	smulbb	r3, r3, r5
 80014b8:	fb02 f101 	mul.w	r1, r2, r1
 80014bc:	1a1b      	subs	r3, r3, r0
 80014be:	fb12 f204 	smulbb	r2, r2, r4
 80014c2:	fb0b f004 	mul.w	r0, fp, r4
 80014c6:	fb12 f20b 	smulbb	r2, r2, fp
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b292      	uxth	r2, r2
 80014ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80014d0:	0043      	lsls	r3, r0, #1
 80014d2:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 80014d4:	921d      	str	r2, [sp, #116]	; 0x74
 80014d6:	9309      	str	r3, [sp, #36]	; 0x24
 80014d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80014da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80014dc:	9008      	str	r0, [sp, #32]
 80014de:	fb0b f101 	mul.w	r1, fp, r1
 80014e2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80014ec:	9110      	str	r1, [sp, #64]	; 0x40
 80014ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80014f0:	46d3      	mov	fp, sl
 80014f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 82b1 	beq.w	8001a5c <arm_convolve_HWC_q7_fast_nonsquare+0x758>
 80014fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80014fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80014fe:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001500:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8001504:	fb01 0102 	mla	r1, r1, r2, r0
 8001508:	425a      	negs	r2, r3
 800150a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800150c:	1acb      	subs	r3, r1, r3
 800150e:	9306      	str	r3, [sp, #24]
 8001510:	b293      	uxth	r3, r2
 8001512:	2400      	movs	r4, #0
 8001514:	930f      	str	r3, [sp, #60]	; 0x3c
 8001516:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800151a:	940b      	str	r4, [sp, #44]	; 0x2c
 800151c:	9315      	str	r3, [sp, #84]	; 0x54
 800151e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001520:	9906      	ldr	r1, [sp, #24]
 8001522:	428a      	cmp	r2, r1
 8001524:	da3d      	bge.n	80015a2 <arm_convolve_HWC_q7_fast_nonsquare+0x29e>
 8001526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001528:	990d      	ldr	r1, [sp, #52]	; 0x34
 800152a:	fb04 1403 	mla	r4, r4, r3, r1
 800152e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001530:	1ae5      	subs	r5, r4, r3
 8001532:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8001536:	9307      	str	r3, [sp, #28]
 8001538:	4617      	mov	r7, r2
 800153a:	4616      	mov	r6, r2
 800153c:	9a07      	ldr	r2, [sp, #28]
 800153e:	42aa      	cmp	r2, r5
 8001540:	da29      	bge.n	8001596 <arm_convolve_HWC_q7_fast_nonsquare+0x292>
 8001542:	464b      	mov	r3, r9
 8001544:	fb08 f707 	mul.w	r7, r8, r7
 8001548:	46b1      	mov	r9, r6
 800154a:	4696      	mov	lr, r2
 800154c:	4614      	mov	r4, r2
 800154e:	461e      	mov	r6, r3
 8001550:	e007      	b.n	8001562 <arm_convolve_HWC_q7_fast_nonsquare+0x25e>
 8001552:	3401      	adds	r4, #1
 8001554:	b224      	sxth	r4, r4
 8001556:	f007 f923 	bl	80087a0 <memset>
 800155a:	42ac      	cmp	r4, r5
 800155c:	44b3      	add	fp, r6
 800155e:	46a6      	mov	lr, r4
 8001560:	da16      	bge.n	8001590 <arm_convolve_HWC_q7_fast_nonsquare+0x28c>
 8001562:	2c00      	cmp	r4, #0
 8001564:	4632      	mov	r2, r6
 8001566:	f04f 0100 	mov.w	r1, #0
 800156a:	4658      	mov	r0, fp
 800156c:	dbf1      	blt.n	8001552 <arm_convolve_HWC_q7_fast_nonsquare+0x24e>
 800156e:	45f0      	cmp	r8, lr
 8001570:	ddef      	ble.n	8001552 <arm_convolve_HWC_q7_fast_nonsquare+0x24e>
 8001572:	9b04      	ldr	r3, [sp, #16]
 8001574:	eb07 000e 	add.w	r0, r7, lr
 8001578:	3401      	adds	r4, #1
 800157a:	4659      	mov	r1, fp
 800157c:	b224      	sxth	r4, r4
 800157e:	fb0a 3000 	mla	r0, sl, r0, r3
 8001582:	4652      	mov	r2, sl
 8001584:	f000 fe60 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001588:	42ac      	cmp	r4, r5
 800158a:	44b3      	add	fp, r6
 800158c:	46a6      	mov	lr, r4
 800158e:	dbe8      	blt.n	8001562 <arm_convolve_HWC_q7_fast_nonsquare+0x25e>
 8001590:	4633      	mov	r3, r6
 8001592:	464e      	mov	r6, r9
 8001594:	4699      	mov	r9, r3
 8001596:	3601      	adds	r6, #1
 8001598:	9b06      	ldr	r3, [sp, #24]
 800159a:	b236      	sxth	r6, r6
 800159c:	429e      	cmp	r6, r3
 800159e:	4637      	mov	r7, r6
 80015a0:	dbcc      	blt.n	800153c <arm_convolve_HWC_q7_fast_nonsquare+0x238>
 80015a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80015a4:	459b      	cmp	fp, r3
 80015a6:	f000 8211 	beq.w	80019cc <arm_convolve_HWC_q7_fast_nonsquare+0x6c8>
 80015aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80015ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80015ae:	3201      	adds	r2, #1
 80015b0:	b213      	sxth	r3, r2
 80015b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80015b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80015b6:	440a      	add	r2, r1
 80015b8:	b292      	uxth	r2, r2
 80015ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80015bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80015be:	4293      	cmp	r3, r2
 80015c0:	461c      	mov	r4, r3
 80015c2:	dbac      	blt.n	800151e <arm_convolve_HWC_q7_fast_nonsquare+0x21a>
 80015c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80015c6:	42a3      	cmp	r3, r4
 80015c8:	dd3c      	ble.n	8001644 <arm_convolve_HWC_q7_fast_nonsquare+0x340>
 80015ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80015cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80015ce:	9916      	ldr	r1, [sp, #88]	; 0x58
 80015d0:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 80015d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80015d8:	fb02 1503 	mla	r5, r2, r3, r1
 80015dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80015de:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80015e2:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80015e6:	9606      	str	r6, [sp, #24]
 80015e8:	465f      	mov	r7, fp
 80015ea:	46c3      	mov	fp, r8
 80015ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80015f0:	1aed      	subs	r5, r5, r3
 80015f2:	9a06      	ldr	r2, [sp, #24]
 80015f4:	42aa      	cmp	r2, r5
 80015f6:	da15      	bge.n	8001624 <arm_convolve_HWC_q7_fast_nonsquare+0x320>
 80015f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015fa:	4610      	mov	r0, r2
 80015fc:	fb04 f603 	mul.w	r6, r4, r3
 8001600:	4614      	mov	r4, r2
 8001602:	fb0b 6000 	mla	r0, fp, r0, r6
 8001606:	eba0 0009 	sub.w	r0, r0, r9
 800160a:	fb0a 8000 	mla	r0, sl, r0, r8
 800160e:	4639      	mov	r1, r7
 8001610:	9a08      	ldr	r2, [sp, #32]
 8001612:	3401      	adds	r4, #1
 8001614:	f000 fe18 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001618:	b224      	sxth	r4, r4
 800161a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800161c:	42ac      	cmp	r4, r5
 800161e:	441f      	add	r7, r3
 8001620:	4620      	mov	r0, r4
 8001622:	dbee      	blt.n	8001602 <arm_convolve_HWC_q7_fast_nonsquare+0x2fe>
 8001624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001626:	429f      	cmp	r7, r3
 8001628:	f000 81bf 	beq.w	80019aa <arm_convolve_HWC_q7_fast_nonsquare+0x6a6>
 800162c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800162e:	3201      	adds	r2, #1
 8001630:	b213      	sxth	r3, r2
 8001632:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001634:	930b      	str	r3, [sp, #44]	; 0x2c
 8001636:	4293      	cmp	r3, r2
 8001638:	461c      	mov	r4, r3
 800163a:	dbda      	blt.n	80015f2 <arm_convolve_HWC_q7_fast_nonsquare+0x2ee>
 800163c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8001640:	46d8      	mov	r8, fp
 8001642:	46bb      	mov	fp, r7
 8001644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001646:	42a3      	cmp	r3, r4
 8001648:	dd69      	ble.n	800171e <arm_convolve_HWC_q7_fast_nonsquare+0x41a>
 800164a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800164e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8001652:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001654:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001656:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800165a:	fb13 f202 	smulbb	r2, r3, r2
 800165e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001660:	fb01 0103 	mla	r1, r1, r3, r0
 8001664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001666:	1ad2      	subs	r2, r2, r3
 8001668:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800166a:	1acb      	subs	r3, r1, r3
 800166c:	9306      	str	r3, [sp, #24]
 800166e:	b293      	uxth	r3, r2
 8001670:	930f      	str	r3, [sp, #60]	; 0x3c
 8001672:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8001676:	9315      	str	r3, [sp, #84]	; 0x54
 8001678:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800167a:	9906      	ldr	r1, [sp, #24]
 800167c:	428a      	cmp	r2, r1
 800167e:	da3d      	bge.n	80016fc <arm_convolve_HWC_q7_fast_nonsquare+0x3f8>
 8001680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001682:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001684:	fb04 1403 	mla	r4, r4, r3, r1
 8001688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800168a:	1ae5      	subs	r5, r4, r3
 800168c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8001690:	9307      	str	r3, [sp, #28]
 8001692:	4617      	mov	r7, r2
 8001694:	4616      	mov	r6, r2
 8001696:	9a07      	ldr	r2, [sp, #28]
 8001698:	4295      	cmp	r5, r2
 800169a:	dd29      	ble.n	80016f0 <arm_convolve_HWC_q7_fast_nonsquare+0x3ec>
 800169c:	464b      	mov	r3, r9
 800169e:	fb08 f707 	mul.w	r7, r8, r7
 80016a2:	46b1      	mov	r9, r6
 80016a4:	4696      	mov	lr, r2
 80016a6:	4614      	mov	r4, r2
 80016a8:	461e      	mov	r6, r3
 80016aa:	e007      	b.n	80016bc <arm_convolve_HWC_q7_fast_nonsquare+0x3b8>
 80016ac:	3401      	adds	r4, #1
 80016ae:	b224      	sxth	r4, r4
 80016b0:	f007 f876 	bl	80087a0 <memset>
 80016b4:	42ac      	cmp	r4, r5
 80016b6:	44b3      	add	fp, r6
 80016b8:	46a6      	mov	lr, r4
 80016ba:	da16      	bge.n	80016ea <arm_convolve_HWC_q7_fast_nonsquare+0x3e6>
 80016bc:	2c00      	cmp	r4, #0
 80016be:	4632      	mov	r2, r6
 80016c0:	f04f 0100 	mov.w	r1, #0
 80016c4:	4658      	mov	r0, fp
 80016c6:	dbf1      	blt.n	80016ac <arm_convolve_HWC_q7_fast_nonsquare+0x3a8>
 80016c8:	45f0      	cmp	r8, lr
 80016ca:	ddef      	ble.n	80016ac <arm_convolve_HWC_q7_fast_nonsquare+0x3a8>
 80016cc:	9b04      	ldr	r3, [sp, #16]
 80016ce:	eb07 000e 	add.w	r0, r7, lr
 80016d2:	3401      	adds	r4, #1
 80016d4:	4659      	mov	r1, fp
 80016d6:	b224      	sxth	r4, r4
 80016d8:	fb0a 3000 	mla	r0, sl, r0, r3
 80016dc:	4652      	mov	r2, sl
 80016de:	f000 fdb3 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 80016e2:	42ac      	cmp	r4, r5
 80016e4:	44b3      	add	fp, r6
 80016e6:	46a6      	mov	lr, r4
 80016e8:	dbe8      	blt.n	80016bc <arm_convolve_HWC_q7_fast_nonsquare+0x3b8>
 80016ea:	4633      	mov	r3, r6
 80016ec:	464e      	mov	r6, r9
 80016ee:	4699      	mov	r9, r3
 80016f0:	3601      	adds	r6, #1
 80016f2:	9b06      	ldr	r3, [sp, #24]
 80016f4:	b236      	sxth	r6, r6
 80016f6:	429e      	cmp	r6, r3
 80016f8:	4637      	mov	r7, r6
 80016fa:	dbcc      	blt.n	8001696 <arm_convolve_HWC_q7_fast_nonsquare+0x392>
 80016fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80016fe:	459b      	cmp	fp, r3
 8001700:	f000 8188 	beq.w	8001a14 <arm_convolve_HWC_q7_fast_nonsquare+0x710>
 8001704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001706:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001708:	3201      	adds	r2, #1
 800170a:	b213      	sxth	r3, r2
 800170c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800170e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001710:	440a      	add	r2, r1
 8001712:	b292      	uxth	r2, r2
 8001714:	920f      	str	r2, [sp, #60]	; 0x3c
 8001716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001718:	4293      	cmp	r3, r2
 800171a:	461c      	mov	r4, r3
 800171c:	dbac      	blt.n	8001678 <arm_convolve_HWC_q7_fast_nonsquare+0x374>
 800171e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001720:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001722:	3201      	adds	r2, #1
 8001724:	b213      	sxth	r3, r2
 8001726:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001728:	9312      	str	r3, [sp, #72]	; 0x48
 800172a:	440a      	add	r2, r1
 800172c:	b292      	uxth	r2, r2
 800172e:	921b      	str	r2, [sp, #108]	; 0x6c
 8001730:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8001732:	9317      	str	r3, [sp, #92]	; 0x5c
 8001734:	4293      	cmp	r3, r2
 8001736:	f6ff aedc 	blt.w	80014f2 <arm_convolve_HWC_q7_fast_nonsquare+0x1ee>
 800173a:	46da      	mov	sl, fp
 800173c:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 8001740:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001742:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001744:	461a      	mov	r2, r3
 8001746:	4282      	cmp	r2, r0
 8001748:	f340 8094 	ble.w	8001874 <arm_convolve_HWC_q7_fast_nonsquare+0x570>
 800174c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800174e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001750:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8001754:	f8cd b01c 	str.w	fp, [sp, #28]
 8001758:	0059      	lsls	r1, r3, #1
 800175a:	fb02 f101 	mul.w	r1, r2, r1
 800175e:	fb12 f203 	smulbb	r2, r2, r3
 8001762:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8001766:	fb13 f304 	smulbb	r3, r3, r4
 800176a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800176c:	1b1b      	subs	r3, r3, r4
 800176e:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8001770:	fb0b f101 	mul.w	r1, fp, r1
 8001774:	fb12 f20b 	smulbb	r2, r2, fp
 8001778:	b292      	uxth	r2, r2
 800177a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800177e:	b29b      	uxth	r3, r3
 8001780:	9213      	str	r2, [sp, #76]	; 0x4c
 8001782:	910b      	str	r1, [sp, #44]	; 0x2c
 8001784:	9310      	str	r3, [sp, #64]	; 0x40
 8001786:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800178a:	4602      	mov	r2, r0
 800178c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800178e:	2b00      	cmp	r3, #0
 8001790:	d061      	beq.n	8001856 <arm_convolve_HWC_q7_fast_nonsquare+0x552>
 8001792:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001794:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001796:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001798:	fb02 1303 	mla	r3, r2, r3, r1
 800179c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800179e:	1a1b      	subs	r3, r3, r0
 80017a0:	4251      	negs	r1, r2
 80017a2:	9306      	str	r3, [sp, #24]
 80017a4:	b28b      	uxth	r3, r1
 80017a6:	2200      	movs	r2, #0
 80017a8:	9308      	str	r3, [sp, #32]
 80017aa:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80017ae:	9209      	str	r2, [sp, #36]	; 0x24
 80017b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80017b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80017b4:	9806      	ldr	r0, [sp, #24]
 80017b6:	4281      	cmp	r1, r0
 80017b8:	da3c      	bge.n	8001834 <arm_convolve_HWC_q7_fast_nonsquare+0x530>
 80017ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80017be:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80017c2:	fb02 0203 	mla	r2, r2, r3, r0
 80017c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017c8:	460e      	mov	r6, r1
 80017ca:	1ad5      	subs	r5, r2, r3
 80017cc:	460a      	mov	r2, r1
 80017ce:	42bd      	cmp	r5, r7
 80017d0:	dd2a      	ble.n	8001828 <arm_convolve_HWC_q7_fast_nonsquare+0x524>
 80017d2:	2e00      	cmp	r6, #0
 80017d4:	fb08 fb02 	mul.w	fp, r8, r2
 80017d8:	f2c0 80db 	blt.w	8001992 <arm_convolve_HWC_q7_fast_nonsquare+0x68e>
 80017dc:	9b05      	ldr	r3, [sp, #20]
 80017de:	4293      	cmp	r3, r2
 80017e0:	f340 80bf 	ble.w	8001962 <arm_convolve_HWC_q7_fast_nonsquare+0x65e>
 80017e4:	46be      	mov	lr, r7
 80017e6:	463c      	mov	r4, r7
 80017e8:	e007      	b.n	80017fa <arm_convolve_HWC_q7_fast_nonsquare+0x4f6>
 80017ea:	3401      	adds	r4, #1
 80017ec:	b224      	sxth	r4, r4
 80017ee:	f006 ffd7 	bl	80087a0 <memset>
 80017f2:	42ac      	cmp	r4, r5
 80017f4:	44ca      	add	sl, r9
 80017f6:	46a6      	mov	lr, r4
 80017f8:	da16      	bge.n	8001828 <arm_convolve_HWC_q7_fast_nonsquare+0x524>
 80017fa:	2c00      	cmp	r4, #0
 80017fc:	4650      	mov	r0, sl
 80017fe:	464a      	mov	r2, r9
 8001800:	f04f 0100 	mov.w	r1, #0
 8001804:	dbf1      	blt.n	80017ea <arm_convolve_HWC_q7_fast_nonsquare+0x4e6>
 8001806:	45f0      	cmp	r8, lr
 8001808:	ddef      	ble.n	80017ea <arm_convolve_HWC_q7_fast_nonsquare+0x4e6>
 800180a:	9904      	ldr	r1, [sp, #16]
 800180c:	9a07      	ldr	r2, [sp, #28]
 800180e:	eb0b 000e 	add.w	r0, fp, lr
 8001812:	3401      	adds	r4, #1
 8001814:	fb02 1000 	mla	r0, r2, r0, r1
 8001818:	b224      	sxth	r4, r4
 800181a:	4651      	mov	r1, sl
 800181c:	f000 fd14 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001820:	42ac      	cmp	r4, r5
 8001822:	44ca      	add	sl, r9
 8001824:	46a6      	mov	lr, r4
 8001826:	dbe8      	blt.n	80017fa <arm_convolve_HWC_q7_fast_nonsquare+0x4f6>
 8001828:	3601      	adds	r6, #1
 800182a:	9b06      	ldr	r3, [sp, #24]
 800182c:	b236      	sxth	r6, r6
 800182e:	429e      	cmp	r6, r3
 8001830:	4632      	mov	r2, r6
 8001832:	dbcc      	blt.n	80017ce <arm_convolve_HWC_q7_fast_nonsquare+0x4ca>
 8001834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001836:	459a      	cmp	sl, r3
 8001838:	f000 80fe 	beq.w	8001a38 <arm_convolve_HWC_q7_fast_nonsquare+0x734>
 800183c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800183e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001840:	3201      	adds	r2, #1
 8001842:	b213      	sxth	r3, r2
 8001844:	9a08      	ldr	r2, [sp, #32]
 8001846:	9309      	str	r3, [sp, #36]	; 0x24
 8001848:	440a      	add	r2, r1
 800184a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800184c:	b292      	uxth	r2, r2
 800184e:	428b      	cmp	r3, r1
 8001850:	9208      	str	r2, [sp, #32]
 8001852:	461a      	mov	r2, r3
 8001854:	dbad      	blt.n	80017b2 <arm_convolve_HWC_q7_fast_nonsquare+0x4ae>
 8001856:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001858:	9911      	ldr	r1, [sp, #68]	; 0x44
 800185a:	3201      	adds	r2, #1
 800185c:	b213      	sxth	r3, r2
 800185e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001860:	9312      	str	r3, [sp, #72]	; 0x48
 8001862:	440a      	add	r2, r1
 8001864:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001866:	b292      	uxth	r2, r2
 8001868:	428b      	cmp	r3, r1
 800186a:	9210      	str	r2, [sp, #64]	; 0x40
 800186c:	461a      	mov	r2, r3
 800186e:	db8d      	blt.n	800178c <arm_convolve_HWC_q7_fast_nonsquare+0x488>
 8001870:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8001874:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001876:	4553      	cmp	r3, sl
 8001878:	d063      	beq.n	8001942 <arm_convolve_HWC_q7_fast_nonsquare+0x63e>
 800187a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800187c:	2900      	cmp	r1, #0
 800187e:	d060      	beq.n	8001942 <arm_convolve_HWC_q7_fast_nonsquare+0x63e>
 8001880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001882:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001884:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001886:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 800188a:	fb02 f50b 	mul.w	r5, r2, fp
 800188e:	fb03 f505 	mul.w	r5, r3, r5
 8001892:	fb13 f602 	smulbb	r6, r3, r2
 8001896:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800189a:	4688      	mov	r8, r1
 800189c:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800189e:	9505      	str	r5, [sp, #20]
 80018a0:	fb16 f60b 	smulbb	r6, r6, fp
 80018a4:	1e6b      	subs	r3, r5, #1
 80018a6:	2201      	movs	r2, #1
 80018a8:	4488      	add	r8, r1
 80018aa:	f006 0603 	and.w	r6, r6, #3
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80018b2:	4413      	add	r3, r2
 80018b4:	f106 3cff 	add.w	ip, r6, #4294967295
 80018b8:	4082      	lsls	r2, r0
 80018ba:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80018bc:	fa1f fc8c 	uxth.w	ip, ip
 80018c0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80018c4:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 80018c8:	0853      	lsrs	r3, r2, #1
 80018ca:	1e47      	subs	r7, r0, #1
 80018cc:	f10c 0b01 	add.w	fp, ip, #1
 80018d0:	9304      	str	r3, [sp, #16]
 80018d2:	4645      	mov	r5, r8
 80018d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80018d6:	f917 3f01 	ldrsb.w	r3, [r7, #1]!
 80018da:	4093      	lsls	r3, r2
 80018dc:	9a04      	ldr	r2, [sp, #16]
 80018de:	4413      	add	r3, r2
 80018e0:	9a05      	ldr	r2, [sp, #20]
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	f000 80bd 	beq.w	8001a62 <arm_convolve_HWC_q7_fast_nonsquare+0x75e>
 80018e8:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 80018ea:	eb0e 0809 	add.w	r8, lr, r9
 80018ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80018f2:	6820      	ldr	r0, [r4, #0]
 80018f4:	fa2f f182 	sxtb16	r1, r2
 80018f8:	ea4f 2232 	mov.w	r2, r2, ror #8
 80018fc:	fa2f f282 	sxtb16	r2, r2
 8001900:	fb21 3300 	smlad	r3, r1, r0, r3
 8001904:	6861      	ldr	r1, [r4, #4]
 8001906:	3408      	adds	r4, #8
 8001908:	fb22 3301 	smlad	r3, r2, r1, r3
 800190c:	45c6      	cmp	lr, r8
 800190e:	d1ee      	bne.n	80018ee <arm_convolve_HWC_q7_fast_nonsquare+0x5ea>
 8001910:	4651      	mov	r1, sl
 8001912:	b166      	cbz	r6, 800192e <arm_convolve_HWC_q7_fast_nonsquare+0x62a>
 8001914:	f10e 32ff 	add.w	r2, lr, #4294967295
 8001918:	eb0e 080c 	add.w	r8, lr, ip
 800191c:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 8001920:	f831 4b02 	ldrh.w	r4, [r1], #2
 8001924:	4542      	cmp	r2, r8
 8001926:	fb14 3300 	smlabb	r3, r4, r0, r3
 800192a:	d1f7      	bne.n	800191c <arm_convolve_HWC_q7_fast_nonsquare+0x618>
 800192c:	44de      	add	lr, fp
 800192e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8001930:	4113      	asrs	r3, r2
 8001932:	f303 0307 	ssat	r3, #8, r3
 8001936:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8001938:	f802 3b01 	strb.w	r3, [r2], #1
 800193c:	42aa      	cmp	r2, r5
 800193e:	9235      	str	r2, [sp, #212]	; 0xd4
 8001940:	d1c8      	bne.n	80018d4 <arm_convolve_HWC_q7_fast_nonsquare+0x5d0>
 8001942:	2000      	movs	r0, #0
 8001944:	b021      	add	sp, #132	; 0x84
 8001946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800194a:	463c      	mov	r4, r7
 800194c:	3401      	adds	r4, #1
 800194e:	4650      	mov	r0, sl
 8001950:	464a      	mov	r2, r9
 8001952:	2100      	movs	r1, #0
 8001954:	b224      	sxth	r4, r4
 8001956:	f006 ff23 	bl	80087a0 <memset>
 800195a:	42ac      	cmp	r4, r5
 800195c:	44ca      	add	sl, r9
 800195e:	dbf5      	blt.n	800194c <arm_convolve_HWC_q7_fast_nonsquare+0x648>
 8001960:	e570      	b.n	8001444 <arm_convolve_HWC_q7_fast_nonsquare+0x140>
 8001962:	463c      	mov	r4, r7
 8001964:	3401      	adds	r4, #1
 8001966:	4650      	mov	r0, sl
 8001968:	464a      	mov	r2, r9
 800196a:	2100      	movs	r1, #0
 800196c:	b224      	sxth	r4, r4
 800196e:	f006 ff17 	bl	80087a0 <memset>
 8001972:	42a5      	cmp	r5, r4
 8001974:	44ca      	add	sl, r9
 8001976:	dcf5      	bgt.n	8001964 <arm_convolve_HWC_q7_fast_nonsquare+0x660>
 8001978:	e756      	b.n	8001828 <arm_convolve_HWC_q7_fast_nonsquare+0x524>
 800197a:	463c      	mov	r4, r7
 800197c:	3401      	adds	r4, #1
 800197e:	4650      	mov	r0, sl
 8001980:	464a      	mov	r2, r9
 8001982:	2100      	movs	r1, #0
 8001984:	b224      	sxth	r4, r4
 8001986:	f006 ff0b 	bl	80087a0 <memset>
 800198a:	42ac      	cmp	r4, r5
 800198c:	44ca      	add	sl, r9
 800198e:	dbf5      	blt.n	800197c <arm_convolve_HWC_q7_fast_nonsquare+0x678>
 8001990:	e558      	b.n	8001444 <arm_convolve_HWC_q7_fast_nonsquare+0x140>
 8001992:	463c      	mov	r4, r7
 8001994:	3401      	adds	r4, #1
 8001996:	4650      	mov	r0, sl
 8001998:	464a      	mov	r2, r9
 800199a:	2100      	movs	r1, #0
 800199c:	b224      	sxth	r4, r4
 800199e:	f006 feff 	bl	80087a0 <memset>
 80019a2:	42ac      	cmp	r4, r5
 80019a4:	44ca      	add	sl, r9
 80019a6:	dbf5      	blt.n	8001994 <arm_convolve_HWC_q7_fast_nonsquare+0x690>
 80019a8:	e73e      	b.n	8001828 <arm_convolve_HWC_q7_fast_nonsquare+0x524>
 80019aa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80019ac:	9303      	str	r3, [sp, #12]
 80019ae:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80019bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80019be:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80019c0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80019c2:	f000 f9e5 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80019c6:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 80019c8:	9035      	str	r0, [sp, #212]	; 0xd4
 80019ca:	e62f      	b.n	800162c <arm_convolve_HWC_q7_fast_nonsquare+0x328>
 80019cc:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80019ce:	9303      	str	r3, [sp, #12]
 80019d0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80019de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80019e0:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80019e2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80019e4:	f000 f9d4 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80019e8:	f8dd b0e0 	ldr.w	fp, [sp, #224]	; 0xe0
 80019ec:	9035      	str	r0, [sp, #212]	; 0xd4
 80019ee:	e5dc      	b.n	80015aa <arm_convolve_HWC_q7_fast_nonsquare+0x2a6>
 80019f0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80019f2:	9303      	str	r3, [sp, #12]
 80019f4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001a02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001a04:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8001a06:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001a08:	f000 f9c2 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001a0c:	f8dd a0e0 	ldr.w	sl, [sp, #224]	; 0xe0
 8001a10:	9035      	str	r0, [sp, #212]	; 0xd4
 8001a12:	e521      	b.n	8001458 <arm_convolve_HWC_q7_fast_nonsquare+0x154>
 8001a14:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8001a16:	9303      	str	r3, [sp, #12]
 8001a18:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001a26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001a28:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8001a2a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001a2c:	f000 f9b0 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001a30:	f8dd b0e0 	ldr.w	fp, [sp, #224]	; 0xe0
 8001a34:	9035      	str	r0, [sp, #212]	; 0xd4
 8001a36:	e665      	b.n	8001704 <arm_convolve_HWC_q7_fast_nonsquare+0x400>
 8001a38:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8001a3a:	9303      	str	r3, [sp, #12]
 8001a3c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8001a3e:	9302      	str	r3, [sp, #8]
 8001a40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001a4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001a4c:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8001a4e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001a50:	f000 f99e 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001a54:	f8dd a0e0 	ldr.w	sl, [sp, #224]	; 0xe0
 8001a58:	9035      	str	r0, [sp, #212]	; 0xd4
 8001a5a:	e6ef      	b.n	800183c <arm_convolve_HWC_q7_fast_nonsquare+0x538>
 8001a5c:	461c      	mov	r4, r3
 8001a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a60:	e5b0      	b.n	80015c4 <arm_convolve_HWC_q7_fast_nonsquare+0x2c0>
 8001a62:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8001a64:	e755      	b.n	8001912 <arm_convolve_HWC_q7_fast_nonsquare+0x60e>
 8001a66:	f06f 0002 	mvn.w	r0, #2
 8001a6a:	b021      	add	sp, #132	; 0x84
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a70:	9717      	str	r7, [sp, #92]	; 0x5c
 8001a72:	f8dd a0e0 	ldr.w	sl, [sp, #224]	; 0xe0
 8001a76:	9712      	str	r7, [sp, #72]	; 0x48
 8001a78:	4638      	mov	r0, r7
 8001a7a:	e50b      	b.n	8001494 <arm_convolve_HWC_q7_fast_nonsquare+0x190>

08001a7c <arm_nn_mat_mult_kernel_q7_q15>:
 8001a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a80:	b099      	sub	sp, #100	; 0x64
 8001a82:	4683      	mov	fp, r0
 8001a84:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 8001a88:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8001a8a:	940b      	str	r4, [sp, #44]	; 0x2c
 8001a8c:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8001a90:	9109      	str	r1, [sp, #36]	; 0x24
 8001a92:	18b0      	adds	r0, r6, r2
 8001a94:	468e      	mov	lr, r1
 8001a96:	9305      	str	r3, [sp, #20]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	0853      	lsrs	r3, r2, #1
 8001a9c:	4625      	mov	r5, r4
 8001a9e:	940a      	str	r4, [sp, #40]	; 0x28
 8001aa0:	9216      	str	r2, [sp, #88]	; 0x58
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	9015      	str	r0, [sp, #84]	; 0x54
 8001aa6:	f000 80e9 	beq.w	8001c7c <arm_nn_mat_mult_kernel_q7_q15+0x200>
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	0888      	lsrs	r0, r1, #2
 8001ab0:	461f      	mov	r7, r3
 8001ab2:	9317      	str	r3, [sp, #92]	; 0x5c
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f001 0203 	and.w	r2, r1, #3
 8001aba:	900d      	str	r0, [sp, #52]	; 0x34
 8001abc:	40ab      	lsls	r3, r5
 8001abe:	3801      	subs	r0, #1
 8001ac0:	eb0e 0141 	add.w	r1, lr, r1, lsl #1
 8001ac4:	1e54      	subs	r4, r2, #1
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	b280      	uxth	r0, r0
 8001aca:	3001      	adds	r0, #1
 8001acc:	b2a4      	uxth	r4, r4
 8001ace:	920e      	str	r2, [sp, #56]	; 0x38
 8001ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001ad6:	9110      	str	r1, [sp, #64]	; 0x40
 8001ad8:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8001adc:	4639      	mov	r1, r7
 8001ade:	9413      	str	r4, [sp, #76]	; 0x4c
 8001ae0:	4627      	mov	r7, r4
 8001ae2:	0084      	lsls	r4, r0, #2
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4672      	mov	r2, lr
 8001ae8:	4462      	add	r2, ip
 8001aea:	3302      	adds	r3, #2
 8001aec:	9211      	str	r2, [sp, #68]	; 0x44
 8001aee:	9304      	str	r3, [sp, #16]
 8001af0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001af2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001af4:	9408      	str	r4, [sp, #32]
 8001af6:	3102      	adds	r1, #2
 8001af8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001afc:	3302      	adds	r3, #2
 8001afe:	4460      	add	r0, ip
 8001b00:	920f      	str	r2, [sp, #60]	; 0x3c
 8001b02:	9307      	str	r3, [sp, #28]
 8001b04:	1c7a      	adds	r2, r7, #1
 8001b06:	1cb3      	adds	r3, r6, #2
 8001b08:	9012      	str	r0, [sp, #72]	; 0x48
 8001b0a:	9214      	str	r2, [sp, #80]	; 0x50
 8001b0c:	9306      	str	r3, [sp, #24]
 8001b0e:	9a04      	ldr	r2, [sp, #16]
 8001b10:	9b05      	ldr	r3, [sp, #20]
 8001b12:	f912 cc02 	ldrsb.w	ip, [r2, #-2]
 8001b16:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 8001b1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001b20:	4090      	lsls	r0, r2
 8001b22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b24:	445b      	add	r3, fp
 8001b26:	4494      	add	ip, r2
 8001b28:	4410      	add	r0, r2
 8001b2a:	9303      	str	r3, [sp, #12]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8122 	beq.w	8001d7a <arm_nn_mat_mult_kernel_q7_q15+0x2fe>
 8001b36:	9b08      	ldr	r3, [sp, #32]
 8001b38:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8001b3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	445b      	add	r3, fp
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	4665      	mov	r5, ip
 8001b48:	4603      	mov	r3, r0
 8001b4a:	9901      	ldr	r1, [sp, #4]
 8001b4c:	f85b 2b04 	ldr.w	r2, [fp], #4
 8001b50:	f851 4b04 	ldr.w	r4, [r1], #4
 8001b54:	9101      	str	r1, [sp, #4]
 8001b56:	fa2f f182 	sxtb16	r1, r2
 8001b5a:	ea4f 2232 	mov.w	r2, r2, ror #8
 8001b5e:	fa2f f282 	sxtb16	r2, r2
 8001b62:	0c17      	lsrs	r7, r2, #16
 8001b64:	ea4f 2e34 	mov.w	lr, r4, ror #8
 8001b68:	043f      	lsls	r7, r7, #16
 8001b6a:	fa2f fe8e 	sxtb16	lr, lr
 8001b6e:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8001b72:	fa1f f881 	uxth.w	r8, r1
 8001b76:	fa2f f484 	sxtb16	r4, r4
 8001b7a:	0436      	lsls	r6, r6, #16
 8001b7c:	ea47 4711 	orr.w	r7, r7, r1, lsr #16
 8001b80:	b2a1      	uxth	r1, r4
 8001b82:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001b86:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 8001b8a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8001b8e:	f8d9 6000 	ldr.w	r6, [r9]
 8001b92:	f8da e000 	ldr.w	lr, [sl]
 8001b96:	fb22 cc06 	smlad	ip, r2, r6, ip
 8001b9a:	fb22 520e 	smlad	r2, r2, lr, r5
 8001b9e:	fb21 0006 	smlad	r0, r1, r6, r0
 8001ba2:	fb21 310e 	smlad	r1, r1, lr, r3
 8001ba6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001baa:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001bae:	f109 0908 	add.w	r9, r9, #8
 8001bb2:	f10a 0a08 	add.w	sl, sl, #8
 8001bb6:	fb27 cc06 	smlad	ip, r7, r6, ip
 8001bba:	fb27 2503 	smlad	r5, r7, r3, r2
 8001bbe:	fb24 0006 	smlad	r0, r4, r6, r0
 8001bc2:	fb24 1303 	smlad	r3, r4, r3, r1
 8001bc6:	9a02      	ldr	r2, [sp, #8]
 8001bc8:	455a      	cmp	r2, fp
 8001bca:	d1be      	bne.n	8001b4a <arm_nn_mat_mult_kernel_q7_q15+0xce>
 8001bcc:	9a03      	ldr	r2, [sp, #12]
 8001bce:	9908      	ldr	r1, [sp, #32]
 8001bd0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8001bd4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8001bd8:	440a      	add	r2, r1
 8001bda:	9203      	str	r2, [sp, #12]
 8001bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001bde:	b1d2      	cbz	r2, 8001c16 <arm_nn_mat_mult_kernel_q7_q15+0x19a>
 8001be0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001be2:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8001be6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8001bea:	eb0b 0901 	add.w	r9, fp, r1
 8001bee:	f912 7f01 	ldrsb.w	r7, [r2, #1]!
 8001bf2:	f93e 6b02 	ldrsh.w	r6, [lr], #2
 8001bf6:	f938 4b02 	ldrsh.w	r4, [r8], #2
 8001bfa:	f91a 1b01 	ldrsb.w	r1, [sl], #1
 8001bfe:	4591      	cmp	r9, r2
 8001c00:	fb16 cc07 	smlabb	ip, r6, r7, ip
 8001c04:	fb14 5507 	smlabb	r5, r4, r7, r5
 8001c08:	fb16 0001 	smlabb	r0, r6, r1, r0
 8001c0c:	fb14 3301 	smlabb	r3, r4, r1, r3
 8001c10:	d1ed      	bne.n	8001bee <arm_nn_mat_mult_kernel_q7_q15+0x172>
 8001c12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001c14:	4493      	add	fp, r2
 8001c16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001c18:	fa4c fc01 	asr.w	ip, ip, r1
 8001c1c:	f30c 0c07 	ssat	ip, #8, ip
 8001c20:	9c07      	ldr	r4, [sp, #28]
 8001c22:	460a      	mov	r2, r1
 8001c24:	f804 cc02 	strb.w	ip, [r4, #-2]
 8001c28:	4108      	asrs	r0, r1
 8001c2a:	f300 0007 	ssat	r0, #8, r0
 8001c2e:	f804 0c01 	strb.w	r0, [r4, #-1]
 8001c32:	4115      	asrs	r5, r2
 8001c34:	f305 0507 	ssat	r5, #8, r5
 8001c38:	9806      	ldr	r0, [sp, #24]
 8001c3a:	4113      	asrs	r3, r2
 8001c3c:	f800 5c02 	strb.w	r5, [r0, #-2]
 8001c40:	f303 0307 	ssat	r3, #8, r3
 8001c44:	f800 3c01 	strb.w	r3, [r0, #-1]
 8001c48:	9b05      	ldr	r3, [sp, #20]
 8001c4a:	9a04      	ldr	r2, [sp, #16]
 8001c4c:	449b      	add	fp, r3
 8001c4e:	1ca3      	adds	r3, r4, #2
 8001c50:	9307      	str	r3, [sp, #28]
 8001c52:	1c83      	adds	r3, r0, #2
 8001c54:	3202      	adds	r2, #2
 8001c56:	9306      	str	r3, [sp, #24]
 8001c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001c5a:	9204      	str	r2, [sp, #16]
 8001c5c:	4615      	mov	r5, r2
 8001c5e:	429d      	cmp	r5, r3
 8001c60:	f47f af55 	bne.w	8001b0e <arm_nn_mat_mult_kernel_q7_q15+0x92>
 8001c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001c68:	3301      	adds	r3, #1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	441a      	add	r2, r3
 8001c6e:	9224      	str	r2, [sp, #144]	; 0x90
 8001c70:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001c72:	441a      	add	r2, r3
 8001c74:	9225      	str	r2, [sp, #148]	; 0x94
 8001c76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001c78:	441a      	add	r2, r3
 8001c7a:	9215      	str	r2, [sp, #84]	; 0x54
 8001c7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001c7e:	07da      	lsls	r2, r3, #31
 8001c80:	d575      	bpl.n	8001d6e <arm_nn_mat_mult_kernel_q7_q15+0x2f2>
 8001c82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001c86:	f993 0000 	ldrsb.w	r0, [r3]
 8001c8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001c8c:	4090      	lsls	r0, r2
 8001c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c90:	2301      	movs	r3, #1
 8001c92:	4093      	lsls	r3, r2
 8001c94:	9a05      	ldr	r2, [sp, #20]
 8001c96:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c9a:	0893      	lsrs	r3, r2, #2
 8001c9c:	eb06 0842 	add.w	r8, r6, r2, lsl #1
 8001ca0:	d072      	beq.n	8001d88 <arm_nn_mat_mult_kernel_q7_q15+0x30c>
 8001ca2:	f103 39ff 	add.w	r9, r3, #4294967295
 8001ca6:	fa1f f989 	uxth.w	r9, r9
 8001caa:	f109 0901 	add.w	r9, r9, #1
 8001cae:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8001d8c <arm_nn_mat_mult_kernel_q7_q15+0x310>
 8001cb2:	eb0b 0e89 	add.w	lr, fp, r9, lsl #2
 8001cb6:	4647      	mov	r7, r8
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f85b 3b04 	ldr.w	r3, [fp], #4
 8001cbe:	fa2f f483 	sxtb16	r4, r3
 8001cc2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001cc6:	b2a1      	uxth	r1, r4
 8001cc8:	fa2f f383 	sxtb16	r3, r3
 8001ccc:	ea03 050c 	and.w	r5, r3, ip
 8001cd0:	ea45 4414 	orr.w	r4, r5, r4, lsr #16
 8001cd4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001cd8:	6831      	ldr	r1, [r6, #0]
 8001cda:	fb23 0001 	smlad	r0, r3, r1, r0
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	fb23 2301 	smlad	r3, r3, r1, r2
 8001ce4:	6871      	ldr	r1, [r6, #4]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	3608      	adds	r6, #8
 8001cea:	3708      	adds	r7, #8
 8001cec:	fb24 0001 	smlad	r0, r4, r1, r0
 8001cf0:	fb24 3202 	smlad	r2, r4, r2, r3
 8001cf4:	45de      	cmp	lr, fp
 8001cf6:	d1e0      	bne.n	8001cba <arm_nn_mat_mult_kernel_q7_q15+0x23e>
 8001cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cfa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001cfe:	444b      	add	r3, r9
 8001d00:	44c8      	add	r8, r9
 8001d02:	9309      	str	r3, [sp, #36]	; 0x24
 8001d04:	9b05      	ldr	r3, [sp, #20]
 8001d06:	f013 0303 	ands.w	r3, r3, #3
 8001d0a:	d01f      	beq.n	8001d4c <arm_nn_mat_mult_kernel_q7_q15+0x2d0>
 8001d0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001d0e:	f99b 1000 	ldrsb.w	r1, [fp]
 8001d12:	8835      	ldrh	r5, [r6, #0]
 8001d14:	f8b8 4000 	ldrh.w	r4, [r8]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	fb15 0001 	smlabb	r0, r5, r1, r0
 8001d1e:	fb14 2201 	smlabb	r2, r4, r1, r2
 8001d22:	d013      	beq.n	8001d4c <arm_nn_mat_mult_kernel_q7_q15+0x2d0>
 8001d24:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 8001d28:	8875      	ldrh	r5, [r6, #2]
 8001d2a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	fb15 0001 	smlabb	r0, r5, r1, r0
 8001d34:	fb14 2201 	smlabb	r2, r4, r1, r2
 8001d38:	d008      	beq.n	8001d4c <arm_nn_mat_mult_kernel_q7_q15+0x2d0>
 8001d3a:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 8001d3e:	88b4      	ldrh	r4, [r6, #4]
 8001d40:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8001d44:	fb14 0003 	smlabb	r0, r4, r3, r0
 8001d48:	fb11 2203 	smlabb	r2, r1, r3, r2
 8001d4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001d4e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001d50:	fa40 f304 	asr.w	r3, r0, r4
 8001d54:	3101      	adds	r1, #1
 8001d56:	f303 0307 	ssat	r3, #8, r3
 8001d5a:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001d5c:	7003      	strb	r3, [r0, #0]
 8001d5e:	fa42 f304 	asr.w	r3, r2, r4
 8001d62:	f303 0307 	ssat	r3, #8, r3
 8001d66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001d68:	9125      	str	r1, [sp, #148]	; 0x94
 8001d6a:	7013      	strb	r3, [r2, #0]
 8001d6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001d6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001d70:	4413      	add	r3, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	b019      	add	sp, #100	; 0x64
 8001d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d7a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8001d7e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8001d82:	4603      	mov	r3, r0
 8001d84:	4665      	mov	r5, ip
 8001d86:	e729      	b.n	8001bdc <arm_nn_mat_mult_kernel_q7_q15+0x160>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	e7bb      	b.n	8001d04 <arm_nn_mat_mult_kernel_q7_q15+0x288>
 8001d8c:	ffff0000 	.word	0xffff0000

08001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
 8001d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d94:	b097      	sub	sp, #92	; 0x5c
 8001d96:	4683      	mov	fp, r0
 8001d98:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 8001d9c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001d9e:	940d      	str	r4, [sp, #52]	; 0x34
 8001da0:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 8001da4:	940e      	str	r4, [sp, #56]	; 0x38
 8001da6:	9215      	str	r2, [sp, #84]	; 0x54
 8001da8:	9108      	str	r1, [sp, #32]
 8001daa:	9305      	str	r3, [sp, #20]
 8001dac:	4410      	add	r0, r2
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	f000 80d0 	beq.w	8001f54 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1c4>
 8001db4:	4627      	mov	r7, r4
 8001db6:	089c      	lsrs	r4, r3, #2
 8001db8:	468e      	mov	lr, r1
 8001dba:	461e      	mov	r6, r3
 8001dbc:	1e61      	subs	r1, r4, #1
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	940b      	str	r4, [sp, #44]	; 0x2c
 8001dc4:	1e54      	subs	r4, r2, #1
 8001dc6:	f04f 0c01 	mov.w	ip, #1
 8001dca:	1e5d      	subs	r5, r3, #1
 8001dcc:	b289      	uxth	r1, r1
 8001dce:	930c      	str	r3, [sp, #48]	; 0x30
 8001dd0:	f024 0401 	bic.w	r4, r4, #1
 8001dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	3101      	adds	r1, #1
 8001dda:	3402      	adds	r4, #2
 8001ddc:	3002      	adds	r0, #2
 8001dde:	fa0c f307 	lsl.w	r3, ip, r7
 8001de2:	00ca      	lsls	r2, r1, #3
 8001de4:	eb0e 0646 	add.w	r6, lr, r6, lsl #1
 8001de8:	fa23 f30c 	lsr.w	r3, r3, ip
 8001dec:	9414      	str	r4, [sp, #80]	; 0x50
 8001dee:	9003      	str	r0, [sp, #12]
 8001df0:	0088      	lsls	r0, r1, #2
 8001df2:	4671      	mov	r1, lr
 8001df4:	4411      	add	r1, r2
 8001df6:	9006      	str	r0, [sp, #24]
 8001df8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8001dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8001dfc:	18b0      	adds	r0, r6, r2
 8001dfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001e00:	9a02      	ldr	r2, [sp, #8]
 8001e02:	9110      	str	r1, [sp, #64]	; 0x40
 8001e04:	b2ad      	uxth	r5, r5
 8001e06:	eb05 010c 	add.w	r1, r5, ip
 8001e0a:	4422      	add	r2, r4
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	960f      	str	r6, [sp, #60]	; 0x3c
 8001e10:	9512      	str	r5, [sp, #72]	; 0x48
 8001e12:	9011      	str	r0, [sp, #68]	; 0x44
 8001e14:	9113      	str	r1, [sp, #76]	; 0x4c
 8001e16:	9209      	str	r2, [sp, #36]	; 0x24
 8001e18:	9304      	str	r3, [sp, #16]
 8001e1a:	9a02      	ldr	r2, [sp, #8]
 8001e1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e1e:	f992 6000 	ldrsb.w	r6, [r2]
 8001e22:	f992 3001 	ldrsb.w	r3, [r2, #1]
 8001e26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001e28:	4096      	lsls	r6, r2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	9a05      	ldr	r2, [sp, #20]
 8001e2e:	eb0b 0a02 	add.w	sl, fp, r2
 8001e32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001e34:	440e      	add	r6, r1
 8001e36:	440b      	add	r3, r1
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	f000 808e 	beq.w	8001f5a <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1ca>
 8001e3e:	9a06      	ldr	r2, [sp, #24]
 8001e40:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8001e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e48:	f8cd a01c 	str.w	sl, [sp, #28]
 8001e4c:	445a      	add	r2, fp
 8001e4e:	9201      	str	r2, [sp, #4]
 8001e50:	4637      	mov	r7, r6
 8001e52:	461a      	mov	r2, r3
 8001e54:	f85b 1b04 	ldr.w	r1, [fp], #4
 8001e58:	f85a 0b04 	ldr.w	r0, [sl], #4
 8001e5c:	fa2f fc81 	sxtb16	ip, r1
 8001e60:	ea4f 2430 	mov.w	r4, r0, ror #8
 8001e64:	ea4f 2131 	mov.w	r1, r1, ror #8
 8001e68:	fa2f f484 	sxtb16	r4, r4
 8001e6c:	fa2f f181 	sxtb16	r1, r1
 8001e70:	fa2f f080 	sxtb16	r0, r0
 8001e74:	f8d8 e000 	ldr.w	lr, [r8]
 8001e78:	f8d9 5000 	ldr.w	r5, [r9]
 8001e7c:	fb2c 660e 	smlad	r6, ip, lr, r6
 8001e80:	fb2c 7705 	smlad	r7, ip, r5, r7
 8001e84:	fb20 330e 	smlad	r3, r0, lr, r3
 8001e88:	fb20 2205 	smlad	r2, r0, r5, r2
 8001e8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001e90:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8001e94:	f108 0808 	add.w	r8, r8, #8
 8001e98:	f109 0908 	add.w	r9, r9, #8
 8001e9c:	fb21 6600 	smlad	r6, r1, r0, r6
 8001ea0:	fb21 770e 	smlad	r7, r1, lr, r7
 8001ea4:	fb24 3300 	smlad	r3, r4, r0, r3
 8001ea8:	fb24 220e 	smlad	r2, r4, lr, r2
 8001eac:	9901      	ldr	r1, [sp, #4]
 8001eae:	458b      	cmp	fp, r1
 8001eb0:	d1d0      	bne.n	8001e54 <arm_nn_mat_mult_kernel_q7_q15_reordered+0xc4>
 8001eb2:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8001eb6:	9906      	ldr	r1, [sp, #24]
 8001eb8:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8001ebc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001ec0:	448a      	add	sl, r1
 8001ec2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001ec4:	b1c1      	cbz	r1, 8001ef8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x168>
 8001ec6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001ec8:	f10b 31ff 	add.w	r1, fp, #4294967295
 8001ecc:	eb0b 0900 	add.w	r9, fp, r0
 8001ed0:	f911 ef01 	ldrsb.w	lr, [r1, #1]!
 8001ed4:	f93c 5b02 	ldrsh.w	r5, [ip], #2
 8001ed8:	f938 4b02 	ldrsh.w	r4, [r8], #2
 8001edc:	f91a 0b01 	ldrsb.w	r0, [sl], #1
 8001ee0:	4589      	cmp	r9, r1
 8001ee2:	fb15 660e 	smlabb	r6, r5, lr, r6
 8001ee6:	fb14 770e 	smlabb	r7, r4, lr, r7
 8001eea:	fb15 3300 	smlabb	r3, r5, r0, r3
 8001eee:	fb14 2200 	smlabb	r2, r4, r0, r2
 8001ef2:	d1ed      	bne.n	8001ed0 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x140>
 8001ef4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001ef6:	448b      	add	fp, r1
 8001ef8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001efa:	410e      	asrs	r6, r1
 8001efc:	f306 0607 	ssat	r6, #8, r6
 8001f00:	9c04      	ldr	r4, [sp, #16]
 8001f02:	410b      	asrs	r3, r1
 8001f04:	4620      	mov	r0, r4
 8001f06:	f804 6c02 	strb.w	r6, [r4, #-2]
 8001f0a:	f303 0307 	ssat	r3, #8, r3
 8001f0e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8001f12:	410f      	asrs	r7, r1
 8001f14:	f307 0707 	ssat	r7, #8, r7
 8001f18:	9c03      	ldr	r4, [sp, #12]
 8001f1a:	410a      	asrs	r2, r1
 8001f1c:	f804 7c02 	strb.w	r7, [r4, #-2]
 8001f20:	f302 0207 	ssat	r2, #8, r2
 8001f24:	9b02      	ldr	r3, [sp, #8]
 8001f26:	f804 2c01 	strb.w	r2, [r4, #-1]
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	461d      	mov	r5, r3
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	4623      	mov	r3, r4
 8001f32:	9a05      	ldr	r2, [sp, #20]
 8001f34:	3302      	adds	r3, #2
 8001f36:	9303      	str	r3, [sp, #12]
 8001f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f3a:	4493      	add	fp, r2
 8001f3c:	1c82      	adds	r2, r0, #2
 8001f3e:	9204      	str	r2, [sp, #16]
 8001f40:	461a      	mov	r2, r3
 8001f42:	42aa      	cmp	r2, r5
 8001f44:	f47f af69 	bne.w	8001e1a <arm_nn_mat_mult_kernel_q7_q15_reordered+0x8a>
 8001f48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001f4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001f52:	4418      	add	r0, r3
 8001f54:	b017      	add	sp, #92	; 0x5c
 8001f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f5a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8001f5e:	f8dd c020 	ldr.w	ip, [sp, #32]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4637      	mov	r7, r6
 8001f66:	e7ac      	b.n	8001ec2 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x132>

08001f68 <arm_fully_connected_q7_opt>:
 8001f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f6c:	b08f      	sub	sp, #60	; 0x3c
 8001f6e:	089d      	lsrs	r5, r3, #2
 8001f70:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 8001f74:	9402      	str	r4, [sp, #8]
 8001f76:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 8001f7a:	9400      	str	r4, [sp, #0]
 8001f7c:	4626      	mov	r6, r4
 8001f7e:	460c      	mov	r4, r1
 8001f80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001f82:	930d      	str	r3, [sp, #52]	; 0x34
 8001f84:	4617      	mov	r7, r2
 8001f86:	920c      	str	r2, [sp, #48]	; 0x30
 8001f88:	f000 f95e 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	f000 80bc 	beq.w	800210a <arm_fully_connected_q7_opt+0x1a2>
 8001f92:	f007 0203 	and.w	r2, r7, #3
 8001f96:	08bb      	lsrs	r3, r7, #2
 8001f98:	3d01      	subs	r5, #1
 8001f9a:	1e51      	subs	r1, r2, #1
 8001f9c:	9305      	str	r3, [sp, #20]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b289      	uxth	r1, r1
 8001fa2:	9206      	str	r2, [sp, #24]
 8001fa4:	b2aa      	uxth	r2, r5
 8001fa6:	b29d      	uxth	r5, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	441d      	add	r5, r3
 8001fac:	18c8      	adds	r0, r1, r3
 8001fae:	40b3      	lsls	r3, r6
 8001fb0:	0049      	lsls	r1, r1, #1
 8001fb2:	012e      	lsls	r6, r5, #4
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	9607      	str	r6, [sp, #28]
 8001fb8:	9108      	str	r1, [sp, #32]
 8001fba:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8001fbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001fbe:	9304      	str	r3, [sp, #16]
 8001fc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001fc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8001fc4:	3202      	adds	r2, #2
 8001fc6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8001fca:	0080      	lsls	r0, r0, #2
 8001fcc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	9509      	str	r5, [sp, #36]	; 0x24
 8001fd4:	900a      	str	r0, [sp, #40]	; 0x28
 8001fd6:	9203      	str	r2, [sp, #12]
 8001fd8:	f101 0b04 	add.w	fp, r1, #4
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	9d02      	ldr	r5, [sp, #8]
 8001fe0:	f91b 0c04 	ldrsb.w	r0, [fp, #-4]
 8001fe4:	f91b 2c03 	ldrsb.w	r2, [fp, #-3]
 8001fe8:	f91b 1c02 	ldrsb.w	r1, [fp, #-2]
 8001fec:	f91b 3c01 	ldrsb.w	r3, [fp, #-1]
 8001ff0:	9e04      	ldr	r6, [sp, #16]
 8001ff2:	40a8      	lsls	r0, r5
 8001ff4:	40aa      	lsls	r2, r5
 8001ff6:	40a9      	lsls	r1, r5
 8001ff8:	40ab      	lsls	r3, r5
 8001ffa:	9d05      	ldr	r5, [sp, #20]
 8001ffc:	4430      	add	r0, r6
 8001ffe:	4432      	add	r2, r6
 8002000:	4431      	add	r1, r6
 8002002:	4433      	add	r3, r6
 8002004:	2d00      	cmp	r5, #0
 8002006:	f000 80e3 	beq.w	80021d0 <arm_fully_connected_q7_opt+0x268>
 800200a:	9d07      	ldr	r5, [sp, #28]
 800200c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800200e:	1967      	adds	r7, r4, r5
 8002010:	f8d4 8000 	ldr.w	r8, [r4]
 8002014:	6835      	ldr	r5, [r6, #0]
 8002016:	fa2f fe88 	sxtb16	lr, r8
 800201a:	ea4f 2838 	mov.w	r8, r8, ror #8
 800201e:	fa2f f888 	sxtb16	r8, r8
 8002022:	fb2e 0005 	smlad	r0, lr, r5, r0
 8002026:	fb28 2805 	smlad	r8, r8, r5, r2
 800202a:	6862      	ldr	r2, [r4, #4]
 800202c:	fa2f fe82 	sxtb16	lr, r2
 8002030:	ea4f 2232 	mov.w	r2, r2, ror #8
 8002034:	fa2f f282 	sxtb16	r2, r2
 8002038:	fb2e 1105 	smlad	r1, lr, r5, r1
 800203c:	fb22 3305 	smlad	r3, r2, r5, r3
 8002040:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8002044:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8002048:	fa2f f58e 	sxtb16	r5, lr
 800204c:	ea4f 223e 	mov.w	r2, lr, ror #8
 8002050:	3608      	adds	r6, #8
 8002052:	fa2f f282 	sxtb16	r2, r2
 8002056:	fb25 000c 	smlad	r0, r5, ip, r0
 800205a:	fb22 820c 	smlad	r2, r2, ip, r8
 800205e:	68e5      	ldr	r5, [r4, #12]
 8002060:	fa2f fe85 	sxtb16	lr, r5
 8002064:	3410      	adds	r4, #16
 8002066:	ea4f 2535 	mov.w	r5, r5, ror #8
 800206a:	fa2f f585 	sxtb16	r5, r5
 800206e:	fb2e 110c 	smlad	r1, lr, ip, r1
 8002072:	fb25 330c 	smlad	r3, r5, ip, r3
 8002076:	42bc      	cmp	r4, r7
 8002078:	d1ca      	bne.n	8002010 <arm_fully_connected_q7_opt+0xa8>
 800207a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800207e:	9d06      	ldr	r5, [sp, #24]
 8002080:	b1e5      	cbz	r5, 80020bc <arm_fully_connected_q7_opt+0x154>
 8002082:	9e08      	ldr	r6, [sp, #32]
 8002084:	f1aa 0702 	sub.w	r7, sl, #2
 8002088:	1d25      	adds	r5, r4, #4
 800208a:	44b2      	add	sl, r6
 800208c:	f937 6f02 	ldrsh.w	r6, [r7, #2]!
 8002090:	f915 9c04 	ldrsb.w	r9, [r5, #-4]
 8002094:	f915 8c03 	ldrsb.w	r8, [r5, #-3]
 8002098:	f915 cc02 	ldrsb.w	ip, [r5, #-2]
 800209c:	f915 ec01 	ldrsb.w	lr, [r5, #-1]
 80020a0:	45ba      	cmp	sl, r7
 80020a2:	fb16 0009 	smlabb	r0, r6, r9, r0
 80020a6:	fb16 2208 	smlabb	r2, r6, r8, r2
 80020aa:	fb16 110c 	smlabb	r1, r6, ip, r1
 80020ae:	fb16 330e 	smlabb	r3, r6, lr, r3
 80020b2:	f105 0504 	add.w	r5, r5, #4
 80020b6:	d1e9      	bne.n	800208c <arm_fully_connected_q7_opt+0x124>
 80020b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80020ba:	442c      	add	r4, r5
 80020bc:	9f00      	ldr	r7, [sp, #0]
 80020be:	4138      	asrs	r0, r7
 80020c0:	f300 0007 	ssat	r0, #8, r0
 80020c4:	9e01      	ldr	r6, [sp, #4]
 80020c6:	413a      	asrs	r2, r7
 80020c8:	f806 0c04 	strb.w	r0, [r6, #-4]
 80020cc:	f302 0207 	ssat	r2, #8, r2
 80020d0:	f806 2c03 	strb.w	r2, [r6, #-3]
 80020d4:	4139      	asrs	r1, r7
 80020d6:	f301 0107 	ssat	r1, #8, r1
 80020da:	f806 1c02 	strb.w	r1, [r6, #-2]
 80020de:	413b      	asrs	r3, r7
 80020e0:	f303 0307 	ssat	r3, #8, r3
 80020e4:	f806 3c01 	strb.w	r3, [r6, #-1]
 80020e8:	1d33      	adds	r3, r6, #4
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	9b03      	ldr	r3, [sp, #12]
 80020ee:	f10b 0b04 	add.w	fp, fp, #4
 80020f2:	455b      	cmp	r3, fp
 80020f4:	f47f af73 	bne.w	8001fde <arm_fully_connected_q7_opt+0x76>
 80020f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80020fc:	3301      	adds	r3, #1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	441a      	add	r2, r3
 8002102:	921a      	str	r2, [sp, #104]	; 0x68
 8002104:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002106:	441a      	add	r2, r3
 8002108:	921b      	str	r2, [sp, #108]	; 0x6c
 800210a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800210c:	f013 0e03 	ands.w	lr, r3, #3
 8002110:	d058      	beq.n	80021c4 <arm_fully_connected_q7_opt+0x25c>
 8002112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002114:	0893      	lsrs	r3, r2, #2
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	f103 3bff 	add.w	fp, r3, #4294967295
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	9203      	str	r2, [sp, #12]
 8002122:	1e53      	subs	r3, r2, #1
 8002124:	9a00      	ldr	r2, [sp, #0]
 8002126:	f04f 0c01 	mov.w	ip, #1
 800212a:	fa1f fb8b 	uxth.w	fp, fp
 800212e:	44e3      	add	fp, ip
 8002130:	fa0c fc02 	lsl.w	ip, ip, r2
 8002134:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002136:	f10e 3eff 	add.w	lr, lr, #4294967295
 800213a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800213e:	fa12 fe8e 	uxtah	lr, r2, lr
 8002142:	1e57      	subs	r7, r2, #1
 8002144:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002146:	f8cd a010 	str.w	sl, [sp, #16]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8002150:	eb02 0bcb 	add.w	fp, r2, fp, lsl #3
 8002154:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8002158:	f103 0801 	add.w	r8, r3, #1
 800215c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002160:	9a02      	ldr	r2, [sp, #8]
 8002162:	f917 3f01 	ldrsb.w	r3, [r7, #1]!
 8002166:	4093      	lsls	r3, r2
 8002168:	9a01      	ldr	r2, [sp, #4]
 800216a:	4463      	add	r3, ip
 800216c:	b372      	cbz	r2, 80021cc <arm_fully_connected_q7_opt+0x264>
 800216e:	9a04      	ldr	r2, [sp, #16]
 8002170:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8002172:	18a6      	adds	r6, r4, r2
 8002174:	f854 2b04 	ldr.w	r2, [r4], #4
 8002178:	6829      	ldr	r1, [r5, #0]
 800217a:	fa2f f082 	sxtb16	r0, r2
 800217e:	ea4f 2232 	mov.w	r2, r2, ror #8
 8002182:	fa2f f282 	sxtb16	r2, r2
 8002186:	fb21 3300 	smlad	r3, r1, r0, r3
 800218a:	6869      	ldr	r1, [r5, #4]
 800218c:	3508      	adds	r5, #8
 800218e:	fb21 3302 	smlad	r3, r1, r2, r3
 8002192:	42b4      	cmp	r4, r6
 8002194:	d1ee      	bne.n	8002174 <arm_fully_connected_q7_opt+0x20c>
 8002196:	465e      	mov	r6, fp
 8002198:	9a03      	ldr	r2, [sp, #12]
 800219a:	b15a      	cbz	r2, 80021b4 <arm_fully_connected_q7_opt+0x24c>
 800219c:	1eb2      	subs	r2, r6, #2
 800219e:	4621      	mov	r1, r4
 80021a0:	444e      	add	r6, r9
 80021a2:	f832 5f02 	ldrh.w	r5, [r2, #2]!
 80021a6:	f911 0b01 	ldrsb.w	r0, [r1], #1
 80021aa:	4296      	cmp	r6, r2
 80021ac:	fb15 3300 	smlabb	r3, r5, r0, r3
 80021b0:	d1f7      	bne.n	80021a2 <arm_fully_connected_q7_opt+0x23a>
 80021b2:	4444      	add	r4, r8
 80021b4:	9a00      	ldr	r2, [sp, #0]
 80021b6:	4113      	asrs	r3, r2
 80021b8:	f303 0307 	ssat	r3, #8, r3
 80021bc:	45be      	cmp	lr, r7
 80021be:	f80a 3b01 	strb.w	r3, [sl], #1
 80021c2:	d1cd      	bne.n	8002160 <arm_fully_connected_q7_opt+0x1f8>
 80021c4:	2000      	movs	r0, #0
 80021c6:	b00f      	add	sp, #60	; 0x3c
 80021c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021cc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80021ce:	e7e3      	b.n	8002198 <arm_fully_connected_q7_opt+0x230>
 80021d0:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80021d4:	e753      	b.n	800207e <arm_fully_connected_q7_opt+0x116>
 80021d6:	bf00      	nop

080021d8 <arm_q7_to_q15_no_shift>:
 80021d8:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 80021dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e0:	d02e      	beq.n	8002240 <arm_q7_to_q15_no_shift+0x68>
 80021e2:	f8df e060 	ldr.w	lr, [pc, #96]	; 8002244 <arm_q7_to_q15_no_shift+0x6c>
 80021e6:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 80021ea:	460c      	mov	r4, r1
 80021ec:	f850 3b04 	ldr.w	r3, [r0], #4
 80021f0:	fa2f f883 	sxtb16	r8, r3
 80021f4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80021f8:	fa1f f588 	uxth.w	r5, r8
 80021fc:	fa2f f383 	sxtb16	r3, r3
 8002200:	ea03 060e 	and.w	r6, r3, lr
 8002204:	ea46 4618 	orr.w	r6, r6, r8, lsr #16
 8002208:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800220c:	42b8      	cmp	r0, r7
 800220e:	6066      	str	r6, [r4, #4]
 8002210:	6023      	str	r3, [r4, #0]
 8002212:	f104 0408 	add.w	r4, r4, #8
 8002216:	d1e9      	bne.n	80021ec <arm_q7_to_q15_no_shift+0x14>
 8002218:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 800221c:	f012 0203 	ands.w	r2, r2, #3
 8002220:	d00c      	beq.n	800223c <arm_q7_to_q15_no_shift+0x64>
 8002222:	f997 3000 	ldrsb.w	r3, [r7]
 8002226:	800b      	strh	r3, [r1, #0]
 8002228:	2a01      	cmp	r2, #1
 800222a:	d007      	beq.n	800223c <arm_q7_to_q15_no_shift+0x64>
 800222c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8002230:	804b      	strh	r3, [r1, #2]
 8002232:	2a02      	cmp	r2, #2
 8002234:	bf1c      	itt	ne
 8002236:	f997 3002 	ldrsbne.w	r3, [r7, #2]
 800223a:	808b      	strhne	r3, [r1, #4]
 800223c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002240:	4607      	mov	r7, r0
 8002242:	e7eb      	b.n	800221c <arm_q7_to_q15_no_shift+0x44>
 8002244:	ffff0000 	.word	0xffff0000

08002248 <arm_q7_to_q15_reordered_no_shift>:
 8002248:	b4f0      	push	{r4, r5, r6, r7}
 800224a:	0897      	lsrs	r7, r2, #2
 800224c:	d027      	beq.n	800229e <arm_q7_to_q15_reordered_no_shift+0x56>
 800224e:	f101 0408 	add.w	r4, r1, #8
 8002252:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 8002256:	f850 3b04 	ldr.w	r3, [r0], #4
 800225a:	fa2f f583 	sxtb16	r5, r3
 800225e:	42b0      	cmp	r0, r6
 8002260:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002264:	f844 5c08 	str.w	r5, [r4, #-8]
 8002268:	fa2f f383 	sxtb16	r3, r3
 800226c:	f104 0408 	add.w	r4, r4, #8
 8002270:	f844 3c0c 	str.w	r3, [r4, #-12]
 8002274:	d1ef      	bne.n	8002256 <arm_q7_to_q15_reordered_no_shift+0xe>
 8002276:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800227a:	f012 0203 	ands.w	r2, r2, #3
 800227e:	d00c      	beq.n	800229a <arm_q7_to_q15_reordered_no_shift+0x52>
 8002280:	f996 3000 	ldrsb.w	r3, [r6]
 8002284:	800b      	strh	r3, [r1, #0]
 8002286:	2a01      	cmp	r2, #1
 8002288:	d007      	beq.n	800229a <arm_q7_to_q15_reordered_no_shift+0x52>
 800228a:	f996 3001 	ldrsb.w	r3, [r6, #1]
 800228e:	804b      	strh	r3, [r1, #2]
 8002290:	2a02      	cmp	r2, #2
 8002292:	bf1c      	itt	ne
 8002294:	f996 3002 	ldrsbne.w	r3, [r6, #2]
 8002298:	808b      	strhne	r3, [r1, #4]
 800229a:	bcf0      	pop	{r4, r5, r6, r7}
 800229c:	4770      	bx	lr
 800229e:	4606      	mov	r6, r0
 80022a0:	e7eb      	b.n	800227a <arm_q7_to_q15_reordered_no_shift+0x32>
 80022a2:	bf00      	nop

080022a4 <arm_maxpool_q7_HWC>:
 80022a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a8:	b091      	sub	sp, #68	; 0x44
 80022aa:	4617      	mov	r7, r2
 80022ac:	930a      	str	r3, [sp, #40]	; 0x28
 80022ae:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80022b2:	9307      	str	r3, [sp, #28]
 80022b4:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80022b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80022ba:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80022be:	9004      	str	r0, [sp, #16]
 80022c0:	9309      	str	r3, [sp, #36]	; 0x24
 80022c2:	4608      	mov	r0, r1
 80022c4:	9106      	str	r1, [sp, #24]
 80022c6:	2900      	cmp	r1, #0
 80022c8:	f000 8145 	beq.w	8002556 <arm_maxpool_q7_HWC+0x2b2>
 80022cc:	f007 0103 	and.w	r1, r7, #3
 80022d0:	0892      	lsrs	r2, r2, #2
 80022d2:	9202      	str	r2, [sp, #8]
 80022d4:	460c      	mov	r4, r1
 80022d6:	9101      	str	r1, [sp, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 812b 	beq.w	8002534 <arm_maxpool_q7_HWC+0x290>
 80022de:	1e53      	subs	r3, r2, #1
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	1e62      	subs	r2, r4, #1
 80022e6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80022ea:	b293      	uxth	r3, r2
 80022ec:	2100      	movs	r1, #0
 80022ee:	9303      	str	r3, [sp, #12]
 80022f0:	fb00 f307 	mul.w	r3, r0, r7
 80022f4:	910e      	str	r1, [sp, #56]	; 0x38
 80022f6:	930d      	str	r3, [sp, #52]	; 0x34
 80022f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022fa:	9804      	ldr	r0, [sp, #16]
 80022fc:	fb01 3203 	mla	r2, r1, r3, r3
 8002300:	1882      	adds	r2, r0, r2
 8002302:	920c      	str	r2, [sp, #48]	; 0x30
 8002304:	9a06      	ldr	r2, [sp, #24]
 8002306:	2300      	movs	r3, #0
 8002308:	fb01 f202 	mul.w	r2, r1, r2
 800230c:	9208      	str	r2, [sp, #32]
 800230e:	9305      	str	r3, [sp, #20]
 8002310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002312:	9908      	ldr	r1, [sp, #32]
 8002314:	9c07      	ldr	r4, [sp, #28]
 8002316:	9804      	ldr	r0, [sp, #16]
 8002318:	18ce      	adds	r6, r1, r3
 800231a:	fb03 f302 	mul.w	r3, r3, r2
 800231e:	1b1a      	subs	r2, r3, r4
 8002320:	fb07 0606 	mla	r6, r7, r6, r0
 8002324:	f100 810e 	bmi.w	8002544 <arm_maxpool_q7_HWC+0x2a0>
 8002328:	eb03 0b01 	add.w	fp, r3, r1
 800232c:	ebab 0b04 	sub.w	fp, fp, r4
 8002330:	fb07 0b0b 	mla	fp, r7, fp, r0
 8002334:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002336:	9906      	ldr	r1, [sp, #24]
 8002338:	4402      	add	r2, r0
 800233a:	428a      	cmp	r2, r1
 800233c:	f280 8100 	bge.w	8002540 <arm_maxpool_q7_HWC+0x29c>
 8002340:	9a08      	ldr	r2, [sp, #32]
 8002342:	189d      	adds	r5, r3, r2
 8002344:	9b07      	ldr	r3, [sp, #28]
 8002346:	1aed      	subs	r5, r5, r3
 8002348:	9b04      	ldr	r3, [sp, #16]
 800234a:	4405      	add	r5, r0
 800234c:	fb07 3505 	mla	r5, r7, r5, r3
 8002350:	4659      	mov	r1, fp
 8002352:	463a      	mov	r2, r7
 8002354:	4630      	mov	r0, r6
 8002356:	44bb      	add	fp, r7
 8002358:	f006 fa09 	bl	800876e <memmove>
 800235c:	455d      	cmp	r5, fp
 800235e:	bf88      	it	hi
 8002360:	eb06 0a08 	addhi.w	sl, r6, r8
 8002364:	d942      	bls.n	80023ec <arm_maxpool_q7_HWC+0x148>
 8002366:	9b02      	ldr	r3, [sp, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80e6 	beq.w	800253a <arm_maxpool_q7_HWC+0x296>
 800236e:	46dc      	mov	ip, fp
 8002370:	4633      	mov	r3, r6
 8002372:	f85c 2b04 	ldr.w	r2, [ip], #4
 8002376:	4619      	mov	r1, r3
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa4f fe82 	sxtb.w	lr, r2
 800237e:	fa4f f983 	sxtb.w	r9, r3
 8002382:	45ce      	cmp	lr, r9
 8002384:	bfc8      	it	gt
 8002386:	f36e 0307 	bfigt	r3, lr, #0, #8
 800238a:	f343 2e07 	sbfx	lr, r3, #8, #8
 800238e:	f342 2407 	sbfx	r4, r2, #8, #8
 8002392:	45a6      	cmp	lr, r4
 8002394:	bfb8      	it	lt
 8002396:	f364 230f 	bfilt	r3, r4, #8, #8
 800239a:	f343 4407 	sbfx	r4, r3, #16, #8
 800239e:	f342 4007 	sbfx	r0, r2, #16, #8
 80023a2:	4284      	cmp	r4, r0
 80023a4:	bfb8      	it	lt
 80023a6:	f360 4317 	bfilt	r3, r0, #16, #8
 80023aa:	1612      	asrs	r2, r2, #24
 80023ac:	ebb2 6f23 	cmp.w	r2, r3, asr #24
 80023b0:	bfc8      	it	gt
 80023b2:	f362 631f 	bfigt	r3, r2, #24, #8
 80023b6:	f841 3b04 	str.w	r3, [r1], #4
 80023ba:	458a      	cmp	sl, r1
 80023bc:	460b      	mov	r3, r1
 80023be:	d1d8      	bne.n	8002372 <arm_maxpool_q7_HWC+0xce>
 80023c0:	eb0b 0408 	add.w	r4, fp, r8
 80023c4:	4653      	mov	r3, sl
 80023c6:	9a01      	ldr	r2, [sp, #4]
 80023c8:	b16a      	cbz	r2, 80023e6 <arm_maxpool_q7_HWC+0x142>
 80023ca:	9903      	ldr	r1, [sp, #12]
 80023cc:	1e62      	subs	r2, r4, #1
 80023ce:	440c      	add	r4, r1
 80023d0:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
 80023d4:	f993 0000 	ldrsb.w	r0, [r3]
 80023d8:	4288      	cmp	r0, r1
 80023da:	bfb8      	it	lt
 80023dc:	7019      	strblt	r1, [r3, #0]
 80023de:	42a2      	cmp	r2, r4
 80023e0:	f103 0301 	add.w	r3, r3, #1
 80023e4:	d1f4      	bne.n	80023d0 <arm_maxpool_q7_HWC+0x12c>
 80023e6:	44bb      	add	fp, r7
 80023e8:	455d      	cmp	r5, fp
 80023ea:	d8bc      	bhi.n	8002366 <arm_maxpool_q7_HWC+0xc2>
 80023ec:	9b05      	ldr	r3, [sp, #20]
 80023ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023f0:	3301      	adds	r3, #1
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	429a      	cmp	r2, r3
 80023f6:	9305      	str	r3, [sp, #20]
 80023f8:	dc8a      	bgt.n	8002310 <arm_maxpool_q7_HWC+0x6c>
 80023fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023fc:	9a06      	ldr	r2, [sp, #24]
 80023fe:	3301      	adds	r3, #1
 8002400:	b21b      	sxth	r3, r3
 8002402:	4293      	cmp	r3, r2
 8002404:	930e      	str	r3, [sp, #56]	; 0x38
 8002406:	4619      	mov	r1, r3
 8002408:	f6ff af76 	blt.w	80022f8 <arm_maxpool_q7_HWC+0x54>
 800240c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800240e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002410:	9708      	str	r7, [sp, #32]
 8002412:	fb14 f307 	smulbb	r3, r4, r7
 8002416:	b29b      	uxth	r3, r3
 8002418:	089a      	lsrs	r2, r3, #2
 800241a:	9202      	str	r2, [sp, #8]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	3a01      	subs	r2, #1
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	9303      	str	r3, [sp, #12]
 8002426:	b292      	uxth	r2, r2
 8002428:	9b06      	ldr	r3, [sp, #24]
 800242a:	3201      	adds	r2, #1
 800242c:	fb03 f103 	mul.w	r1, r3, r3
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	920e      	str	r2, [sp, #56]	; 0x38
 8002434:	460a      	mov	r2, r1
 8002436:	9904      	ldr	r1, [sp, #16]
 8002438:	fb07 1202 	mla	r2, r7, r2, r1
 800243c:	920c      	str	r2, [sp, #48]	; 0x30
 800243e:	4622      	mov	r2, r4
 8002440:	2300      	movs	r3, #0
 8002442:	fb07 f202 	mul.w	r2, r7, r2
 8002446:	fa1f fb80 	uxth.w	fp, r0
 800244a:	9305      	str	r3, [sp, #20]
 800244c:	920f      	str	r2, [sp, #60]	; 0x3c
 800244e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002450:	9908      	ldr	r1, [sp, #32]
 8002452:	981e      	ldr	r0, [sp, #120]	; 0x78
 8002454:	fb02 f703 	mul.w	r7, r2, r3
 8002458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	9a07      	ldr	r2, [sp, #28]
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	fb01 0707 	mla	r7, r1, r7, r0
 8002466:	d473      	bmi.n	8002550 <arm_maxpool_q7_HWC+0x2ac>
 8002468:	9a06      	ldr	r2, [sp, #24]
 800246a:	fb02 fa03 	mul.w	sl, r2, r3
 800246e:	460a      	mov	r2, r1
 8002470:	9904      	ldr	r1, [sp, #16]
 8002472:	fb02 1a0a 	mla	sl, r2, sl, r1
 8002476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002478:	9906      	ldr	r1, [sp, #24]
 800247a:	4413      	add	r3, r2
 800247c:	428b      	cmp	r3, r1
 800247e:	da65      	bge.n	800254c <arm_maxpool_q7_HWC+0x2a8>
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	9a08      	ldr	r2, [sp, #32]
 8002486:	9904      	ldr	r1, [sp, #16]
 8002488:	fb02 1503 	mla	r5, r2, r3, r1
 800248c:	4651      	mov	r1, sl
 800248e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002490:	4638      	mov	r0, r7
 8002492:	44b2      	add	sl, r6
 8002494:	f006 f96b 	bl	800876e <memmove>
 8002498:	4555      	cmp	r5, sl
 800249a:	d944      	bls.n	8002526 <arm_maxpool_q7_HWC+0x282>
 800249c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800249e:	18bb      	adds	r3, r7, r2
 80024a0:	eb0a 0902 	add.w	r9, sl, r2
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	9b02      	ldr	r3, [sp, #8]
 80024a8:	4651      	mov	r1, sl
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d04c      	beq.n	8002548 <arm_maxpool_q7_HWC+0x2a4>
 80024ae:	463b      	mov	r3, r7
 80024b0:	f851 2b04 	ldr.w	r2, [r1], #4
 80024b4:	4618      	mov	r0, r3
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	fa4f fc82 	sxtb.w	ip, r2
 80024bc:	fa4f f883 	sxtb.w	r8, r3
 80024c0:	45e0      	cmp	r8, ip
 80024c2:	bfb8      	it	lt
 80024c4:	f36c 0307 	bfilt	r3, ip, #0, #8
 80024c8:	f343 2c07 	sbfx	ip, r3, #8, #8
 80024cc:	f342 2e07 	sbfx	lr, r2, #8, #8
 80024d0:	45f4      	cmp	ip, lr
 80024d2:	bfb8      	it	lt
 80024d4:	f36e 230f 	bfilt	r3, lr, #8, #8
 80024d8:	f343 4e07 	sbfx	lr, r3, #16, #8
 80024dc:	f342 4407 	sbfx	r4, r2, #16, #8
 80024e0:	45a6      	cmp	lr, r4
 80024e2:	bfb8      	it	lt
 80024e4:	f364 4317 	bfilt	r3, r4, #16, #8
 80024e8:	1612      	asrs	r2, r2, #24
 80024ea:	ebb2 6f23 	cmp.w	r2, r3, asr #24
 80024ee:	bfc8      	it	gt
 80024f0:	f362 631f 	bfigt	r3, r2, #24, #8
 80024f4:	f840 3b04 	str.w	r3, [r0], #4
 80024f8:	4589      	cmp	r9, r1
 80024fa:	4603      	mov	r3, r0
 80024fc:	d1d8      	bne.n	80024b0 <arm_maxpool_q7_HWC+0x20c>
 80024fe:	9b01      	ldr	r3, [sp, #4]
 8002500:	9a03      	ldr	r2, [sp, #12]
 8002502:	b162      	cbz	r2, 800251e <arm_maxpool_q7_HWC+0x27a>
 8002504:	1e4a      	subs	r2, r1, #1
 8002506:	4459      	add	r1, fp
 8002508:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 800250c:	f993 4000 	ldrsb.w	r4, [r3]
 8002510:	4284      	cmp	r4, r0
 8002512:	bfb8      	it	lt
 8002514:	7018      	strblt	r0, [r3, #0]
 8002516:	4291      	cmp	r1, r2
 8002518:	f103 0301 	add.w	r3, r3, #1
 800251c:	d1f4      	bne.n	8002508 <arm_maxpool_q7_HWC+0x264>
 800251e:	44b2      	add	sl, r6
 8002520:	4555      	cmp	r5, sl
 8002522:	44b1      	add	r9, r6
 8002524:	d8bf      	bhi.n	80024a6 <arm_maxpool_q7_HWC+0x202>
 8002526:	9b05      	ldr	r3, [sp, #20]
 8002528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800252a:	3301      	adds	r3, #1
 800252c:	b21b      	sxth	r3, r3
 800252e:	428b      	cmp	r3, r1
 8002530:	9305      	str	r3, [sp, #20]
 8002532:	db8c      	blt.n	800244e <arm_maxpool_q7_HWC+0x1aa>
 8002534:	b011      	add	sp, #68	; 0x44
 8002536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800253a:	465c      	mov	r4, fp
 800253c:	4633      	mov	r3, r6
 800253e:	e742      	b.n	80023c6 <arm_maxpool_q7_HWC+0x122>
 8002540:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002542:	e705      	b.n	8002350 <arm_maxpool_q7_HWC+0xac>
 8002544:	46b3      	mov	fp, r6
 8002546:	e6f5      	b.n	8002334 <arm_maxpool_q7_HWC+0x90>
 8002548:	463b      	mov	r3, r7
 800254a:	e7d9      	b.n	8002500 <arm_maxpool_q7_HWC+0x25c>
 800254c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800254e:	e79d      	b.n	800248c <arm_maxpool_q7_HWC+0x1e8>
 8002550:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002554:	e78f      	b.n	8002476 <arm_maxpool_q7_HWC+0x1d2>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ec      	beq.n	8002534 <arm_maxpool_q7_HWC+0x290>
 800255a:	910d      	str	r1, [sp, #52]	; 0x34
 800255c:	e756      	b.n	800240c <arm_maxpool_q7_HWC+0x168>
 800255e:	bf00      	nop

08002560 <arm_avepool_q7_HWC>:
 8002560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002564:	b093      	sub	sp, #76	; 0x4c
 8002566:	4690      	mov	r8, r2
 8002568:	930a      	str	r3, [sp, #40]	; 0x28
 800256a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800256e:	9307      	str	r3, [sp, #28]
 8002570:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8002574:	930b      	str	r3, [sp, #44]	; 0x2c
 8002576:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800257a:	9004      	str	r0, [sp, #16]
 800257c:	9309      	str	r3, [sp, #36]	; 0x24
 800257e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8002580:	9106      	str	r1, [sp, #24]
 8002582:	4608      	mov	r0, r1
 8002584:	2900      	cmp	r1, #0
 8002586:	f000 8184 	beq.w	8002892 <arm_avepool_q7_HWC+0x332>
 800258a:	0892      	lsrs	r2, r2, #2
 800258c:	f008 0103 	and.w	r1, r8, #3
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	910e      	str	r1, [sp, #56]	; 0x38
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 815d 	beq.w	8002854 <arm_avepool_q7_HWC+0x2f4>
 800259a:	1e53      	subs	r3, r2, #1
 800259c:	b29b      	uxth	r3, r3
 800259e:	1e4a      	subs	r2, r1, #1
 80025a0:	3301      	adds	r3, #1
 80025a2:	009c      	lsls	r4, r3, #2
 80025a4:	b292      	uxth	r2, r2
 80025a6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	0053      	lsls	r3, r2, #1
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	eb06 0348 	add.w	r3, r6, r8, lsl #1
 80025b4:	2100      	movs	r1, #0
 80025b6:	930d      	str	r3, [sp, #52]	; 0x34
 80025b8:	4fb8      	ldr	r7, [pc, #736]	; (800289c <arm_avepool_q7_HWC+0x33c>)
 80025ba:	940c      	str	r4, [sp, #48]	; 0x30
 80025bc:	fb08 f300 	mul.w	r3, r8, r0
 80025c0:	9111      	str	r1, [sp, #68]	; 0x44
 80025c2:	9310      	str	r3, [sp, #64]	; 0x40
 80025c4:	4644      	mov	r4, r8
 80025c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025c8:	9804      	ldr	r0, [sp, #16]
 80025ca:	fb01 3203 	mla	r2, r1, r3, r3
 80025ce:	1882      	adds	r2, r0, r2
 80025d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80025d2:	9a06      	ldr	r2, [sp, #24]
 80025d4:	2300      	movs	r3, #0
 80025d6:	fb01 f202 	mul.w	r2, r1, r2
 80025da:	9208      	str	r2, [sp, #32]
 80025dc:	9305      	str	r3, [sp, #20]
 80025de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80025e0:	9908      	ldr	r1, [sp, #32]
 80025e2:	9d04      	ldr	r5, [sp, #16]
 80025e4:	185a      	adds	r2, r3, r1
 80025e6:	fb00 f303 	mul.w	r3, r0, r3
 80025ea:	9807      	ldr	r0, [sp, #28]
 80025ec:	fb04 5202 	mla	r2, r4, r2, r5
 80025f0:	9203      	str	r2, [sp, #12]
 80025f2:	1a1a      	subs	r2, r3, r0
 80025f4:	f100 8140 	bmi.w	8002878 <arm_avepool_q7_HWC+0x318>
 80025f8:	eb03 0b01 	add.w	fp, r3, r1
 80025fc:	ebab 0b00 	sub.w	fp, fp, r0
 8002600:	fb04 5b0b 	mla	fp, r4, fp, r5
 8002604:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002606:	9906      	ldr	r1, [sp, #24]
 8002608:	4402      	add	r2, r0
 800260a:	428a      	cmp	r2, r1
 800260c:	f280 8128 	bge.w	8002860 <arm_avepool_q7_HWC+0x300>
 8002610:	9a08      	ldr	r2, [sp, #32]
 8002612:	189d      	adds	r5, r3, r2
 8002614:	9b07      	ldr	r3, [sp, #28]
 8002616:	1aed      	subs	r5, r5, r3
 8002618:	9b04      	ldr	r3, [sp, #16]
 800261a:	4405      	add	r5, r0
 800261c:	fb04 3505 	mla	r5, r4, r5, r3
 8002620:	4658      	mov	r0, fp
 8002622:	4622      	mov	r2, r4
 8002624:	4631      	mov	r1, r6
 8002626:	44a3      	add	fp, r4
 8002628:	f7ff fdd6 	bl	80021d8 <arm_q7_to_q15_no_shift>
 800262c:	455d      	cmp	r5, fp
 800262e:	f240 8121 	bls.w	8002874 <arm_avepool_q7_HWC+0x314>
 8002632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002634:	46b0      	mov	r8, r6
 8002636:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002638:	eb0b 0903 	add.w	r9, fp, r3
 800263c:	f04f 0a01 	mov.w	sl, #1
 8002640:	9b00      	ldr	r3, [sp, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8109 	beq.w	800285a <arm_avepool_q7_HWC+0x2fa>
 8002648:	46c4      	mov	ip, r8
 800264a:	46de      	mov	lr, fp
 800264c:	f85e 3b04 	ldr.w	r3, [lr], #4
 8002650:	fa2f f183 	sxtb16	r1, r3
 8002654:	b28a      	uxth	r2, r1
 8002656:	f8dc 0000 	ldr.w	r0, [ip]
 800265a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800265e:	f10c 0c08 	add.w	ip, ip, #8
 8002662:	fa2f f383 	sxtb16	r3, r3
 8002666:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800266a:	fa92 f210 	qadd16	r2, r2, r0
 800266e:	f84c 2c08 	str.w	r2, [ip, #-8]
 8002672:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8002676:	403b      	ands	r3, r7
 8002678:	45ce      	cmp	lr, r9
 800267a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800267e:	fa93 f312 	qadd16	r3, r3, r2
 8002682:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002686:	d1e1      	bne.n	800264c <arm_avepool_q7_HWC+0xec>
 8002688:	f8dd e008 	ldr.w	lr, [sp, #8]
 800268c:	4648      	mov	r0, r9
 800268e:	b15e      	cbz	r6, 80026a8 <arm_avepool_q7_HWC+0x148>
 8002690:	9b01      	ldr	r3, [sp, #4]
 8002692:	f1ae 0102 	sub.w	r1, lr, #2
 8002696:	449e      	add	lr, r3
 8002698:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800269c:	884a      	ldrh	r2, [r1, #2]
 800269e:	4413      	add	r3, r2
 80026a0:	f821 3f02 	strh.w	r3, [r1, #2]!
 80026a4:	458e      	cmp	lr, r1
 80026a6:	d1f7      	bne.n	8002698 <arm_avepool_q7_HWC+0x138>
 80026a8:	f10a 0a01 	add.w	sl, sl, #1
 80026ac:	44a3      	add	fp, r4
 80026ae:	fa1f f38a 	uxth.w	r3, sl
 80026b2:	455d      	cmp	r5, fp
 80026b4:	44a1      	add	r9, r4
 80026b6:	fa0f fa83 	sxth.w	sl, r3
 80026ba:	d8c1      	bhi.n	8002640 <arm_avepool_q7_HWC+0xe0>
 80026bc:	4646      	mov	r6, r8
 80026be:	b164      	cbz	r4, 80026da <arm_avepool_q7_HWC+0x17a>
 80026c0:	9a03      	ldr	r2, [sp, #12]
 80026c2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80026c6:	1e50      	subs	r0, r2, #1
 80026c8:	4631      	mov	r1, r6
 80026ca:	f931 2b02 	ldrsh.w	r2, [r1], #2
 80026ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80026d2:	4588      	cmp	r8, r1
 80026d4:	f800 2f01 	strb.w	r2, [r0, #1]!
 80026d8:	d1f7      	bne.n	80026ca <arm_avepool_q7_HWC+0x16a>
 80026da:	9b05      	ldr	r3, [sp, #20]
 80026dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80026de:	3301      	adds	r3, #1
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	428b      	cmp	r3, r1
 80026e4:	9305      	str	r3, [sp, #20]
 80026e6:	f6ff af7a 	blt.w	80025de <arm_avepool_q7_HWC+0x7e>
 80026ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80026ec:	9a06      	ldr	r2, [sp, #24]
 80026ee:	3301      	adds	r3, #1
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	4293      	cmp	r3, r2
 80026f4:	9311      	str	r3, [sp, #68]	; 0x44
 80026f6:	4619      	mov	r1, r3
 80026f8:	f6ff af65 	blt.w	80025c6 <arm_avepool_q7_HWC+0x66>
 80026fc:	46a0      	mov	r8, r4
 80026fe:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8002702:	4c66      	ldr	r4, [pc, #408]	; (800289c <arm_avepool_q7_HWC+0x33c>)
 8002704:	f8cd 8014 	str.w	r8, [sp, #20]
 8002708:	fb1e f308 	smulbb	r3, lr, r8
 800270c:	b29b      	uxth	r3, r3
 800270e:	089a      	lsrs	r2, r3, #2
 8002710:	9201      	str	r2, [sp, #4]
 8002712:	3a01      	subs	r2, #1
 8002714:	461d      	mov	r5, r3
 8002716:	9311      	str	r3, [sp, #68]	; 0x44
 8002718:	b292      	uxth	r2, r2
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	3201      	adds	r2, #1
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	9b06      	ldr	r3, [sp, #24]
 8002726:	0097      	lsls	r7, r2, #2
 8002728:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800272c:	fb03 f103 	mul.w	r1, r3, r3
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8002736:	920e      	str	r2, [sp, #56]	; 0x38
 8002738:	460a      	mov	r2, r1
 800273a:	9904      	ldr	r1, [sp, #16]
 800273c:	970d      	str	r7, [sp, #52]	; 0x34
 800273e:	fb08 1202 	mla	r2, r8, r2, r1
 8002742:	b280      	uxth	r0, r0
 8002744:	2300      	movs	r3, #0
 8002746:	920c      	str	r2, [sp, #48]	; 0x30
 8002748:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800274a:	9303      	str	r3, [sp, #12]
 800274c:	fb08 f20e 	mul.w	r2, r8, lr
 8002750:	920f      	str	r2, [sp, #60]	; 0x3c
 8002752:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8002756:	4672      	mov	r2, lr
 8002758:	9805      	ldr	r0, [sp, #20]
 800275a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800275c:	fb03 f202 	mul.w	r2, r3, r2
 8002760:	fb00 f202 	mul.w	r2, r0, r2
 8002764:	9208      	str	r2, [sp, #32]
 8002766:	9a07      	ldr	r2, [sp, #28]
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	f100 808b 	bmi.w	8002888 <arm_avepool_q7_HWC+0x328>
 8002772:	9a06      	ldr	r2, [sp, #24]
 8002774:	fb02 fa03 	mul.w	sl, r2, r3
 8002778:	9a04      	ldr	r2, [sp, #16]
 800277a:	fb00 2a0a 	mla	sl, r0, sl, r2
 800277e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002780:	9906      	ldr	r1, [sp, #24]
 8002782:	4413      	add	r3, r2
 8002784:	428b      	cmp	r3, r1
 8002786:	da7d      	bge.n	8002884 <arm_avepool_q7_HWC+0x324>
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	9a05      	ldr	r2, [sp, #20]
 800278e:	9904      	ldr	r1, [sp, #16]
 8002790:	fb02 1503 	mla	r5, r2, r3, r1
 8002794:	4650      	mov	r0, sl
 8002796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002798:	4631      	mov	r1, r6
 800279a:	44ba      	add	sl, r7
 800279c:	f7ff fd1c 	bl	80021d8 <arm_q7_to_q15_no_shift>
 80027a0:	4555      	cmp	r5, sl
 80027a2:	d974      	bls.n	800288e <arm_avepool_q7_HWC+0x32e>
 80027a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027a6:	f04f 0901 	mov.w	r9, #1
 80027aa:	eb0a 0803 	add.w	r8, sl, r3
 80027ae:	9b01      	ldr	r3, [sp, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d064      	beq.n	800287e <arm_avepool_q7_HWC+0x31e>
 80027b4:	46b4      	mov	ip, r6
 80027b6:	46d6      	mov	lr, sl
 80027b8:	f85e 3b04 	ldr.w	r3, [lr], #4
 80027bc:	fa2f f183 	sxtb16	r1, r3
 80027c0:	b28a      	uxth	r2, r1
 80027c2:	f8dc 0000 	ldr.w	r0, [ip]
 80027c6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80027ca:	f10c 0c08 	add.w	ip, ip, #8
 80027ce:	fa2f f383 	sxtb16	r3, r3
 80027d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80027d6:	fa92 f210 	qadd16	r2, r2, r0
 80027da:	f84c 2c08 	str.w	r2, [ip, #-8]
 80027de:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 80027e2:	4023      	ands	r3, r4
 80027e4:	45c6      	cmp	lr, r8
 80027e6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80027ea:	fa93 f312 	qadd16	r3, r3, r2
 80027ee:	f84c 3c04 	str.w	r3, [ip, #-4]
 80027f2:	d1e1      	bne.n	80027b8 <arm_avepool_q7_HWC+0x258>
 80027f4:	f8dd e000 	ldr.w	lr, [sp]
 80027f8:	4640      	mov	r0, r8
 80027fa:	9b02      	ldr	r3, [sp, #8]
 80027fc:	b153      	cbz	r3, 8002814 <arm_avepool_q7_HWC+0x2b4>
 80027fe:	f1ae 0102 	sub.w	r1, lr, #2
 8002802:	44de      	add	lr, fp
 8002804:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8002808:	884a      	ldrh	r2, [r1, #2]
 800280a:	4413      	add	r3, r2
 800280c:	f821 3f02 	strh.w	r3, [r1, #2]!
 8002810:	458e      	cmp	lr, r1
 8002812:	d1f7      	bne.n	8002804 <arm_avepool_q7_HWC+0x2a4>
 8002814:	f109 0301 	add.w	r3, r9, #1
 8002818:	44ba      	add	sl, r7
 800281a:	b29b      	uxth	r3, r3
 800281c:	4555      	cmp	r5, sl
 800281e:	44b8      	add	r8, r7
 8002820:	fa0f f983 	sxth.w	r9, r3
 8002824:	d8c3      	bhi.n	80027ae <arm_avepool_q7_HWC+0x24e>
 8002826:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002828:	b16a      	cbz	r2, 8002846 <arm_avepool_q7_HWC+0x2e6>
 800282a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800282c:	9a08      	ldr	r2, [sp, #32]
 800282e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002830:	440a      	add	r2, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4631      	mov	r1, r6
 8002836:	f931 2b02 	ldrsh.w	r2, [r1], #2
 800283a:	fb92 f2f3 	sdiv	r2, r2, r3
 800283e:	42a9      	cmp	r1, r5
 8002840:	f800 2b01 	strb.w	r2, [r0], #1
 8002844:	d1f7      	bne.n	8002836 <arm_avepool_q7_HWC+0x2d6>
 8002846:	9b03      	ldr	r3, [sp, #12]
 8002848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800284a:	3301      	adds	r3, #1
 800284c:	b21b      	sxth	r3, r3
 800284e:	429a      	cmp	r2, r3
 8002850:	9303      	str	r3, [sp, #12]
 8002852:	dc81      	bgt.n	8002758 <arm_avepool_q7_HWC+0x1f8>
 8002854:	b013      	add	sp, #76	; 0x4c
 8002856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285a:	46c6      	mov	lr, r8
 800285c:	4658      	mov	r0, fp
 800285e:	e716      	b.n	800268e <arm_avepool_q7_HWC+0x12e>
 8002860:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002862:	4658      	mov	r0, fp
 8002864:	4622      	mov	r2, r4
 8002866:	4631      	mov	r1, r6
 8002868:	44a3      	add	fp, r4
 800286a:	f7ff fcb5 	bl	80021d8 <arm_q7_to_q15_no_shift>
 800286e:	455d      	cmp	r5, fp
 8002870:	f63f aedf 	bhi.w	8002632 <arm_avepool_q7_HWC+0xd2>
 8002874:	2301      	movs	r3, #1
 8002876:	e722      	b.n	80026be <arm_avepool_q7_HWC+0x15e>
 8002878:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800287c:	e6c2      	b.n	8002604 <arm_avepool_q7_HWC+0xa4>
 800287e:	46b6      	mov	lr, r6
 8002880:	4650      	mov	r0, sl
 8002882:	e7ba      	b.n	80027fa <arm_avepool_q7_HWC+0x29a>
 8002884:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002886:	e785      	b.n	8002794 <arm_avepool_q7_HWC+0x234>
 8002888:	f8dd a010 	ldr.w	sl, [sp, #16]
 800288c:	e777      	b.n	800277e <arm_avepool_q7_HWC+0x21e>
 800288e:	2301      	movs	r3, #1
 8002890:	e7c9      	b.n	8002826 <arm_avepool_q7_HWC+0x2c6>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0de      	beq.n	8002854 <arm_avepool_q7_HWC+0x2f4>
 8002896:	9110      	str	r1, [sp, #64]	; 0x40
 8002898:	e731      	b.n	80026fe <arm_avepool_q7_HWC+0x19e>
 800289a:	bf00      	nop
 800289c:	ffff0000 	.word	0xffff0000

080028a0 <arm_softmax_q7>:
 80028a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a4:	b083      	sub	sp, #12
 80028a6:	2900      	cmp	r1, #0
 80028a8:	f000 80e5 	beq.w	8002a76 <arm_softmax_q7+0x1d6>
 80028ac:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 80028b0:	2300      	movs	r3, #0
 80028b2:	56c5      	ldrsb	r5, [r0, r3]
 80028b4:	3301      	adds	r3, #1
 80028b6:	42ac      	cmp	r4, r5
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	bfb8      	it	lt
 80028bc:	462c      	movlt	r4, r5
 80028be:	428b      	cmp	r3, r1
 80028c0:	dbf7      	blt.n	80028b2 <arm_softmax_q7+0x12>
 80028c2:	3c08      	subs	r4, #8
 80028c4:	b2a4      	uxth	r4, r4
 80028c6:	fa5f f884 	uxtb.w	r8, r4
 80028ca:	0425      	lsls	r5, r4, #16
 80028cc:	ea48 6804 	orr.w	r8, r8, r4, lsl #24
 80028d0:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 80028d4:	0223      	lsls	r3, r4, #8
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	ea48 0805 	orr.w	r8, r8, r5
 80028dc:	ea48 0803 	orr.w	r8, r8, r3
 80028e0:	b223      	sxth	r3, r4
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	088b      	lsrs	r3, r1, #2
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	f000 80cb 	beq.w	8002a82 <arm_softmax_q7+0x1e2>
 80028ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80028f0:	fa1f f98b 	uxth.w	r9, fp
 80028f4:	f109 0901 	add.w	r9, r9, #1
 80028f8:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8002a98 <arm_softmax_q7+0x1f8>
 80028fc:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8002900:	4684      	mov	ip, r0
 8002902:	2500      	movs	r5, #0
 8002904:	f04f 0e01 	mov.w	lr, #1
 8002908:	f85c 4b04 	ldr.w	r4, [ip], #4
 800290c:	fac4 f408 	ssub8	r4, r4, r8
 8002910:	fa2f f384 	sxtb16	r3, r4
 8002914:	b29e      	uxth	r6, r3
 8002916:	ea4f 2434 	mov.w	r4, r4, ror #8
 800291a:	fa2f f484 	sxtb16	r4, r4
 800291e:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8002922:	f3a6 0603 	usat16	r6, #3, r6
 8002926:	b2f7      	uxtb	r7, r6
 8002928:	fa0e f707 	lsl.w	r7, lr, r7
 800292c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8002930:	ea04 040a 	and.w	r4, r4, sl
 8002934:	443d      	add	r5, r7
 8002936:	fa0e f606 	lsl.w	r6, lr, r6
 800293a:	ea44 4313 	orr.w	r3, r4, r3, lsr #16
 800293e:	442e      	add	r6, r5
 8002940:	f3a3 0303 	usat16	r3, #3, r3
 8002944:	b2dd      	uxtb	r5, r3
 8002946:	fa0e f505 	lsl.w	r5, lr, r5
 800294a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800294e:	4435      	add	r5, r6
 8002950:	fa0e f303 	lsl.w	r3, lr, r3
 8002954:	45e1      	cmp	r9, ip
 8002956:	441d      	add	r5, r3
 8002958:	d1d6      	bne.n	8002908 <arm_softmax_q7+0x68>
 800295a:	f011 0103 	ands.w	r1, r1, #3
 800295e:	f000 8095 	beq.w	8002a8c <arm_softmax_q7+0x1ec>
 8002962:	f99c 3000 	ldrsb.w	r3, [ip]
 8002966:	9f00      	ldr	r7, [sp, #0]
 8002968:	1bdb      	subs	r3, r3, r7
 800296a:	f383 0303 	usat	r3, #3, r3
 800296e:	2601      	movs	r6, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	fa06 f303 	lsl.w	r3, r6, r3
 8002976:	441d      	add	r5, r3
 8002978:	f111 33ff 	adds.w	r3, r1, #4294967295
 800297c:	d012      	beq.n	80029a4 <arm_softmax_q7+0x104>
 800297e:	f99c 4001 	ldrsb.w	r4, [ip, #1]
 8002982:	1be4      	subs	r4, r4, r7
 8002984:	f384 0403 	usat	r4, #3, r4
 8002988:	b2e4      	uxtb	r4, r4
 800298a:	fa06 f404 	lsl.w	r4, r6, r4
 800298e:	2902      	cmp	r1, #2
 8002990:	4425      	add	r5, r4
 8002992:	d007      	beq.n	80029a4 <arm_softmax_q7+0x104>
 8002994:	f99c 4002 	ldrsb.w	r4, [ip, #2]
 8002998:	1be4      	subs	r4, r4, r7
 800299a:	f384 0403 	usat	r4, #3, r4
 800299e:	b2e4      	uxtb	r4, r4
 80029a0:	40a6      	lsls	r6, r4
 80029a2:	4435      	add	r5, r6
 80029a4:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 80029a8:	fb94 f5f5 	sdiv	r5, r4, r5
 80029ac:	9c01      	ldr	r4, [sp, #4]
 80029ae:	2c00      	cmp	r4, #0
 80029b0:	d04b      	beq.n	8002a4a <arm_softmax_q7+0x1aa>
 80029b2:	f104 3bff 	add.w	fp, r4, #4294967295
 80029b6:	fa1f fb8b 	uxth.w	fp, fp
 80029ba:	f10b 0b01 	add.w	fp, fp, #1
 80029be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80029c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002a98 <arm_softmax_q7+0x1f8>
 80029c6:	eb00 090b 	add.w	r9, r0, fp
 80029ca:	1d17      	adds	r7, r2, #4
 80029cc:	f04f 3c0d 	mov.w	ip, #218959117	; 0xd0d0d0d
 80029d0:	f850 4b04 	ldr.w	r4, [r0], #4
 80029d4:	facc f404 	ssub8	r4, ip, r4
 80029d8:	fa84 f408 	sadd8	r4, r4, r8
 80029dc:	fa2f fe84 	sxtb16	lr, r4
 80029e0:	fa1f f68e 	uxth.w	r6, lr
 80029e4:	ea4f 2434 	mov.w	r4, r4, ror #8
 80029e8:	fa2f f484 	sxtb16	r4, r4
 80029ec:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80029f0:	f3a6 0605 	usat16	r6, #5, r6
 80029f4:	b2f3      	uxtb	r3, r6
 80029f6:	fa45 f303 	asr.w	r3, r5, r3
 80029fa:	f303 0307 	ssat	r3, #8, r3
 80029fe:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8002a02:	fa45 f606 	asr.w	r6, r5, r6
 8002a06:	f807 3c04 	strb.w	r3, [r7, #-4]
 8002a0a:	f306 0607 	ssat	r6, #8, r6
 8002a0e:	ea04 030a 	and.w	r3, r4, sl
 8002a12:	ea43 431e 	orr.w	r3, r3, lr, lsr #16
 8002a16:	f807 6c03 	strb.w	r6, [r7, #-3]
 8002a1a:	f3a3 0305 	usat16	r3, #5, r3
 8002a1e:	b2dc      	uxtb	r4, r3
 8002a20:	fa45 f404 	asr.w	r4, r5, r4
 8002a24:	f304 0407 	ssat	r4, #8, r4
 8002a28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002a2c:	fa45 f303 	asr.w	r3, r5, r3
 8002a30:	f807 4c02 	strb.w	r4, [r7, #-2]
 8002a34:	f303 0307 	ssat	r3, #8, r3
 8002a38:	4548      	cmp	r0, r9
 8002a3a:	f807 3c01 	strb.w	r3, [r7, #-1]
 8002a3e:	f107 0704 	add.w	r7, r7, #4
 8002a42:	d1c5      	bne.n	80029d0 <arm_softmax_q7+0x130>
 8002a44:	445a      	add	r2, fp
 8002a46:	b199      	cbz	r1, 8002a70 <arm_softmax_q7+0x1d0>
 8002a48:	1e4b      	subs	r3, r1, #1
 8002a4a:	9c00      	ldr	r4, [sp, #0]
 8002a4c:	fa10 f183 	uxtah	r1, r0, r3
 8002a50:	340d      	adds	r4, #13
 8002a52:	3801      	subs	r0, #1
 8002a54:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 8002a58:	1ae3      	subs	r3, r4, r3
 8002a5a:	f383 0305 	usat	r3, #5, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	fa45 f303 	asr.w	r3, r5, r3
 8002a64:	f303 0307 	ssat	r3, #8, r3
 8002a68:	4281      	cmp	r1, r0
 8002a6a:	f802 3b01 	strb.w	r3, [r2], #1
 8002a6e:	d1f1      	bne.n	8002a54 <arm_softmax_q7+0x1b4>
 8002a70:	b003      	add	sp, #12
 8002a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a76:	f06f 0387 	mvn.w	r3, #135	; 0x87
 8002a7a:	f04f 3878 	mov.w	r8, #2021161080	; 0x78787878
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	e730      	b.n	80028e4 <arm_softmax_q7+0x44>
 8002a82:	2900      	cmp	r1, #0
 8002a84:	d0f4      	beq.n	8002a70 <arm_softmax_q7+0x1d0>
 8002a86:	461d      	mov	r5, r3
 8002a88:	4684      	mov	ip, r0
 8002a8a:	e76a      	b.n	8002962 <arm_softmax_q7+0xc2>
 8002a8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a90:	fb93 f5f5 	sdiv	r5, r3, r5
 8002a94:	e78f      	b.n	80029b6 <arm_softmax_q7+0x116>
 8002a96:	bf00      	nop
 8002a98:	ffff0000 	.word	0xffff0000

08002a9c <strlen>:
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d1fb      	bne.n	8002a9e <strlen+0x2>
 8002aa6:	1a18      	subs	r0, r3, r0
 8002aa8:	3801      	subs	r0, #1
 8002aaa:	4770      	bx	lr
 8002aac:	0000      	movs	r0, r0
	...

08002ab0 <memchr>:
 8002ab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002ab4:	2a10      	cmp	r2, #16
 8002ab6:	db2b      	blt.n	8002b10 <memchr+0x60>
 8002ab8:	f010 0f07 	tst.w	r0, #7
 8002abc:	d008      	beq.n	8002ad0 <memchr+0x20>
 8002abe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002ac2:	3a01      	subs	r2, #1
 8002ac4:	428b      	cmp	r3, r1
 8002ac6:	d02d      	beq.n	8002b24 <memchr+0x74>
 8002ac8:	f010 0f07 	tst.w	r0, #7
 8002acc:	b342      	cbz	r2, 8002b20 <memchr+0x70>
 8002ace:	d1f6      	bne.n	8002abe <memchr+0xe>
 8002ad0:	b4f0      	push	{r4, r5, r6, r7}
 8002ad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002ad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8002ada:	f022 0407 	bic.w	r4, r2, #7
 8002ade:	f07f 0700 	mvns.w	r7, #0
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002ae8:	3c08      	subs	r4, #8
 8002aea:	ea85 0501 	eor.w	r5, r5, r1
 8002aee:	ea86 0601 	eor.w	r6, r6, r1
 8002af2:	fa85 f547 	uadd8	r5, r5, r7
 8002af6:	faa3 f587 	sel	r5, r3, r7
 8002afa:	fa86 f647 	uadd8	r6, r6, r7
 8002afe:	faa5 f687 	sel	r6, r5, r7
 8002b02:	b98e      	cbnz	r6, 8002b28 <memchr+0x78>
 8002b04:	d1ee      	bne.n	8002ae4 <memchr+0x34>
 8002b06:	bcf0      	pop	{r4, r5, r6, r7}
 8002b08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002b0c:	f002 0207 	and.w	r2, r2, #7
 8002b10:	b132      	cbz	r2, 8002b20 <memchr+0x70>
 8002b12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002b16:	3a01      	subs	r2, #1
 8002b18:	ea83 0301 	eor.w	r3, r3, r1
 8002b1c:	b113      	cbz	r3, 8002b24 <memchr+0x74>
 8002b1e:	d1f8      	bne.n	8002b12 <memchr+0x62>
 8002b20:	2000      	movs	r0, #0
 8002b22:	4770      	bx	lr
 8002b24:	3801      	subs	r0, #1
 8002b26:	4770      	bx	lr
 8002b28:	2d00      	cmp	r5, #0
 8002b2a:	bf06      	itte	eq
 8002b2c:	4635      	moveq	r5, r6
 8002b2e:	3803      	subeq	r0, #3
 8002b30:	3807      	subne	r0, #7
 8002b32:	f015 0f01 	tst.w	r5, #1
 8002b36:	d107      	bne.n	8002b48 <memchr+0x98>
 8002b38:	3001      	adds	r0, #1
 8002b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002b3e:	bf02      	ittt	eq
 8002b40:	3001      	addeq	r0, #1
 8002b42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002b46:	3001      	addeq	r0, #1
 8002b48:	bcf0      	pop	{r4, r5, r6, r7}
 8002b4a:	3801      	subs	r0, #1
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop

08002b50 <__aeabi_drsub>:
 8002b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002b54:	e002      	b.n	8002b5c <__adddf3>
 8002b56:	bf00      	nop

08002b58 <__aeabi_dsub>:
 8002b58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002b5c <__adddf3>:
 8002b5c:	b530      	push	{r4, r5, lr}
 8002b5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002b62:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002b66:	ea94 0f05 	teq	r4, r5
 8002b6a:	bf08      	it	eq
 8002b6c:	ea90 0f02 	teqeq	r0, r2
 8002b70:	bf1f      	itttt	ne
 8002b72:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002b76:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002b7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002b7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002b82:	f000 80e2 	beq.w	8002d4a <__adddf3+0x1ee>
 8002b86:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002b8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002b8e:	bfb8      	it	lt
 8002b90:	426d      	neglt	r5, r5
 8002b92:	dd0c      	ble.n	8002bae <__adddf3+0x52>
 8002b94:	442c      	add	r4, r5
 8002b96:	ea80 0202 	eor.w	r2, r0, r2
 8002b9a:	ea81 0303 	eor.w	r3, r1, r3
 8002b9e:	ea82 0000 	eor.w	r0, r2, r0
 8002ba2:	ea83 0101 	eor.w	r1, r3, r1
 8002ba6:	ea80 0202 	eor.w	r2, r0, r2
 8002baa:	ea81 0303 	eor.w	r3, r1, r3
 8002bae:	2d36      	cmp	r5, #54	; 0x36
 8002bb0:	bf88      	it	hi
 8002bb2:	bd30      	pophi	{r4, r5, pc}
 8002bb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002bb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002bbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002bc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002bc4:	d002      	beq.n	8002bcc <__adddf3+0x70>
 8002bc6:	4240      	negs	r0, r0
 8002bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002bcc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002bd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002bd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002bd8:	d002      	beq.n	8002be0 <__adddf3+0x84>
 8002bda:	4252      	negs	r2, r2
 8002bdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002be0:	ea94 0f05 	teq	r4, r5
 8002be4:	f000 80a7 	beq.w	8002d36 <__adddf3+0x1da>
 8002be8:	f1a4 0401 	sub.w	r4, r4, #1
 8002bec:	f1d5 0e20 	rsbs	lr, r5, #32
 8002bf0:	db0d      	blt.n	8002c0e <__adddf3+0xb2>
 8002bf2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002bf6:	fa22 f205 	lsr.w	r2, r2, r5
 8002bfa:	1880      	adds	r0, r0, r2
 8002bfc:	f141 0100 	adc.w	r1, r1, #0
 8002c00:	fa03 f20e 	lsl.w	r2, r3, lr
 8002c04:	1880      	adds	r0, r0, r2
 8002c06:	fa43 f305 	asr.w	r3, r3, r5
 8002c0a:	4159      	adcs	r1, r3
 8002c0c:	e00e      	b.n	8002c2c <__adddf3+0xd0>
 8002c0e:	f1a5 0520 	sub.w	r5, r5, #32
 8002c12:	f10e 0e20 	add.w	lr, lr, #32
 8002c16:	2a01      	cmp	r2, #1
 8002c18:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002c1c:	bf28      	it	cs
 8002c1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002c22:	fa43 f305 	asr.w	r3, r3, r5
 8002c26:	18c0      	adds	r0, r0, r3
 8002c28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002c2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002c30:	d507      	bpl.n	8002c42 <__adddf3+0xe6>
 8002c32:	f04f 0e00 	mov.w	lr, #0
 8002c36:	f1dc 0c00 	rsbs	ip, ip, #0
 8002c3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002c3e:	eb6e 0101 	sbc.w	r1, lr, r1
 8002c42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002c46:	d31b      	bcc.n	8002c80 <__adddf3+0x124>
 8002c48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002c4c:	d30c      	bcc.n	8002c68 <__adddf3+0x10c>
 8002c4e:	0849      	lsrs	r1, r1, #1
 8002c50:	ea5f 0030 	movs.w	r0, r0, rrx
 8002c54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002c58:	f104 0401 	add.w	r4, r4, #1
 8002c5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002c60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002c64:	f080 809a 	bcs.w	8002d9c <__adddf3+0x240>
 8002c68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002c6c:	bf08      	it	eq
 8002c6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002c72:	f150 0000 	adcs.w	r0, r0, #0
 8002c76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002c7a:	ea41 0105 	orr.w	r1, r1, r5
 8002c7e:	bd30      	pop	{r4, r5, pc}
 8002c80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002c84:	4140      	adcs	r0, r0
 8002c86:	eb41 0101 	adc.w	r1, r1, r1
 8002c8a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002c8e:	f1a4 0401 	sub.w	r4, r4, #1
 8002c92:	d1e9      	bne.n	8002c68 <__adddf3+0x10c>
 8002c94:	f091 0f00 	teq	r1, #0
 8002c98:	bf04      	itt	eq
 8002c9a:	4601      	moveq	r1, r0
 8002c9c:	2000      	moveq	r0, #0
 8002c9e:	fab1 f381 	clz	r3, r1
 8002ca2:	bf08      	it	eq
 8002ca4:	3320      	addeq	r3, #32
 8002ca6:	f1a3 030b 	sub.w	r3, r3, #11
 8002caa:	f1b3 0220 	subs.w	r2, r3, #32
 8002cae:	da0c      	bge.n	8002cca <__adddf3+0x16e>
 8002cb0:	320c      	adds	r2, #12
 8002cb2:	dd08      	ble.n	8002cc6 <__adddf3+0x16a>
 8002cb4:	f102 0c14 	add.w	ip, r2, #20
 8002cb8:	f1c2 020c 	rsb	r2, r2, #12
 8002cbc:	fa01 f00c 	lsl.w	r0, r1, ip
 8002cc0:	fa21 f102 	lsr.w	r1, r1, r2
 8002cc4:	e00c      	b.n	8002ce0 <__adddf3+0x184>
 8002cc6:	f102 0214 	add.w	r2, r2, #20
 8002cca:	bfd8      	it	le
 8002ccc:	f1c2 0c20 	rsble	ip, r2, #32
 8002cd0:	fa01 f102 	lsl.w	r1, r1, r2
 8002cd4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002cd8:	bfdc      	itt	le
 8002cda:	ea41 010c 	orrle.w	r1, r1, ip
 8002cde:	4090      	lslle	r0, r2
 8002ce0:	1ae4      	subs	r4, r4, r3
 8002ce2:	bfa2      	ittt	ge
 8002ce4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002ce8:	4329      	orrge	r1, r5
 8002cea:	bd30      	popge	{r4, r5, pc}
 8002cec:	ea6f 0404 	mvn.w	r4, r4
 8002cf0:	3c1f      	subs	r4, #31
 8002cf2:	da1c      	bge.n	8002d2e <__adddf3+0x1d2>
 8002cf4:	340c      	adds	r4, #12
 8002cf6:	dc0e      	bgt.n	8002d16 <__adddf3+0x1ba>
 8002cf8:	f104 0414 	add.w	r4, r4, #20
 8002cfc:	f1c4 0220 	rsb	r2, r4, #32
 8002d00:	fa20 f004 	lsr.w	r0, r0, r4
 8002d04:	fa01 f302 	lsl.w	r3, r1, r2
 8002d08:	ea40 0003 	orr.w	r0, r0, r3
 8002d0c:	fa21 f304 	lsr.w	r3, r1, r4
 8002d10:	ea45 0103 	orr.w	r1, r5, r3
 8002d14:	bd30      	pop	{r4, r5, pc}
 8002d16:	f1c4 040c 	rsb	r4, r4, #12
 8002d1a:	f1c4 0220 	rsb	r2, r4, #32
 8002d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8002d22:	fa01 f304 	lsl.w	r3, r1, r4
 8002d26:	ea40 0003 	orr.w	r0, r0, r3
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	bd30      	pop	{r4, r5, pc}
 8002d2e:	fa21 f004 	lsr.w	r0, r1, r4
 8002d32:	4629      	mov	r1, r5
 8002d34:	bd30      	pop	{r4, r5, pc}
 8002d36:	f094 0f00 	teq	r4, #0
 8002d3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002d3e:	bf06      	itte	eq
 8002d40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002d44:	3401      	addeq	r4, #1
 8002d46:	3d01      	subne	r5, #1
 8002d48:	e74e      	b.n	8002be8 <__adddf3+0x8c>
 8002d4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002d4e:	bf18      	it	ne
 8002d50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002d54:	d029      	beq.n	8002daa <__adddf3+0x24e>
 8002d56:	ea94 0f05 	teq	r4, r5
 8002d5a:	bf08      	it	eq
 8002d5c:	ea90 0f02 	teqeq	r0, r2
 8002d60:	d005      	beq.n	8002d6e <__adddf3+0x212>
 8002d62:	ea54 0c00 	orrs.w	ip, r4, r0
 8002d66:	bf04      	itt	eq
 8002d68:	4619      	moveq	r1, r3
 8002d6a:	4610      	moveq	r0, r2
 8002d6c:	bd30      	pop	{r4, r5, pc}
 8002d6e:	ea91 0f03 	teq	r1, r3
 8002d72:	bf1e      	ittt	ne
 8002d74:	2100      	movne	r1, #0
 8002d76:	2000      	movne	r0, #0
 8002d78:	bd30      	popne	{r4, r5, pc}
 8002d7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002d7e:	d105      	bne.n	8002d8c <__adddf3+0x230>
 8002d80:	0040      	lsls	r0, r0, #1
 8002d82:	4149      	adcs	r1, r1
 8002d84:	bf28      	it	cs
 8002d86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002d8a:	bd30      	pop	{r4, r5, pc}
 8002d8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002d90:	bf3c      	itt	cc
 8002d92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002d96:	bd30      	popcc	{r4, r5, pc}
 8002d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002d9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002da0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	bd30      	pop	{r4, r5, pc}
 8002daa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002dae:	bf1a      	itte	ne
 8002db0:	4619      	movne	r1, r3
 8002db2:	4610      	movne	r0, r2
 8002db4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002db8:	bf1c      	itt	ne
 8002dba:	460b      	movne	r3, r1
 8002dbc:	4602      	movne	r2, r0
 8002dbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002dc2:	bf06      	itte	eq
 8002dc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002dc8:	ea91 0f03 	teqeq	r1, r3
 8002dcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002dd0:	bd30      	pop	{r4, r5, pc}
 8002dd2:	bf00      	nop

08002dd4 <__aeabi_ui2d>:
 8002dd4:	f090 0f00 	teq	r0, #0
 8002dd8:	bf04      	itt	eq
 8002dda:	2100      	moveq	r1, #0
 8002ddc:	4770      	bxeq	lr
 8002dde:	b530      	push	{r4, r5, lr}
 8002de0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002de4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002de8:	f04f 0500 	mov.w	r5, #0
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	e750      	b.n	8002c94 <__adddf3+0x138>
 8002df2:	bf00      	nop

08002df4 <__aeabi_i2d>:
 8002df4:	f090 0f00 	teq	r0, #0
 8002df8:	bf04      	itt	eq
 8002dfa:	2100      	moveq	r1, #0
 8002dfc:	4770      	bxeq	lr
 8002dfe:	b530      	push	{r4, r5, lr}
 8002e00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002e04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002e08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002e0c:	bf48      	it	mi
 8002e0e:	4240      	negmi	r0, r0
 8002e10:	f04f 0100 	mov.w	r1, #0
 8002e14:	e73e      	b.n	8002c94 <__adddf3+0x138>
 8002e16:	bf00      	nop

08002e18 <__aeabi_f2d>:
 8002e18:	0042      	lsls	r2, r0, #1
 8002e1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002e1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8002e22:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002e26:	bf1f      	itttt	ne
 8002e28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002e2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002e30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002e34:	4770      	bxne	lr
 8002e36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002e3a:	bf08      	it	eq
 8002e3c:	4770      	bxeq	lr
 8002e3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8002e42:	bf04      	itt	eq
 8002e44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8002e48:	4770      	bxeq	lr
 8002e4a:	b530      	push	{r4, r5, lr}
 8002e4c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002e50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002e54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002e58:	e71c      	b.n	8002c94 <__adddf3+0x138>
 8002e5a:	bf00      	nop

08002e5c <__aeabi_ul2d>:
 8002e5c:	ea50 0201 	orrs.w	r2, r0, r1
 8002e60:	bf08      	it	eq
 8002e62:	4770      	bxeq	lr
 8002e64:	b530      	push	{r4, r5, lr}
 8002e66:	f04f 0500 	mov.w	r5, #0
 8002e6a:	e00a      	b.n	8002e82 <__aeabi_l2d+0x16>

08002e6c <__aeabi_l2d>:
 8002e6c:	ea50 0201 	orrs.w	r2, r0, r1
 8002e70:	bf08      	it	eq
 8002e72:	4770      	bxeq	lr
 8002e74:	b530      	push	{r4, r5, lr}
 8002e76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002e7a:	d502      	bpl.n	8002e82 <__aeabi_l2d+0x16>
 8002e7c:	4240      	negs	r0, r0
 8002e7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002e82:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002e86:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002e8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002e8e:	f43f aed8 	beq.w	8002c42 <__adddf3+0xe6>
 8002e92:	f04f 0203 	mov.w	r2, #3
 8002e96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002e9a:	bf18      	it	ne
 8002e9c:	3203      	addne	r2, #3
 8002e9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002ea2:	bf18      	it	ne
 8002ea4:	3203      	addne	r2, #3
 8002ea6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002eaa:	f1c2 0320 	rsb	r3, r2, #32
 8002eae:	fa00 fc03 	lsl.w	ip, r0, r3
 8002eb2:	fa20 f002 	lsr.w	r0, r0, r2
 8002eb6:	fa01 fe03 	lsl.w	lr, r1, r3
 8002eba:	ea40 000e 	orr.w	r0, r0, lr
 8002ebe:	fa21 f102 	lsr.w	r1, r1, r2
 8002ec2:	4414      	add	r4, r2
 8002ec4:	e6bd      	b.n	8002c42 <__adddf3+0xe6>
 8002ec6:	bf00      	nop

08002ec8 <__aeabi_dmul>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002ece:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002ed2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002ed6:	bf1d      	ittte	ne
 8002ed8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002edc:	ea94 0f0c 	teqne	r4, ip
 8002ee0:	ea95 0f0c 	teqne	r5, ip
 8002ee4:	f000 f8de 	bleq	80030a4 <__aeabi_dmul+0x1dc>
 8002ee8:	442c      	add	r4, r5
 8002eea:	ea81 0603 	eor.w	r6, r1, r3
 8002eee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002ef2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002ef6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002efa:	bf18      	it	ne
 8002efc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002f00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f08:	d038      	beq.n	8002f7c <__aeabi_dmul+0xb4>
 8002f0a:	fba0 ce02 	umull	ip, lr, r0, r2
 8002f0e:	f04f 0500 	mov.w	r5, #0
 8002f12:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002f16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002f1a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002f1e:	f04f 0600 	mov.w	r6, #0
 8002f22:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002f26:	f09c 0f00 	teq	ip, #0
 8002f2a:	bf18      	it	ne
 8002f2c:	f04e 0e01 	orrne.w	lr, lr, #1
 8002f30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002f34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002f38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002f3c:	d204      	bcs.n	8002f48 <__aeabi_dmul+0x80>
 8002f3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002f42:	416d      	adcs	r5, r5
 8002f44:	eb46 0606 	adc.w	r6, r6, r6
 8002f48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002f4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002f50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002f54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002f58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002f5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002f60:	bf88      	it	hi
 8002f62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002f66:	d81e      	bhi.n	8002fa6 <__aeabi_dmul+0xde>
 8002f68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002f6c:	bf08      	it	eq
 8002f6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002f72:	f150 0000 	adcs.w	r0, r0, #0
 8002f76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002f80:	ea46 0101 	orr.w	r1, r6, r1
 8002f84:	ea40 0002 	orr.w	r0, r0, r2
 8002f88:	ea81 0103 	eor.w	r1, r1, r3
 8002f8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002f90:	bfc2      	ittt	gt
 8002f92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002f96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002f9a:	bd70      	popgt	{r4, r5, r6, pc}
 8002f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002fa0:	f04f 0e00 	mov.w	lr, #0
 8002fa4:	3c01      	subs	r4, #1
 8002fa6:	f300 80ab 	bgt.w	8003100 <__aeabi_dmul+0x238>
 8002faa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002fae:	bfde      	ittt	le
 8002fb0:	2000      	movle	r0, #0
 8002fb2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002fb6:	bd70      	pople	{r4, r5, r6, pc}
 8002fb8:	f1c4 0400 	rsb	r4, r4, #0
 8002fbc:	3c20      	subs	r4, #32
 8002fbe:	da35      	bge.n	800302c <__aeabi_dmul+0x164>
 8002fc0:	340c      	adds	r4, #12
 8002fc2:	dc1b      	bgt.n	8002ffc <__aeabi_dmul+0x134>
 8002fc4:	f104 0414 	add.w	r4, r4, #20
 8002fc8:	f1c4 0520 	rsb	r5, r4, #32
 8002fcc:	fa00 f305 	lsl.w	r3, r0, r5
 8002fd0:	fa20 f004 	lsr.w	r0, r0, r4
 8002fd4:	fa01 f205 	lsl.w	r2, r1, r5
 8002fd8:	ea40 0002 	orr.w	r0, r0, r2
 8002fdc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002fe0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002fe4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002fe8:	fa21 f604 	lsr.w	r6, r1, r4
 8002fec:	eb42 0106 	adc.w	r1, r2, r6
 8002ff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002ff4:	bf08      	it	eq
 8002ff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f1c4 040c 	rsb	r4, r4, #12
 8003000:	f1c4 0520 	rsb	r5, r4, #32
 8003004:	fa00 f304 	lsl.w	r3, r0, r4
 8003008:	fa20 f005 	lsr.w	r0, r0, r5
 800300c:	fa01 f204 	lsl.w	r2, r1, r4
 8003010:	ea40 0002 	orr.w	r0, r0, r2
 8003014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003018:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800301c:	f141 0100 	adc.w	r1, r1, #0
 8003020:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003024:	bf08      	it	eq
 8003026:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	f1c4 0520 	rsb	r5, r4, #32
 8003030:	fa00 f205 	lsl.w	r2, r0, r5
 8003034:	ea4e 0e02 	orr.w	lr, lr, r2
 8003038:	fa20 f304 	lsr.w	r3, r0, r4
 800303c:	fa01 f205 	lsl.w	r2, r1, r5
 8003040:	ea43 0302 	orr.w	r3, r3, r2
 8003044:	fa21 f004 	lsr.w	r0, r1, r4
 8003048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800304c:	fa21 f204 	lsr.w	r2, r1, r4
 8003050:	ea20 0002 	bic.w	r0, r0, r2
 8003054:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800305c:	bf08      	it	eq
 800305e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003062:	bd70      	pop	{r4, r5, r6, pc}
 8003064:	f094 0f00 	teq	r4, #0
 8003068:	d10f      	bne.n	800308a <__aeabi_dmul+0x1c2>
 800306a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800306e:	0040      	lsls	r0, r0, #1
 8003070:	eb41 0101 	adc.w	r1, r1, r1
 8003074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003078:	bf08      	it	eq
 800307a:	3c01      	subeq	r4, #1
 800307c:	d0f7      	beq.n	800306e <__aeabi_dmul+0x1a6>
 800307e:	ea41 0106 	orr.w	r1, r1, r6
 8003082:	f095 0f00 	teq	r5, #0
 8003086:	bf18      	it	ne
 8003088:	4770      	bxne	lr
 800308a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800308e:	0052      	lsls	r2, r2, #1
 8003090:	eb43 0303 	adc.w	r3, r3, r3
 8003094:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003098:	bf08      	it	eq
 800309a:	3d01      	subeq	r5, #1
 800309c:	d0f7      	beq.n	800308e <__aeabi_dmul+0x1c6>
 800309e:	ea43 0306 	orr.w	r3, r3, r6
 80030a2:	4770      	bx	lr
 80030a4:	ea94 0f0c 	teq	r4, ip
 80030a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80030ac:	bf18      	it	ne
 80030ae:	ea95 0f0c 	teqne	r5, ip
 80030b2:	d00c      	beq.n	80030ce <__aeabi_dmul+0x206>
 80030b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80030b8:	bf18      	it	ne
 80030ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80030be:	d1d1      	bne.n	8003064 <__aeabi_dmul+0x19c>
 80030c0:	ea81 0103 	eor.w	r1, r1, r3
 80030c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80030c8:	f04f 0000 	mov.w	r0, #0
 80030cc:	bd70      	pop	{r4, r5, r6, pc}
 80030ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80030d2:	bf06      	itte	eq
 80030d4:	4610      	moveq	r0, r2
 80030d6:	4619      	moveq	r1, r3
 80030d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80030dc:	d019      	beq.n	8003112 <__aeabi_dmul+0x24a>
 80030de:	ea94 0f0c 	teq	r4, ip
 80030e2:	d102      	bne.n	80030ea <__aeabi_dmul+0x222>
 80030e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80030e8:	d113      	bne.n	8003112 <__aeabi_dmul+0x24a>
 80030ea:	ea95 0f0c 	teq	r5, ip
 80030ee:	d105      	bne.n	80030fc <__aeabi_dmul+0x234>
 80030f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80030f4:	bf1c      	itt	ne
 80030f6:	4610      	movne	r0, r2
 80030f8:	4619      	movne	r1, r3
 80030fa:	d10a      	bne.n	8003112 <__aeabi_dmul+0x24a>
 80030fc:	ea81 0103 	eor.w	r1, r1, r3
 8003100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003104:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003108:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800310c:	f04f 0000 	mov.w	r0, #0
 8003110:	bd70      	pop	{r4, r5, r6, pc}
 8003112:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003116:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800311a:	bd70      	pop	{r4, r5, r6, pc}

0800311c <__aeabi_ddiv>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800312a:	bf1d      	ittte	ne
 800312c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003130:	ea94 0f0c 	teqne	r4, ip
 8003134:	ea95 0f0c 	teqne	r5, ip
 8003138:	f000 f8a7 	bleq	800328a <__aeabi_ddiv+0x16e>
 800313c:	eba4 0405 	sub.w	r4, r4, r5
 8003140:	ea81 0e03 	eor.w	lr, r1, r3
 8003144:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800314c:	f000 8088 	beq.w	8003260 <__aeabi_ddiv+0x144>
 8003150:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003154:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003158:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800315c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003160:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003164:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003168:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800316c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003170:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003174:	429d      	cmp	r5, r3
 8003176:	bf08      	it	eq
 8003178:	4296      	cmpeq	r6, r2
 800317a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800317e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003182:	d202      	bcs.n	800318a <__aeabi_ddiv+0x6e>
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	ea4f 0232 	mov.w	r2, r2, rrx
 800318a:	1ab6      	subs	r6, r6, r2
 800318c:	eb65 0503 	sbc.w	r5, r5, r3
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	ea4f 0232 	mov.w	r2, r2, rrx
 8003196:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800319a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800319e:	ebb6 0e02 	subs.w	lr, r6, r2
 80031a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80031a6:	bf22      	ittt	cs
 80031a8:	1ab6      	subcs	r6, r6, r2
 80031aa:	4675      	movcs	r5, lr
 80031ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80031b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80031ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80031be:	bf22      	ittt	cs
 80031c0:	1ab6      	subcs	r6, r6, r2
 80031c2:	4675      	movcs	r5, lr
 80031c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80031ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80031d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80031d6:	bf22      	ittt	cs
 80031d8:	1ab6      	subcs	r6, r6, r2
 80031da:	4675      	movcs	r5, lr
 80031dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80031e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80031ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80031ee:	bf22      	ittt	cs
 80031f0:	1ab6      	subcs	r6, r6, r2
 80031f2:	4675      	movcs	r5, lr
 80031f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80031f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80031fc:	d018      	beq.n	8003230 <__aeabi_ddiv+0x114>
 80031fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003202:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003206:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800320a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800320e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003212:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003216:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800321a:	d1c0      	bne.n	800319e <__aeabi_ddiv+0x82>
 800321c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003220:	d10b      	bne.n	800323a <__aeabi_ddiv+0x11e>
 8003222:	ea41 0100 	orr.w	r1, r1, r0
 8003226:	f04f 0000 	mov.w	r0, #0
 800322a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800322e:	e7b6      	b.n	800319e <__aeabi_ddiv+0x82>
 8003230:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003234:	bf04      	itt	eq
 8003236:	4301      	orreq	r1, r0
 8003238:	2000      	moveq	r0, #0
 800323a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800323e:	bf88      	it	hi
 8003240:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003244:	f63f aeaf 	bhi.w	8002fa6 <__aeabi_dmul+0xde>
 8003248:	ebb5 0c03 	subs.w	ip, r5, r3
 800324c:	bf04      	itt	eq
 800324e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003252:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003256:	f150 0000 	adcs.w	r0, r0, #0
 800325a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003264:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003268:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800326c:	bfc2      	ittt	gt
 800326e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003272:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003276:	bd70      	popgt	{r4, r5, r6, pc}
 8003278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800327c:	f04f 0e00 	mov.w	lr, #0
 8003280:	3c01      	subs	r4, #1
 8003282:	e690      	b.n	8002fa6 <__aeabi_dmul+0xde>
 8003284:	ea45 0e06 	orr.w	lr, r5, r6
 8003288:	e68d      	b.n	8002fa6 <__aeabi_dmul+0xde>
 800328a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800328e:	ea94 0f0c 	teq	r4, ip
 8003292:	bf08      	it	eq
 8003294:	ea95 0f0c 	teqeq	r5, ip
 8003298:	f43f af3b 	beq.w	8003112 <__aeabi_dmul+0x24a>
 800329c:	ea94 0f0c 	teq	r4, ip
 80032a0:	d10a      	bne.n	80032b8 <__aeabi_ddiv+0x19c>
 80032a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80032a6:	f47f af34 	bne.w	8003112 <__aeabi_dmul+0x24a>
 80032aa:	ea95 0f0c 	teq	r5, ip
 80032ae:	f47f af25 	bne.w	80030fc <__aeabi_dmul+0x234>
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	e72c      	b.n	8003112 <__aeabi_dmul+0x24a>
 80032b8:	ea95 0f0c 	teq	r5, ip
 80032bc:	d106      	bne.n	80032cc <__aeabi_ddiv+0x1b0>
 80032be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80032c2:	f43f aefd 	beq.w	80030c0 <__aeabi_dmul+0x1f8>
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	e722      	b.n	8003112 <__aeabi_dmul+0x24a>
 80032cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80032d0:	bf18      	it	ne
 80032d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80032d6:	f47f aec5 	bne.w	8003064 <__aeabi_dmul+0x19c>
 80032da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80032de:	f47f af0d 	bne.w	80030fc <__aeabi_dmul+0x234>
 80032e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80032e6:	f47f aeeb 	bne.w	80030c0 <__aeabi_dmul+0x1f8>
 80032ea:	e712      	b.n	8003112 <__aeabi_dmul+0x24a>

080032ec <__gedf2>:
 80032ec:	f04f 3cff 	mov.w	ip, #4294967295
 80032f0:	e006      	b.n	8003300 <__cmpdf2+0x4>
 80032f2:	bf00      	nop

080032f4 <__ledf2>:
 80032f4:	f04f 0c01 	mov.w	ip, #1
 80032f8:	e002      	b.n	8003300 <__cmpdf2+0x4>
 80032fa:	bf00      	nop

080032fc <__cmpdf2>:
 80032fc:	f04f 0c01 	mov.w	ip, #1
 8003300:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003304:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003308:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800330c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003310:	bf18      	it	ne
 8003312:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003316:	d01b      	beq.n	8003350 <__cmpdf2+0x54>
 8003318:	b001      	add	sp, #4
 800331a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800331e:	bf0c      	ite	eq
 8003320:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8003324:	ea91 0f03 	teqne	r1, r3
 8003328:	bf02      	ittt	eq
 800332a:	ea90 0f02 	teqeq	r0, r2
 800332e:	2000      	moveq	r0, #0
 8003330:	4770      	bxeq	lr
 8003332:	f110 0f00 	cmn.w	r0, #0
 8003336:	ea91 0f03 	teq	r1, r3
 800333a:	bf58      	it	pl
 800333c:	4299      	cmppl	r1, r3
 800333e:	bf08      	it	eq
 8003340:	4290      	cmpeq	r0, r2
 8003342:	bf2c      	ite	cs
 8003344:	17d8      	asrcs	r0, r3, #31
 8003346:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800334a:	f040 0001 	orr.w	r0, r0, #1
 800334e:	4770      	bx	lr
 8003350:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003354:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003358:	d102      	bne.n	8003360 <__cmpdf2+0x64>
 800335a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800335e:	d107      	bne.n	8003370 <__cmpdf2+0x74>
 8003360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003364:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003368:	d1d6      	bne.n	8003318 <__cmpdf2+0x1c>
 800336a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800336e:	d0d3      	beq.n	8003318 <__cmpdf2+0x1c>
 8003370:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <__aeabi_cdrcmple>:
 8003378:	4684      	mov	ip, r0
 800337a:	4610      	mov	r0, r2
 800337c:	4662      	mov	r2, ip
 800337e:	468c      	mov	ip, r1
 8003380:	4619      	mov	r1, r3
 8003382:	4663      	mov	r3, ip
 8003384:	e000      	b.n	8003388 <__aeabi_cdcmpeq>
 8003386:	bf00      	nop

08003388 <__aeabi_cdcmpeq>:
 8003388:	b501      	push	{r0, lr}
 800338a:	f7ff ffb7 	bl	80032fc <__cmpdf2>
 800338e:	2800      	cmp	r0, #0
 8003390:	bf48      	it	mi
 8003392:	f110 0f00 	cmnmi.w	r0, #0
 8003396:	bd01      	pop	{r0, pc}

08003398 <__aeabi_dcmpeq>:
 8003398:	f84d ed08 	str.w	lr, [sp, #-8]!
 800339c:	f7ff fff4 	bl	8003388 <__aeabi_cdcmpeq>
 80033a0:	bf0c      	ite	eq
 80033a2:	2001      	moveq	r0, #1
 80033a4:	2000      	movne	r0, #0
 80033a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80033aa:	bf00      	nop

080033ac <__aeabi_dcmplt>:
 80033ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80033b0:	f7ff ffea 	bl	8003388 <__aeabi_cdcmpeq>
 80033b4:	bf34      	ite	cc
 80033b6:	2001      	movcc	r0, #1
 80033b8:	2000      	movcs	r0, #0
 80033ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80033be:	bf00      	nop

080033c0 <__aeabi_dcmple>:
 80033c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80033c4:	f7ff ffe0 	bl	8003388 <__aeabi_cdcmpeq>
 80033c8:	bf94      	ite	ls
 80033ca:	2001      	movls	r0, #1
 80033cc:	2000      	movhi	r0, #0
 80033ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80033d2:	bf00      	nop

080033d4 <__aeabi_dcmpge>:
 80033d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80033d8:	f7ff ffce 	bl	8003378 <__aeabi_cdrcmple>
 80033dc:	bf94      	ite	ls
 80033de:	2001      	movls	r0, #1
 80033e0:	2000      	movhi	r0, #0
 80033e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80033e6:	bf00      	nop

080033e8 <__aeabi_dcmpgt>:
 80033e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80033ec:	f7ff ffc4 	bl	8003378 <__aeabi_cdrcmple>
 80033f0:	bf34      	ite	cc
 80033f2:	2001      	movcc	r0, #1
 80033f4:	2000      	movcs	r0, #0
 80033f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80033fa:	bf00      	nop

080033fc <__aeabi_dcmpun>:
 80033fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003404:	d102      	bne.n	800340c <__aeabi_dcmpun+0x10>
 8003406:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800340a:	d10a      	bne.n	8003422 <__aeabi_dcmpun+0x26>
 800340c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003414:	d102      	bne.n	800341c <__aeabi_dcmpun+0x20>
 8003416:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800341a:	d102      	bne.n	8003422 <__aeabi_dcmpun+0x26>
 800341c:	f04f 0000 	mov.w	r0, #0
 8003420:	4770      	bx	lr
 8003422:	f04f 0001 	mov.w	r0, #1
 8003426:	4770      	bx	lr

08003428 <__aeabi_d2iz>:
 8003428:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800342c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003430:	d215      	bcs.n	800345e <__aeabi_d2iz+0x36>
 8003432:	d511      	bpl.n	8003458 <__aeabi_d2iz+0x30>
 8003434:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003438:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800343c:	d912      	bls.n	8003464 <__aeabi_d2iz+0x3c>
 800343e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003446:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800344a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800344e:	fa23 f002 	lsr.w	r0, r3, r2
 8003452:	bf18      	it	ne
 8003454:	4240      	negne	r0, r0
 8003456:	4770      	bx	lr
 8003458:	f04f 0000 	mov.w	r0, #0
 800345c:	4770      	bx	lr
 800345e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003462:	d105      	bne.n	8003470 <__aeabi_d2iz+0x48>
 8003464:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003468:	bf08      	it	eq
 800346a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800346e:	4770      	bx	lr
 8003470:	f04f 0000 	mov.w	r0, #0
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop

08003478 <ResetTimer>:
#include "CycleCounter.h"

void ResetTimer(){
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <ResetTimer+0x40>)
 800347e:	4a0f      	ldr	r2, [pc, #60]	; (80034bc <ResetTimer+0x44>)
 8003480:	601a      	str	r2, [r3, #0]
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <ResetTimer+0x48>)
 8003484:	4a0f      	ldr	r2, [pc, #60]	; (80034c4 <ResetTimer+0x4c>)
 8003486:	601a      	str	r2, [r3, #0]
	SCB_DEMCR    = (unsigned int *)0xE000EDFC; //address of the register
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <ResetTimer+0x50>)
 800348a:	4a10      	ldr	r2, [pc, #64]	; (80034cc <ResetTimer+0x54>)
 800348c:	601a      	str	r2, [r3, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <ResetTimer+0x50>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <ResetTimer+0x50>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800349c:	601a      	str	r2, [r3, #0]
	*DWT_CYCCNT  = 0; // reset the counter
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <ResetTimer+0x40>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
	*DWT_CONTROL = 0; 
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <ResetTimer+0x48>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	200001f8 	.word	0x200001f8
 80034bc:	e0001004 	.word	0xe0001004
 80034c0:	200001fc 	.word	0x200001fc
 80034c4:	e0001000 	.word	0xe0001000
 80034c8:	20000200 	.word	0x20000200
 80034cc:	e000edfc 	.word	0xe000edfc

080034d0 <StartTimer>:

void StartTimer(){
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
	*DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <StartTimer+0x20>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <StartTimer+0x20>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	200001fc 	.word	0x200001fc

080034f4 <StopTimer>:

void StopTimer(){
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
	*DWT_CONTROL = *DWT_CONTROL & 0 ; // disable the counter    
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <StopTimer+0x1c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <StopTimer+0x1c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
}
 8003506:	bf00      	nop
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	200001fc 	.word	0x200001fc

08003514 <getCycles>:

unsigned int getCycles(){
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
	return *DWT_CYCCNT;
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <getCycles+0x14>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
}
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	200001f8 	.word	0x200001f8

0800352c <nnom_model_create>:

/* nnom model */
static int8_t nnom_input_data[3072];
static int8_t nnom_output_data[10];
static nnom_model_t* nnom_model_create(void)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b0af      	sub	sp, #188	; 0xbc
 8003530:	af04      	add	r7, sp, #16
	static nnom_model_t model;
	nnom_layer_t* layer[13];

	new_model(&model);
 8003532:	48a5      	ldr	r0, [pc, #660]	; (80037c8 <nnom_model_create+0x29c>)
 8003534:	f000 fd9e 	bl	8004074 <new_model>

	layer[0] = Input(shape(32, 32, 3), nnom_input_data);
 8003538:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800353c:	2303      	movs	r3, #3
 800353e:	2220      	movs	r2, #32
 8003540:	2120      	movs	r1, #32
 8003542:	f002 fa5c 	bl	80059fe <shape>
 8003546:	4aa1      	ldr	r2, [pc, #644]	; (80037cc <nnom_model_create+0x2a0>)
 8003548:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800354c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003550:	f002 f992 	bl	8005878 <Input>
 8003554:	4603      	mov	r3, r0
 8003556:	607b      	str	r3, [r7, #4]
	layer[1] = model.hook(Conv2D(32, kernel(5, 5), stride(1, 1), PADDING_SAME, &conv2d_w, &conv2d_b), layer[0]);
 8003558:	4b9b      	ldr	r3, [pc, #620]	; (80037c8 <nnom_model_create+0x29c>)
 800355a:	68dc      	ldr	r4, [r3, #12]
 800355c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003560:	2205      	movs	r2, #5
 8003562:	2105      	movs	r1, #5
 8003564:	4618      	mov	r0, r3
 8003566:	f002 fa68 	bl	8005a3a <kernel>
 800356a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800356e:	2201      	movs	r2, #1
 8003570:	2101      	movs	r1, #1
 8003572:	4618      	mov	r0, r3
 8003574:	f002 fa71 	bl	8005a5a <stride>
 8003578:	4b95      	ldr	r3, [pc, #596]	; (80037d0 <nnom_model_create+0x2a4>)
 800357a:	9303      	str	r3, [sp, #12]
 800357c:	4b95      	ldr	r3, [pc, #596]	; (80037d4 <nnom_model_create+0x2a8>)
 800357e:	9302      	str	r3, [sp, #8]
 8003580:	2301      	movs	r3, #1
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003588:	f8ad 3000 	strh.w	r3, [sp]
 800358c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003592:	ca06      	ldmia	r2, {r1, r2}
 8003594:	2020      	movs	r0, #32
 8003596:	f001 fc41 	bl	8004e1c <Conv2D>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	47a0      	blx	r4
 80035a4:	4603      	mov	r3, r0
 80035a6:	60bb      	str	r3, [r7, #8]
	layer[2] = model.hook(MaxPool(kernel(3, 3), stride(2, 2), PADDING_VALID), layer[1]);
 80035a8:	4b87      	ldr	r3, [pc, #540]	; (80037c8 <nnom_model_create+0x29c>)
 80035aa:	68dc      	ldr	r4, [r3, #12]
 80035ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035b0:	2203      	movs	r2, #3
 80035b2:	2103      	movs	r1, #3
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 fa40 	bl	8005a3a <kernel>
 80035ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035be:	2202      	movs	r2, #2
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f002 fa49 	bl	8005a5a <stride>
 80035c8:	2300      	movs	r3, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035d0:	cb0c      	ldmia	r3, {r2, r3}
 80035d2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80035d6:	c903      	ldmia	r1, {r0, r1}
 80035d8:	f002 fb2e 	bl	8005c38 <MaxPool>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	47a0      	blx	r4
 80035e6:	4603      	mov	r3, r0
 80035e8:	60fb      	str	r3, [r7, #12]
	layer[3] = model.active(act_relu(), layer[2]);
 80035ea:	4b77      	ldr	r3, [pc, #476]	; (80037c8 <nnom_model_create+0x29c>)
 80035ec:	699c      	ldr	r4, [r3, #24]
 80035ee:	f001 fbd9 	bl	8004da4 <act_relu>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	47a0      	blx	r4
 80035fc:	4603      	mov	r3, r0
 80035fe:	613b      	str	r3, [r7, #16]
	layer[4] = model.hook(Conv2D(16, kernel(5, 5), stride(1, 1), PADDING_SAME, &conv2d_1_w, &conv2d_1_b), layer[3]);
 8003600:	4b71      	ldr	r3, [pc, #452]	; (80037c8 <nnom_model_create+0x29c>)
 8003602:	68dc      	ldr	r4, [r3, #12]
 8003604:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003608:	2205      	movs	r2, #5
 800360a:	2105      	movs	r1, #5
 800360c:	4618      	mov	r0, r3
 800360e:	f002 fa14 	bl	8005a3a <kernel>
 8003612:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003616:	2201      	movs	r2, #1
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f002 fa1d 	bl	8005a5a <stride>
 8003620:	4b6d      	ldr	r3, [pc, #436]	; (80037d8 <nnom_model_create+0x2ac>)
 8003622:	9303      	str	r3, [sp, #12]
 8003624:	4b6d      	ldr	r3, [pc, #436]	; (80037dc <nnom_model_create+0x2b0>)
 8003626:	9302      	str	r3, [sp, #8]
 8003628:	2301      	movs	r3, #1
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003630:	f8ad 3000 	strh.w	r3, [sp]
 8003634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003636:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800363a:	ca06      	ldmia	r2, {r1, r2}
 800363c:	2010      	movs	r0, #16
 800363e:	f001 fbed 	bl	8004e1c <Conv2D>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4619      	mov	r1, r3
 8003648:	4610      	mov	r0, r2
 800364a:	47a0      	blx	r4
 800364c:	4603      	mov	r3, r0
 800364e:	617b      	str	r3, [r7, #20]
	layer[5] = model.active(act_relu(), layer[4]);
 8003650:	4b5d      	ldr	r3, [pc, #372]	; (80037c8 <nnom_model_create+0x29c>)
 8003652:	699c      	ldr	r4, [r3, #24]
 8003654:	f001 fba6 	bl	8004da4 <act_relu>
 8003658:	4602      	mov	r2, r0
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	47a0      	blx	r4
 8003662:	4603      	mov	r3, r0
 8003664:	61bb      	str	r3, [r7, #24]
	layer[6] = model.hook(MaxPool(kernel(3, 3), stride(2, 2), PADDING_VALID), layer[5]);
 8003666:	4b58      	ldr	r3, [pc, #352]	; (80037c8 <nnom_model_create+0x29c>)
 8003668:	68dc      	ldr	r4, [r3, #12]
 800366a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800366e:	2203      	movs	r2, #3
 8003670:	2103      	movs	r1, #3
 8003672:	4618      	mov	r0, r3
 8003674:	f002 f9e1 	bl	8005a3a <kernel>
 8003678:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800367c:	2202      	movs	r2, #2
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f002 f9ea 	bl	8005a5a <stride>
 8003686:	2300      	movs	r3, #0
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800368e:	cb0c      	ldmia	r3, {r2, r3}
 8003690:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003694:	c903      	ldmia	r1, {r0, r1}
 8003696:	f002 facf 	bl	8005c38 <MaxPool>
 800369a:	4602      	mov	r2, r0
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	47a0      	blx	r4
 80036a4:	4603      	mov	r3, r0
 80036a6:	61fb      	str	r3, [r7, #28]
	layer[7] = model.hook(Conv2D(32, kernel(5, 5), stride(1, 1), PADDING_SAME, &conv2d_2_w, &conv2d_2_b), layer[6]);
 80036a8:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <nnom_model_create+0x29c>)
 80036aa:	68dc      	ldr	r4, [r3, #12]
 80036ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036b0:	2205      	movs	r2, #5
 80036b2:	2105      	movs	r1, #5
 80036b4:	4618      	mov	r0, r3
 80036b6:	f002 f9c0 	bl	8005a3a <kernel>
 80036ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80036be:	2201      	movs	r2, #1
 80036c0:	2101      	movs	r1, #1
 80036c2:	4618      	mov	r0, r3
 80036c4:	f002 f9c9 	bl	8005a5a <stride>
 80036c8:	4b45      	ldr	r3, [pc, #276]	; (80037e0 <nnom_model_create+0x2b4>)
 80036ca:	9303      	str	r3, [sp, #12]
 80036cc:	4b45      	ldr	r3, [pc, #276]	; (80037e4 <nnom_model_create+0x2b8>)
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	2301      	movs	r3, #1
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80036d8:	f8ad 3000 	strh.w	r3, [sp]
 80036dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036e0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80036e4:	ca06      	ldmia	r2, {r1, r2}
 80036e6:	2020      	movs	r0, #32
 80036e8:	f001 fb98 	bl	8004e1c <Conv2D>
 80036ec:	4602      	mov	r2, r0
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	47a0      	blx	r4
 80036f6:	4603      	mov	r3, r0
 80036f8:	623b      	str	r3, [r7, #32]
	layer[8] = model.active(act_relu(), layer[7]);
 80036fa:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <nnom_model_create+0x29c>)
 80036fc:	699c      	ldr	r4, [r3, #24]
 80036fe:	f001 fb51 	bl	8004da4 <act_relu>
 8003702:	4602      	mov	r2, r0
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	47a0      	blx	r4
 800370c:	4603      	mov	r3, r0
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
	layer[9] = model.hook(MaxPool(kernel(3, 3), stride(2, 2), PADDING_VALID), layer[8]);
 8003710:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <nnom_model_create+0x29c>)
 8003712:	68dc      	ldr	r4, [r3, #12]
 8003714:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003718:	2203      	movs	r2, #3
 800371a:	2103      	movs	r1, #3
 800371c:	4618      	mov	r0, r3
 800371e:	f002 f98c 	bl	8005a3a <kernel>
 8003722:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003726:	2202      	movs	r2, #2
 8003728:	2102      	movs	r1, #2
 800372a:	4618      	mov	r0, r3
 800372c:	f002 f995 	bl	8005a5a <stride>
 8003730:	2300      	movs	r3, #0
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003738:	cb0c      	ldmia	r3, {r2, r3}
 800373a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800373e:	c903      	ldmia	r1, {r0, r1}
 8003740:	f002 fa7a 	bl	8005c38 <MaxPool>
 8003744:	4602      	mov	r2, r0
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	47a0      	blx	r4
 800374e:	4603      	mov	r3, r0
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
	layer[10] = model.hook(Dense(10, &dense_w, &dense_b), layer[9]);
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <nnom_model_create+0x29c>)
 8003754:	68dc      	ldr	r4, [r3, #12]
 8003756:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <nnom_model_create+0x2bc>)
 8003758:	4924      	ldr	r1, [pc, #144]	; (80037ec <nnom_model_create+0x2c0>)
 800375a:	200a      	movs	r0, #10
 800375c:	f001 ff9a 	bl	8005694 <Dense>
 8003760:	4602      	mov	r2, r0
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	47a0      	blx	r4
 800376a:	4603      	mov	r3, r0
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
	layer[11] = model.hook(Softmax(), layer[10]);
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <nnom_model_create+0x29c>)
 8003770:	68dc      	ldr	r4, [r3, #12]
 8003772:	f002 fc67 	bl	8006044 <Softmax>
 8003776:	4602      	mov	r2, r0
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	47a0      	blx	r4
 8003780:	4603      	mov	r3, r0
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
	layer[12] = model.hook(Output(shape(10,1,1), nnom_output_data), layer[11]);
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <nnom_model_create+0x29c>)
 8003786:	68dc      	ldr	r4, [r3, #12]
 8003788:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800378c:	2301      	movs	r3, #1
 800378e:	2201      	movs	r2, #1
 8003790:	210a      	movs	r1, #10
 8003792:	f002 f934 	bl	80059fe <shape>
 8003796:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <nnom_model_create+0x2c4>)
 8003798:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800379c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037a0:	f002 fc0c 	bl	8005fbc <Output>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	47a0      	blx	r4
 80037ae:	4603      	mov	r3, r0
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
	model_compile(&model, layer[0], layer[12]);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037b6:	4619      	mov	r1, r3
 80037b8:	4803      	ldr	r0, [pc, #12]	; (80037c8 <nnom_model_create+0x29c>)
 80037ba:	f001 f999 	bl	8004af0 <model_compile>
	return &model;
 80037be:	4b02      	ldr	r3, [pc, #8]	; (80037c8 <nnom_model_create+0x29c>)
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	37ac      	adds	r7, #172	; 0xac
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd90      	pop	{r4, r7, pc}
 80037c8:	20000e10 	.word	0x20000e10
 80037cc:	20000204 	.word	0x20000204
 80037d0:	0800bc6c 	.word	0x0800bc6c
 80037d4:	0800bc44 	.word	0x0800bc44
 80037d8:	0800ee8c 	.word	0x0800ee8c
 80037dc:	0800ee74 	.word	0x0800ee74
 80037e0:	080120bc 	.word	0x080120bc
 80037e4:	08012094 	.word	0x08012094
 80037e8:	08012c18 	.word	0x08012c18
 80037ec:	08012c04 	.word	0x08012c04
 80037f0:	20000e04 	.word	0x20000e04

080037f4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  while (HAL_OK != HAL_USART_Transmit(&husart1, (uint8_t *) &ch, 1, 30000)){;}
 80037fc:	bf00      	nop
 80037fe:	1d39      	adds	r1, r7, #4
 8003800:	f247 5330 	movw	r3, #30000	; 0x7530
 8003804:	2201      	movs	r2, #1
 8003806:	4805      	ldr	r0, [pc, #20]	; (800381c <__io_putchar+0x28>)
 8003808:	f004 fc0e 	bl	8008028 <HAL_USART_Transmit>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f5      	bne.n	80037fe <__io_putchar+0xa>
  return ch;
 8003812:	687b      	ldr	r3, [r7, #4]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000ea8 	.word	0x20000ea8

08003820 <__io_getchar>:

GETCHAR_PROTOTYPE {
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 uint8_t ch = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_USART_Receive(&husart1, (uint8_t *)&ch, 1, 30000)){;}
 800382a:	bf00      	nop
 800382c:	1df9      	adds	r1, r7, #7
 800382e:	f247 5330 	movw	r3, #30000	; 0x7530
 8003832:	2201      	movs	r2, #1
 8003834:	4805      	ldr	r0, [pc, #20]	; (800384c <__io_getchar+0x2c>)
 8003836:	f004 fca5 	bl	8008184 <HAL_USART_Receive>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f5      	bne.n	800382c <__io_getchar+0xc>
  return ch;
 8003840:	79fb      	ldrb	r3, [r7, #7]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000ea8 	.word	0x20000ea8

08003850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b087      	sub	sp, #28
 8003854:	af02      	add	r7, sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003856:	b672      	cpsid	i
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003858:	f002 fd9f 	bl	800639a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800385c:	f000 f844 	bl	80038e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003860:	f000 f8d4 	bl	8003a0c <MX_GPIO_Init>
  MX_USART1_Init();
 8003864:	f000 f8a6 	bl	80039b4 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */

	printf("NNoM benchmark\r\n");
 8003868:	481b      	ldr	r0, [pc, #108]	; (80038d8 <main+0x88>)
 800386a:	f005 fd3b 	bl	80092e4 <puts>

	nnom_model_t* model;
	model = nnom_model_create();
 800386e:	f7ff fe5d 	bl	800352c <nnom_model_create>
 8003872:	60f8      	str	r0, [r7, #12]

	uint8_t* test_data = (uint8_t*) calloc(156*13, sizeof(uint8_t));
 8003874:	2101      	movs	r1, #1
 8003876:	f240 70ec 	movw	r0, #2028	; 0x7ec
 800387a:	f004 ff2b 	bl	80086d4 <calloc>
 800387e:	4603      	mov	r3, r0
 8003880:	60bb      	str	r3, [r7, #8]

	memcpy(nnom_input_data, test_data, 156*13);
 8003882:	f240 72ec 	movw	r2, #2028	; 0x7ec
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	4814      	ldr	r0, [pc, #80]	; (80038dc <main+0x8c>)
 800388a:	f004 ff65 	bl	8008758 <memcpy>

	uint32_t pred_label;
	float probability;
	ResetTimer();
 800388e:	f7ff fdf3 	bl	8003478 <ResetTimer>
	StartTimer();
 8003892:	f7ff fe1d 	bl	80034d0 <StartTimer>
	nnom_predict(model, &pred_label, &probability);
 8003896:	463a      	mov	r2, r7
 8003898:	1d3b      	adds	r3, r7, #4
 800389a:	4619      	mov	r1, r3
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f002 fcbf 	bl	8006220 <nnom_predict>
	StopTimer();
 80038a2:	f7ff fe27 	bl	80034f4 <StopTimer>

	printf("Predicted label was %i, with %f percent confidence, took %i cycles \r\n",pred_label,probability*100,getCycles());
 80038a6:	687c      	ldr	r4, [r7, #4]
 80038a8:	edd7 7a00 	vldr	s15, [r7]
 80038ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80038e0 <main+0x90>
 80038b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038b4:	ee17 0a90 	vmov	r0, s15
 80038b8:	f7ff faae 	bl	8002e18 <__aeabi_f2d>
 80038bc:	4605      	mov	r5, r0
 80038be:	460e      	mov	r6, r1
 80038c0:	f7ff fe28 	bl	8003514 <getCycles>
 80038c4:	4603      	mov	r3, r0
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	462a      	mov	r2, r5
 80038ca:	4633      	mov	r3, r6
 80038cc:	4621      	mov	r1, r4
 80038ce:	4805      	ldr	r0, [pc, #20]	; (80038e4 <main+0x94>)
 80038d0:	f005 fc80 	bl	80091d4 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <main+0x84>
 80038d6:	bf00      	nop
 80038d8:	0800af50 	.word	0x0800af50
 80038dc:	20000204 	.word	0x20000204
 80038e0:	42c80000 	.word	0x42c80000
 80038e4:	0800af60 	.word	0x0800af60

080038e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b0b8      	sub	sp, #224	; 0xe0
 80038ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038f2:	2244      	movs	r2, #68	; 0x44
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f004 ff52 	bl	80087a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800390c:	463b      	mov	r3, r7
 800390e:	2288      	movs	r2, #136	; 0x88
 8003910:	2100      	movs	r1, #0
 8003912:	4618      	mov	r0, r3
 8003914:	f004 ff44 	bl	80087a0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003918:	2310      	movs	r3, #16
 800391a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800391e:	2301      	movs	r3, #1
 8003920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800392a:	2360      	movs	r3, #96	; 0x60
 800392c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003936:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800393a:	4618      	mov	r0, r3
 800393c:	f003 f890 	bl	8006a60 <HAL_RCC_OscConfig>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003946:	f000 f879 	bl	8003a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800394a:	230f      	movs	r3, #15
 800394c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003968:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f003 fc5c 	bl	800722c <HAL_RCC_ClockConfig>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800397a:	f000 f85f 	bl	8003a3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800397e:	2301      	movs	r3, #1
 8003980:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003982:	2300      	movs	r3, #0
 8003984:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003986:	463b      	mov	r3, r7
 8003988:	4618      	mov	r0, r3
 800398a:	f003 fe53 	bl	8007634 <HAL_RCCEx_PeriphCLKConfig>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003994:	f000 f852 	bl	8003a3c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003998:	f44f 7000 	mov.w	r0, #512	; 0x200
 800399c:	f003 f80a 	bl	80069b4 <HAL_PWREx_ControlVoltageScaling>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039a6:	f000 f849 	bl	8003a3c <Error_Handler>
  }
}
 80039aa:	bf00      	nop
 80039ac:	37e0      	adds	r7, #224	; 0xe0
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <MX_USART1_Init+0x50>)
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <MX_USART1_Init+0x54>)
 80039bc:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <MX_USART1_Init+0x50>)
 80039c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039c4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <MX_USART1_Init+0x50>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <MX_USART1_Init+0x50>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <MX_USART1_Init+0x50>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <MX_USART1_Init+0x50>)
 80039da:	220c      	movs	r2, #12
 80039dc:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <MX_USART1_Init+0x50>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <MX_USART1_Init+0x50>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <MX_USART1_Init+0x50>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80039f0:	4804      	ldr	r0, [pc, #16]	; (8003a04 <MX_USART1_Init+0x50>)
 80039f2:	f004 facf 	bl	8007f94 <HAL_USART_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80039fc:	f000 f81e 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000ea8 	.word	0x20000ea8
 8003a08:	40013800 	.word	0x40013800

08003a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <MX_GPIO_Init+0x2c>)
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <MX_GPIO_Init+0x2c>)
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <MX_GPIO_Init+0x2c>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]

}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000

08003a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_MspInit+0x44>)
 8003a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a56:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <HAL_MspInit+0x44>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_MspInit+0x44>)
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_MspInit+0x44>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_MspInit+0x44>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6593      	str	r3, [r2, #88]	; 0x58
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_MspInit+0x44>)
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	; 0x28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_USART_MspInit+0x7c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d127      	bne.n	8003b06 <HAL_USART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_USART_MspInit+0x80>)
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_USART_MspInit+0x80>)
 8003abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <HAL_USART_MspInit+0x80>)
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_USART_MspInit+0x80>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	4a10      	ldr	r2, [pc, #64]	; (8003b14 <HAL_USART_MspInit+0x80>)
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_USART_MspInit+0x80>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ae6:	23e0      	movs	r3, #224	; 0xe0
 8003ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af2:	2303      	movs	r3, #3
 8003af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003af6:	2307      	movs	r3, #7
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	4619      	mov	r1, r3
 8003b00:	4805      	ldr	r0, [pc, #20]	; (8003b18 <HAL_USART_MspInit+0x84>)
 8003b02:	f002 fda1 	bl	8006648 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003b06:	bf00      	nop
 8003b08:	3728      	adds	r7, #40	; 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40021000 	.word	0x40021000
 8003b18:	48000400 	.word	0x48000400

08003b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2e:	e7fe      	b.n	8003b2e <HardFault_Handler+0x4>

08003b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b34:	e7fe      	b.n	8003b34 <MemManage_Handler+0x4>

08003b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3a:	e7fe      	b.n	8003b3a <BusFault_Handler+0x4>

08003b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b40:	e7fe      	b.n	8003b40 <UsageFault_Handler+0x4>

08003b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b70:	f002 fc66 	bl	8006440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e00a      	b.n	8003ba0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b8a:	f7ff fe49 	bl	8003820 <__io_getchar>
 8003b8e:	4601      	mov	r1, r0
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	60ba      	str	r2, [r7, #8]
 8003b96:	b2ca      	uxtb	r2, r1
 8003b98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	dbf0      	blt.n	8003b8a <_read+0x12>
	}

return len;
 8003ba8:	687b      	ldr	r3, [r7, #4]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e009      	b.n	8003bd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	60ba      	str	r2, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fe11 	bl	80037f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	dbf1      	blt.n	8003bc4 <_write+0x12>
	}
	return len;
 8003be0:	687b      	ldr	r3, [r7, #4]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <_close>:

int _close(int file)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
	return -1;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c12:	605a      	str	r2, [r3, #4]
	return 0;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <_isatty>:

int _isatty(int file)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	return 1;
 8003c2a:	2301      	movs	r3, #1
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
	return 0;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <_sbrk+0x50>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <_sbrk+0x16>
		heap_end = &end;
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <_sbrk+0x50>)
 8003c66:	4a10      	ldr	r2, [pc, #64]	; (8003ca8 <_sbrk+0x54>)
 8003c68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <_sbrk+0x50>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <_sbrk+0x50>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	466a      	mov	r2, sp
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d907      	bls.n	8003c8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c7e:	f004 fd31 	bl	80086e4 <__errno>
 8003c82:	4602      	mov	r2, r0
 8003c84:	230c      	movs	r3, #12
 8003c86:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	e006      	b.n	8003c9c <_sbrk+0x48>
	}

	heap_end += incr;
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <_sbrk+0x50>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	4a03      	ldr	r2, [pc, #12]	; (8003ca4 <_sbrk+0x50>)
 8003c98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000e98 	.word	0x20000e98
 8003ca8:	20000f00 	.word	0x20000f00

08003cac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <SystemInit+0x64>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <SystemInit+0x64>)
 8003cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <SystemInit+0x68>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <SystemInit+0x68>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <SystemInit+0x68>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <SystemInit+0x68>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <SystemInit+0x68>)
 8003cd8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003cdc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003ce0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <SystemInit+0x68>)
 8003ce4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ce8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <SystemInit+0x68>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <SystemInit+0x68>)
 8003cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <SystemInit+0x68>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <SystemInit+0x64>)
 8003cfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d02:	609a      	str	r2, [r3, #8]
#endif
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000ed00 	.word	0xe000ed00
 8003d14:	40021000 	.word	0x40021000

08003d18 <nnom_mem>:
const char default_layer_names[][12] = DEFUALT_LAYER_NAMES;
const char default_activation_names[][8] = ACTIVATION_NAMES;
size_t nnom_memory_taken = 0;

void *nnom_mem(size_t size)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	size = nnom_alignto(size, 4);
 8003d20:	2104      	movs	r1, #4
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f83a 	bl	8003d9c <nnom_alignto>
 8003d28:	6078      	str	r0, [r7, #4]
	void *p = nnom_malloc(size);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f004 fd04 	bl	8008738 <malloc>
 8003d30:	4603      	mov	r3, r0
 8003d32:	60fb      	str	r3, [r7, #12]
	if (p)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <nnom_mem+0x38>
	{
		nnom_memory_taken += size; //test
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <nnom_mem+0x44>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <nnom_mem+0x44>)
 8003d44:	6013      	str	r3, [r2, #0]
		nnom_memset(p, 0, size);
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f004 fd28 	bl	80087a0 <memset>
	}
	return p;
 8003d50:	68fb      	ldr	r3, [r7, #12]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000e9c 	.word	0x20000e9c

08003d60 <io_mem_size>:
	return nnom_memory_taken;
}

// get the size of an IO module
static size_t io_mem_size(nnom_layer_io_t *io)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	size_t size = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
	if (io != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00f      	beq.n	8003d92 <io_mem_size+0x32>
	{
		while (io)
 8003d72:	e00b      	b.n	8003d8c <io_mem_size+0x2c>
		{
			size += tensor_size(io->tensor);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f002 f9ba 	bl	80060f2 <tensor_size>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
			io = io->aux;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	607b      	str	r3, [r7, #4]
		while (io)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <io_mem_size+0x14>
		}
	}
	return size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <nnom_alignto>:

size_t nnom_alignto(size_t value, uint32_t alignment)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
	if (value % alignment == 0)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dae:	6839      	ldr	r1, [r7, #0]
 8003db0:	fb01 f202 	mul.w	r2, r1, r2
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <nnom_alignto+0x22>
		return value;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	e00d      	b.n	8003dda <nnom_alignto+0x3e>
	value += alignment - value % alignment;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	fb01 f202 	mul.w	r2, r1, r2
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	607b      	str	r3, [r7, #4]
	return value;
 8003dd8:	687b      	ldr	r3, [r7, #4]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <find_last>:

// FIXME, this might not work correctly when model has mutiple output. 
static nnom_layer_t *find_last(nnom_layer_t *layer)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
	if (layer == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <find_last+0x1c>
		return NULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e00a      	b.n	8003e0e <find_last+0x28>
	// iterate every layer until the last one on the list, then return the last instance
	while (layer->out->hook.io != NULL)
		layer = layer->out->hook.io->owner;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	607b      	str	r3, [r7, #4]
	while (layer->out->hook.io != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f5      	bne.n	8003df8 <find_last+0x12>
	return layer;
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <find_index>:
// input start layer, return layer num
static uint32_t find_index(nnom_layer_t *start, nnom_layer_t *layer)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
	uint32_t i = 1;
 8003e24:	2301      	movs	r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]
	if (start == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <find_index+0x34>
		return 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e013      	b.n	8003e5a <find_index+0x40>
	// iterate every layer until the last one on the list, then return the index number
	while (start->out->hook.io != NULL)
	{
		i++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
		if (layer == start)
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d101      	bne.n	8003e44 <find_index+0x2a>
			return i;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	e00a      	b.n	8003e5a <find_index+0x40>
		start = start->out->hook.io->owner;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	607b      	str	r3, [r7, #4]
	while (start->out->hook.io != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ec      	bne.n	8003e32 <find_index+0x18>
	}
	return 0;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <model_add>:

static nnom_status_t model_add(nnom_model_t *model, nnom_layer_t *layer)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
	nnom_layer_t *last = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
	nnom_layer_t *curr = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]

	if (layer == NULL)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <model_add+0x24>
	{
		NNOM_LOG("Error: added a NULL layer, could be no memory while creating layer.\n");
 8003e80:	4811      	ldr	r0, [pc, #68]	; (8003ec8 <model_add+0x60>)
 8003e82:	f005 fa2f 	bl	80092e4 <puts>
		return NN_NO_MEMORY;
 8003e86:	f06f 0306 	mvn.w	r3, #6
 8003e8a:	e019      	b.n	8003ec0 <model_add+0x58>
	}

	last = find_last(model->head);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ffa8 	bl	8003de6 <find_last>
 8003e96:	60f8      	str	r0, [r7, #12]
	curr = layer;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	60bb      	str	r3, [r7, #8]

	// when the layer list is empty, the find_last() return model->head.
	if (last == NULL)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <model_add+0x42>
	{
		model->head = curr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e009      	b.n	8003ebe <model_add+0x56>
	}
	else
	{
		// hook the current layer with the last layer.
		last->out->hook.io = curr->in; // hook IO
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	6992      	ldr	r2, [r2, #24]
 8003eb2:	601a      	str	r2, [r3, #0]
		curr->in->hook.io = last->out;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	69d2      	ldr	r2, [r2, #28]
 8003ebc:	601a      	str	r2, [r3, #0]
	}
	return NN_SUCCESS;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	0800afa8 	.word	0x0800afa8

08003ecc <allocate_hook>:

// find an available hook on the io module, normally used by output io module.
// input, the output io module that wants to hook on
// output, the new hook that added to the end of the hook list on the io
static nnom_layer_hook_t *allocate_hook(nnom_layer_io_t *io)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	nnom_layer_hook_t *hook;
	if (io == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <allocate_hook+0x12>
		return NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e01c      	b.n	8003f18 <allocate_hook+0x4c>
	hook = &io->hook;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]

	// if the primary hook is empty, reture it directly.
	if (hook->io == NULL)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <allocate_hook+0x28>
	{
		return hook;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	e014      	b.n	8003f18 <allocate_hook+0x4c>
	else
	{
		// find the empty place and allocate new hook for us
		while (hook->next != NULL)
		{
			hook = hook->next;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
		while (hook->next != NULL)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f8      	bne.n	8003eee <allocate_hook+0x22>
		}
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003efc:	2008      	movs	r0, #8
 8003efe:	f7ff ff0b 	bl	8003d18 <nnom_mem>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	605a      	str	r2, [r3, #4]
		if (hook->next == NULL)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <allocate_hook+0x48>
			return NULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e001      	b.n	8003f18 <allocate_hook+0x4c>
		return hook->next;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685b      	ldr	r3, [r3, #4]
	}
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <allocate_io>:

// to check if an io is hooked to other layer
// input the primary io of a layer's input or output
// return, the new io that added to the io list.
static nnom_layer_io_t *allocate_io(nnom_layer_io_t *io)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	if (io == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <allocate_io+0x12>
		return NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e01f      	b.n	8003f72 <allocate_io+0x52>

	// if the io is free to used
	if (io->hook.io == NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <allocate_io+0x24>
	{
		return io;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	e019      	b.n	8003f72 <allocate_io+0x52>
	else
	{
		// find the empty place and allocate new hook for us
		while (io->aux != NULL)
		{
			io = io->aux;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	607b      	str	r3, [r7, #4]
		while (io->aux != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f8      	bne.n	8003f3e <allocate_io+0x1e>
		}
		io->aux = nnom_mem(sizeof(nnom_layer_io_t));
 8003f4c:	201c      	movs	r0, #28
 8003f4e:	f7ff fee3 	bl	8003d18 <nnom_mem>
 8003f52:	4602      	mov	r2, r0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]
		if (io->aux == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <allocate_io+0x44>
			return NULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e006      	b.n	8003f72 <allocate_io+0x52>
		// the owner for new io is inherited
		io->aux->owner = io->owner;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6952      	ldr	r2, [r2, #20]
 8003f6c:	615a      	str	r2, [r3, #20]
		return io->aux;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
	}
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <model_hook>:

// hook the current layer to the input layer
// this function only to connect (single output layer) to (single input layer).
static nnom_layer_t *model_hook(nnom_layer_t *curr, nnom_layer_t *last)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
	nnom_layer_io_t *curr_in_io;
	nnom_layer_hook_t *last_io_hook;

	if (last == NULL || curr == NULL)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <model_hook+0x16>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <model_hook+0x1a>
		return NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e013      	b.n	8003fbc <model_hook+0x42>

	// add a new hook to the output io of the last layer
	last_io_hook = allocate_hook(last->out);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff97 	bl	8003ecc <allocate_hook>
 8003f9e:	60f8      	str	r0, [r7, #12]
	// add a new input io to the current layer's input list.
	curr_in_io = allocate_io(curr->in);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff ffbb 	bl	8003f20 <allocate_io>
 8003faa:	60b8      	str	r0, [r7, #8]

	// manually hook them togeter.
	last_io_hook->io = curr_in_io;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	601a      	str	r2, [r3, #0]
	curr_in_io->hook.io = last->out;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	601a      	str	r2, [r3, #0]

	return curr;
 8003fba:	687b      	ldr	r3, [r7, #4]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <model_mergex>:

// merge a few layers using specified method
// num = the number of layer that will be merged
// method = functional layer such as (concat(), mult(), add(), sub())
static nnom_layer_t *model_mergex(nnom_layer_t *method, int num, ...)
{
 8003fc4:	b40e      	push	{r1, r2, r3}
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b089      	sub	sp, #36	; 0x24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
	nnom_layer_io_t *method_in_io;
	nnom_layer_hook_t *output_io_hook;

	va_list valist;

	if (method == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <model_mergex+0x14>
		return NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e025      	b.n	8004024 <model_mergex+0x60>

	va_start(valist, num);
 8003fd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fdc:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < num; i++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e01a      	b.n	800401a <model_mergex+0x56>
	{
		// get the input layer
		in_layer = va_arg(valist, nnom_layer_t *);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1d1a      	adds	r2, r3, #4
 8003fe8:	60fa      	str	r2, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	61bb      	str	r3, [r7, #24]

		// add a new hook to the output io of the input layer
		output_io_hook = allocate_hook(in_layer->out);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ff6a 	bl	8003ecc <allocate_hook>
 8003ff8:	6178      	str	r0, [r7, #20]
		// add a new input io to the method layer's input list.
		method_in_io = allocate_io(method->in);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff8e 	bl	8003f20 <allocate_io>
 8004004:	6138      	str	r0, [r7, #16]

		// manually hook them togeter.
		output_io_hook->io = method_in_io;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	601a      	str	r2, [r3, #0]
		method_in_io->hook.io = in_layer->out;
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < num; i++)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	429a      	cmp	r2, r3
 8004020:	dbe0      	blt.n	8003fe4 <model_mergex+0x20>
	}
	va_end(valist);
	return method;
 8004022:	687b      	ldr	r3, [r7, #4]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3724      	adds	r7, #36	; 0x24
 8004028:	46bd      	mov	sp, r7
 800402a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800402e:	b003      	add	sp, #12
 8004030:	4770      	bx	lr

08004032 <model_merge>:

// merge 2 input
// this is an older interface
// method = functional layer such as (concat(), mult(), add(), sub())
static nnom_layer_t *model_merge(nnom_layer_t *method, nnom_layer_t *in1, nnom_layer_t *in2)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
	return model_mergex(method, 2, in1, in2);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	2102      	movs	r1, #2
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff ffbd 	bl	8003fc4 <model_mergex>
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <model_active>:

// This api will merge activation to layer's actail to avoid the extra layer for activation
static nnom_layer_t *model_active(nnom_activation_t *act, nnom_layer_t *target)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
	// simple and easy
	target->actail = act;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	611a      	str	r2, [r3, #16]
	return target;
 8004064:	683b      	ldr	r3, [r7, #0]
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <new_model>:

// when model=NULL, it create a new sequential model
nnom_model_t *new_model(nnom_model_t *model)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	nnom_model_t *m = model;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60fb      	str	r3, [r7, #12]
	if (m == NULL)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <new_model+0x24>
	{
		m = nnom_mem(sizeof(nnom_model_t));
 8004086:	2088      	movs	r0, #136	; 0x88
 8004088:	f7ff fe46 	bl	8003d18 <nnom_mem>
 800408c:	60f8      	str	r0, [r7, #12]
		m->is_alloc = true;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8004096:	e008      	b.n	80040aa <new_model+0x36>
	}
	else
	{
		memset(m, 0, sizeof(nnom_model_t));
 8004098:	2288      	movs	r2, #136	; 0x88
 800409a:	2100      	movs	r1, #0
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f004 fb7f 	bl	80087a0 <memset>
		m->is_alloc = false;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	// set methods
	m->add = model_add;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <new_model+0x60>)
 80040ae:	609a      	str	r2, [r3, #8]
	m->hook = model_hook;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <new_model+0x64>)
 80040b4:	60da      	str	r2, [r3, #12]
	m->merge = model_merge;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a08      	ldr	r2, [pc, #32]	; (80040dc <new_model+0x68>)
 80040ba:	611a      	str	r2, [r3, #16]
	m->mergex = model_mergex;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <new_model+0x6c>)
 80040c0:	615a      	str	r2, [r3, #20]
	m->active = model_active;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <new_model+0x70>)
 80040c6:	619a      	str	r2, [r3, #24]

	return m;
 80040c8:	68fb      	ldr	r3, [r7, #12]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	08003e69 	.word	0x08003e69
 80040d8:	08003f7b 	.word	0x08003f7b
 80040dc:	08004033 	.word	0x08004033
 80040e0:	08003fc5 	.word	0x08003fc5
 80040e4:	08004055 	.word	0x08004055

080040e8 <allocate_block>:
	return;
}

// find an available memory block.
static nnom_mem_block_t *allocate_block(nnom_mem_block_t *list)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	nnom_mem_block_t *free = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
	uint32_t idx;

	for (idx = 0; idx < NNOM_BLOCK_NUM; idx++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e00d      	b.n	8004116 <allocate_block+0x2e>
	{
		if (list[idx].owners == 0)
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4413      	add	r3, r2
 800410a:	7a1b      	ldrb	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <allocate_block+0x36>
	for (idx = 0; idx < NNOM_BLOCK_NUM; idx++)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3301      	adds	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b07      	cmp	r3, #7
 800411a:	d9ee      	bls.n	80040fa <allocate_block+0x12>
 800411c:	e000      	b.n	8004120 <allocate_block+0x38>
			break;
 800411e:	bf00      	nop
	}
	free = &list[idx];
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	60bb      	str	r3, [r7, #8]
	return free;
 8004132:	68bb      	ldr	r3, [r7, #8]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <release_block>:

static void release_block(nnom_mem_block_t *block)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	if (block->owners > 0)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	7a1b      	ldrb	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <release_block+0x1c>
		block->owners -= 1;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	7a1b      	ldrb	r3, [r3, #8]
 8004154:	3b01      	subs	r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	721a      	strb	r2, [r3, #8]
	if (block->owners == 0)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7a1b      	ldrb	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <release_block+0x2a>
		block->state = NNOM_BUF_EMPTY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	725a      	strb	r2, [r3, #9]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <release_input_mem>:

static void release_input_mem(nnom_layer_t *layer)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
	nnom_layer_io_t *in;
	// release all input of buf
	in = layer->in;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	60fb      	str	r3, [r7, #12]
	while (in != NULL)
 8004184:	e007      	b.n	8004196 <release_input_mem+0x20>
	{
		release_block(in->mem);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff ffd8 	bl	8004140 <release_block>
		in = in->aux;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	60fb      	str	r3, [r7, #12]
	while (in != NULL)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f4      	bne.n	8004186 <release_input_mem+0x10>
	}
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <release_comp_mem>:
static void release_comp_mem(nnom_layer_t *layer)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	// release computational buf if exist
	if (layer->comp != NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <release_comp_mem+0x1c>
	{
		release_block(layer->comp->mem);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ffc0 	bl	8004140 <release_block>
	}
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <nnom_hook_length>:
}


// return the length of the hook lists
size_t nnom_hook_length(nnom_layer_hook_t *hook)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	size_t num = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
	if (hook == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <nnom_hook_length+0x22>
		return 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	e009      	b.n	80041f2 <nnom_hook_length+0x2a>
	while (hook != NULL)
	{
		num++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3301      	adds	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
		hook = hook->next;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	607b      	str	r3, [r7, #4]
	while (hook != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f6      	bne.n	80041de <nnom_hook_length+0x16>
	}
	return num;
 80041f0:	68fb      	ldr	r3, [r7, #12]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <layer_shortcut_find_last>:

// The shortcut version of find_last() method. 
// must be used after compiling. 
static nnom_layer_t *layer_shortcut_find_last(nnom_layer_t *start)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
	nnom_layer_t *layer = start;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	60fb      	str	r3, [r7, #12]
	if (start == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <layer_shortcut_find_last+0x1c>
		return NULL;
 8004210:	2300      	movs	r3, #0
 8004212:	e007      	b.n	8004224 <layer_shortcut_find_last+0x26>
	while (layer->shortcut != NULL)
		layer = layer->shortcut;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	60fb      	str	r3, [r7, #12]
	while (layer->shortcut != NULL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f8      	bne.n	8004214 <layer_shortcut_find_last+0x16>
	return layer;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <layer_shortcut_add>:

// call while compiling.
// the shorcut is for fast running and fast iliterating.
// simply link every layer as a list. ordered by its runing order
static nnom_status_t layer_shortcut_add(nnom_layer_t *start, nnom_layer_t *curr)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
	nnom_layer_t *layer = start;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]
	// first one, return
	if (start == curr)
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d10b      	bne.n	800425e <layer_shortcut_add+0x2e>
	{
		return NN_SUCCESS;
 8004246:	2300      	movs	r3, #0
 8004248:	e011      	b.n	800426e <layer_shortcut_add+0x3e>
	}
	// find the end of the list, and add curr layer to the end of it.
	while (layer->shortcut != NULL)
	{
		// if the layer is already in shortcut list, tell upper.
		if (curr == layer)
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	429a      	cmp	r2, r3
 8004250:	d102      	bne.n	8004258 <layer_shortcut_add+0x28>
			return NN_ARGUMENT_ERROR;
 8004252:	f04f 33ff 	mov.w	r3, #4294967295
 8004256:	e00a      	b.n	800426e <layer_shortcut_add+0x3e>

		layer = layer->shortcut;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	60fb      	str	r3, [r7, #12]
	while (layer->shortcut != NULL)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f1      	bne.n	800424a <layer_shortcut_add+0x1a>
	}
	layer->shortcut = curr;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28

	return NN_SUCCESS;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <print_layer_info>:

// input the layer number,
static void print_layer_info(nnom_layer_t *layer, uint32_t layer_count)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
	size_t in_size = io_mem_size(layer->in);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fd68 	bl	8003d60 <io_mem_size>
 8004290:	6178      	str	r0, [r7, #20]
	size_t out_size = io_mem_size(layer->out);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fd62 	bl	8003d60 <io_mem_size>
 800429c:	6138      	str	r0, [r7, #16]
	size_t compsize;
	size_t mac = layer->stat.macc;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	60fb      	str	r3, [r7, #12]
	if (layer->comp != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <print_layer_info+0x40>
		compsize = shape_size(&layer->comp->shape);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 fb89 	bl	80059ca <shape_size>
 80042b8:	61f8      	str	r0, [r7, #28]
 80042ba:	e001      	b.n	80042c0 <print_layer_info+0x44>
	else
		compsize = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
	// names
	NNOM_LOG("#%-3d %-10s - ", layer_count, default_layer_names[layer->type]);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	7d1b      	ldrb	r3, [r3, #20]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4a4f      	ldr	r2, [pc, #316]	; (800440c <print_layer_info+0x190>)
 80042d0:	4413      	add	r3, r2
 80042d2:	461a      	mov	r2, r3
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	484e      	ldr	r0, [pc, #312]	; (8004410 <print_layer_info+0x194>)
 80042d8:	f004 ff7c 	bl	80091d4 <iprintf>
	// activations
	if (layer->actail != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <print_layer_info+0x7e>
		NNOM_LOG("%-8s - ", default_activation_names[layer->actail->type]);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	7b9b      	ldrb	r3, [r3, #14]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4a49      	ldr	r2, [pc, #292]	; (8004414 <print_layer_info+0x198>)
 80042ee:	4413      	add	r3, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4849      	ldr	r0, [pc, #292]	; (8004418 <print_layer_info+0x19c>)
 80042f4:	f004 ff6e 	bl	80091d4 <iprintf>
 80042f8:	e002      	b.n	8004300 <print_layer_info+0x84>
	else
		NNOM_LOG("         - ");
 80042fa:	4848      	ldr	r0, [pc, #288]	; (800441c <print_layer_info+0x1a0>)
 80042fc:	f004 ff6a 	bl	80091d4 <iprintf>

	NNOM_LOG("(");
 8004300:	2028      	movs	r0, #40	; 0x28
 8004302:	f004 ff7f 	bl	8009204 <putchar>
	for (int i = 0; i < 3; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	e01a      	b.n	8004342 <print_layer_info+0xc6>
	{
		if (layer->out->tensor->num_dim > i)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	7a1b      	ldrb	r3, [r3, #8]
 8004314:	461a      	mov	r2, r3
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4293      	cmp	r3, r2
 800431a:	da0c      	bge.n	8004336 <print_layer_info+0xba>
			NNOM_LOG("%4d,", layer->out->tensor->dim[i]);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	4619      	mov	r1, r3
 800432e:	483c      	ldr	r0, [pc, #240]	; (8004420 <print_layer_info+0x1a4>)
 8004330:	f004 ff50 	bl	80091d4 <iprintf>
 8004334:	e002      	b.n	800433c <print_layer_info+0xc0>
		else 
			NNOM_LOG("     ");
 8004336:	483b      	ldr	r0, [pc, #236]	; (8004424 <print_layer_info+0x1a8>)
 8004338:	f004 ff4c 	bl	80091d4 <iprintf>
	for (int i = 0; i < 3; i++)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	3301      	adds	r3, #1
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b02      	cmp	r3, #2
 8004346:	dde1      	ble.n	800430c <print_layer_info+0x90>
	}
	NNOM_LOG(")  ");
 8004348:	4837      	ldr	r0, [pc, #220]	; (8004428 <print_layer_info+0x1ac>)
 800434a:	f004 ff43 	bl	80091d4 <iprintf>
	
	// MAC operation
	if(mac == 0)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <print_layer_info+0xe0>
		NNOM_LOG("        ");
 8004354:	4835      	ldr	r0, [pc, #212]	; (800442c <print_layer_info+0x1b0>)
 8004356:	f004 ff3d 	bl	80091d4 <iprintf>
 800435a:	e04c      	b.n	80043f6 <print_layer_info+0x17a>
	else if (mac < 10000)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004362:	4293      	cmp	r3, r2
 8004364:	d804      	bhi.n	8004370 <print_layer_info+0xf4>
		NNOM_LOG("%7d ", mac);
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	4831      	ldr	r0, [pc, #196]	; (8004430 <print_layer_info+0x1b4>)
 800436a:	f004 ff33 	bl	80091d4 <iprintf>
 800436e:	e042      	b.n	80043f6 <print_layer_info+0x17a>
	else if (mac < 1000*1000)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a30      	ldr	r2, [pc, #192]	; (8004434 <print_layer_info+0x1b8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d809      	bhi.n	800438c <print_layer_info+0x110>
		NNOM_LOG("%6dk ", mac/1000);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4a2f      	ldr	r2, [pc, #188]	; (8004438 <print_layer_info+0x1bc>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	099b      	lsrs	r3, r3, #6
 8004382:	4619      	mov	r1, r3
 8004384:	482d      	ldr	r0, [pc, #180]	; (800443c <print_layer_info+0x1c0>)
 8004386:	f004 ff25 	bl	80091d4 <iprintf>
 800438a:	e034      	b.n	80043f6 <print_layer_info+0x17a>
	else if (mac < 1000*1000*1000)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <print_layer_info+0x1c4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d817      	bhi.n	80043c4 <print_layer_info+0x148>
		NNOM_LOG("%3d.%02dM ", mac/(1000*1000), mac%(1000*1000)/(10*1000)); // xxx.xx M
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4a2b      	ldr	r2, [pc, #172]	; (8004444 <print_layer_info+0x1c8>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	0c98      	lsrs	r0, r3, #18
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4b28      	ldr	r3, [pc, #160]	; (8004444 <print_layer_info+0x1c8>)
 80043a2:	fba3 1302 	umull	r1, r3, r3, r2
 80043a6:	0c9b      	lsrs	r3, r3, #18
 80043a8:	4927      	ldr	r1, [pc, #156]	; (8004448 <print_layer_info+0x1cc>)
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <print_layer_info+0x1d0>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	0b5b      	lsrs	r3, r3, #13
 80043b8:	461a      	mov	r2, r3
 80043ba:	4601      	mov	r1, r0
 80043bc:	4824      	ldr	r0, [pc, #144]	; (8004450 <print_layer_info+0x1d4>)
 80043be:	f004 ff09 	bl	80091d4 <iprintf>
 80043c2:	e018      	b.n	80043f6 <print_layer_info+0x17a>
	else
		NNOM_LOG("%3d.%02dG ", mac/(1000*1000*1000), mac%(1000*1000*1000)/(10*1000*1000)); // xxx.xx G
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	0a5b      	lsrs	r3, r3, #9
 80043c8:	4a22      	ldr	r2, [pc, #136]	; (8004454 <print_layer_info+0x1d8>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	09d8      	lsrs	r0, r3, #7
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	0a53      	lsrs	r3, r2, #9
 80043d4:	491f      	ldr	r1, [pc, #124]	; (8004454 <print_layer_info+0x1d8>)
 80043d6:	fba1 1303 	umull	r1, r3, r1, r3
 80043da:	09db      	lsrs	r3, r3, #7
 80043dc:	491e      	ldr	r1, [pc, #120]	; (8004458 <print_layer_info+0x1dc>)
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	4a1d      	ldr	r2, [pc, #116]	; (800445c <print_layer_info+0x1e0>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0d9b      	lsrs	r3, r3, #22
 80043ec:	461a      	mov	r2, r3
 80043ee:	4601      	mov	r1, r0
 80043f0:	481b      	ldr	r0, [pc, #108]	; (8004460 <print_layer_info+0x1e4>)
 80043f2:	f004 feef 	bl	80091d4 <iprintf>
	
	// memory 
	NNOM_LOG("(%6d,%6d,%6d)", in_size, out_size, compsize);
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	6979      	ldr	r1, [r7, #20]
 80043fc:	4819      	ldr	r0, [pc, #100]	; (8004464 <print_layer_info+0x1e8>)
 80043fe:	f004 fee9 	bl	80091d4 <iprintf>
}
 8004402:	bf00      	nop
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	08012c68 	.word	0x08012c68
 8004410:	0800afec 	.word	0x0800afec
 8004414:	08012dc4 	.word	0x08012dc4
 8004418:	0800affc 	.word	0x0800affc
 800441c:	0800b004 	.word	0x0800b004
 8004420:	0800b010 	.word	0x0800b010
 8004424:	0800b018 	.word	0x0800b018
 8004428:	0800b020 	.word	0x0800b020
 800442c:	0800b024 	.word	0x0800b024
 8004430:	0800b030 	.word	0x0800b030
 8004434:	000f423f 	.word	0x000f423f
 8004438:	10624dd3 	.word	0x10624dd3
 800443c:	0800b038 	.word	0x0800b038
 8004440:	3b9ac9ff 	.word	0x3b9ac9ff
 8004444:	431bde83 	.word	0x431bde83
 8004448:	000f4240 	.word	0x000f4240
 800444c:	d1b71759 	.word	0xd1b71759
 8004450:	0800b040 	.word	0x0800b040
 8004454:	00044b83 	.word	0x00044b83
 8004458:	3b9aca00 	.word	0x3b9aca00
 800445c:	6b5fca6b 	.word	0x6b5fca6b
 8004460:	0800b04c 	.word	0x0800b04c
 8004464:	0800b058 	.word	0x0800b058

08004468 <print_memory_block_info>:

static void print_memory_block_info(nnom_mem_block_t *block_pool)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	// show the memory blocks's lifetime (number of owners)
	NNOM_LOG("   ");
 8004470:	481b      	ldr	r0, [pc, #108]	; (80044e0 <print_memory_block_info+0x78>)
 8004472:	f004 feaf 	bl	80091d4 <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e026      	b.n	80044ca <print_memory_block_info+0x62>
	{
		if (i % 4 == 0)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <print_memory_block_info+0x24>
			NNOM_LOG(" ");
 8004486:	2020      	movs	r0, #32
 8004488:	f004 febc 	bl	8009204 <putchar>
		if (block_pool[i].owners)
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4613      	mov	r3, r2
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	461a      	mov	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4413      	add	r3, r2
 800449c:	7a1b      	ldrb	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <print_memory_block_info+0x56>
			NNOM_LOG("%d ", block_pool[i].owners);
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	461a      	mov	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	7a1b      	ldrb	r3, [r3, #8]
 80044b4:	4619      	mov	r1, r3
 80044b6:	480b      	ldr	r0, [pc, #44]	; (80044e4 <print_memory_block_info+0x7c>)
 80044b8:	f004 fe8c 	bl	80091d4 <iprintf>
 80044bc:	e002      	b.n	80044c4 <print_memory_block_info+0x5c>
		else
			NNOM_LOG("- ");
 80044be:	480a      	ldr	r0, [pc, #40]	; (80044e8 <print_memory_block_info+0x80>)
 80044c0:	f004 fe88 	bl	80091d4 <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b07      	cmp	r3, #7
 80044ce:	ddd5      	ble.n	800447c <print_memory_block_info+0x14>
	}
	NNOM_LOG("\n");
 80044d0:	200a      	movs	r0, #10
 80044d2:	f004 fe97 	bl	8009204 <putchar>
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	0800b068 	.word	0x0800b068
 80044e4:	0800b06c 	.word	0x0800b06c
 80044e8:	0800b070 	.word	0x0800b070

080044ec <compile_layers>:
// This function will return when
// 	1) if the layer has multiple input but not all of them are filled by last layers. returns NN_MORE_TODO
//	2) if all the output hooked are nested called. return NN_SUCCESS
//	3) if the layer is output layer. return NN_SUCCESS
nnom_status_t compile_layers(nnom_layer_t *start, nnom_mem_block_t *block_pool, uint32_t *layer_count)
{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b08f      	sub	sp, #60	; 0x3c
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
	size_t mem_size = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
	nnom_layer_t *layer = start;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34
	nnom_layer_hook_t *hook;

	nnom_mem_block_t *in_blk;
	nnom_mem_block_t *out_blk;
	
	uint32_t local_layer_count = 1;
 8004500:	2301      	movs	r3, #1
 8004502:	617b      	str	r3, [r7, #20]
	
	if(layer_count == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <compile_layers+0x24>
		layer_count = &local_layer_count;
 800450a:	f107 0314 	add.w	r3, r7, #20
 800450e:	607b      	str	r3, [r7, #4]

	in = layer->in;
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	633b      	str	r3, [r7, #48]	; 0x30
	out = layer->out;
 8004516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (layer)
 800451c:	e1a3      	b.n	8004866 <compile_layers+0x37a>
	{
		// check input
		in = layer->in;
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	633b      	str	r3, [r7, #48]	; 0x30

		// check if this layer is the input layer
		// the first layer has no input hooked, and the io is not initialized
		if (in->hook.io == NULL)
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d130      	bne.n	800458e <compile_layers+0xa2>
		{
			// if the input is not initalized
			if (in->mem == NULL)
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d12f      	bne.n	8004594 <compile_layers+0xa8>
			{
				in_blk = allocate_block(block_pool);
 8004534:	68b8      	ldr	r0, [r7, #8]
 8004536:	f7ff fdd7 	bl	80040e8 <allocate_block>
 800453a:	6238      	str	r0, [r7, #32]
				in_blk->owners += 1; // add 1
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	7a1b      	ldrb	r3, [r3, #8]
 8004540:	3301      	adds	r3, #1
 8004542:	b2da      	uxtb	r2, r3
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	721a      	strb	r2, [r3, #8]
				mem_size = nnom_alignto(tensor_size(in->tensor), 4);
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4618      	mov	r0, r3
 800454e:	f001 fdd0 	bl	80060f2 <tensor_size>
 8004552:	4603      	mov	r3, r0
 8004554:	2104      	movs	r1, #4
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fc20 	bl	8003d9c <nnom_alignto>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24
				in_blk->size = mem_size > in_blk->size ? mem_size : in_blk->size;
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	429a      	cmp	r2, r3
 8004566:	bf38      	it	cc
 8004568:	461a      	movcc	r2, r3
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	605a      	str	r2, [r3, #4]
				// set the blk to the layer IO
				in->mem = in_blk;
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	6a3a      	ldr	r2, [r7, #32]
 8004572:	611a      	str	r2, [r3, #16]
				in->mem->state = NNOM_BUF_FILLED; //mark input buff filled
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2201      	movs	r2, #1
 800457a:	725a      	strb	r2, [r3, #9]
 800457c:	e00a      	b.n	8004594 <compile_layers+0xa8>
		else
		{
			// get the mem for every input from its hooked output. 
			while (in != NULL)
			{
				in->mem = in->hook.io->mem;
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	611a      	str	r2, [r3, #16]
				in = in->aux;
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	633b      	str	r3, [r7, #48]	; 0x30
			while (in != NULL)
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f4      	bne.n	800457e <compile_layers+0x92>
			}
		}

		// if there are mutiple inputs, wait utill all blocks filled
		in = layer->in;
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
		if (in != NULL && in->aux != NULL)
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	2b00      	cmp	r3, #0
 800459e:	d016      	beq.n	80045ce <compile_layers+0xe2>
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d012      	beq.n	80045ce <compile_layers+0xe2>
		{
			while (in != NULL)
 80045a8:	e00e      	b.n	80045c8 <compile_layers+0xdc>
			{
				// if the mem (of its hooked output) is not allocated or is not filled. 
				// It not the time to run the layer yet, return and waits for next nested called. 
				if (in->mem == NULL || in->mem->state != NNOM_BUF_FILLED)
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <compile_layers+0xd0>
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	7a5b      	ldrb	r3, [r3, #9]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d002      	beq.n	80045c2 <compile_layers+0xd6>
					return NN_MORE_TODO;
 80045bc:	f06f 0307 	mvn.w	r3, #7
 80045c0:	e156      	b.n	8004870 <compile_layers+0x384>
				in = in->aux;
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	633b      	str	r3, [r7, #48]	; 0x30
			while (in != NULL)
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1ed      	bne.n	80045aa <compile_layers+0xbe>
		// 4. allocate output buffer for each output module. 
		// 5.1 if there is only one layer hooked to the output. we dont use nested call, but continue in this big while loop. 
		// 5.2 nested call the hooked output layers (if there are > 1 hooked to the output of this layer)

		// 1. calculate output shape while all inputs are filled
		layer->build(layer);
 80045ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045d4:	4798      	blx	r3

		// 2. add to shortcut list. 
		layer_shortcut_add(start, layer);
 80045d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fe29 	bl	8004230 <layer_shortcut_add>

		// 3. assign for computational buf
		if (layer->comp != NULL)
 80045de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02d      	beq.n	8004642 <compile_layers+0x156>
		//if (shape_size(&layer->comp->shape) > 0)
		{
			layer->comp->mem = allocate_block(block_pool);
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	68dc      	ldr	r4, [r3, #12]
 80045ea:	68b8      	ldr	r0, [r7, #8]
 80045ec:	f7ff fd7c 	bl	80040e8 <allocate_block>
 80045f0:	4603      	mov	r3, r0
 80045f2:	6023      	str	r3, [r4, #0]
			layer->comp->mem->owners += 1; // add us to buffer users
 80045f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	7a1a      	ldrb	r2, [r3, #8]
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3201      	adds	r2, #1
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	721a      	strb	r2, [r3, #8]
			layer->comp->mem->state = NNOM_BUF_FILLED;
 8004608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2201      	movs	r2, #1
 8004610:	725a      	strb	r2, [r3, #9]
			// record maximum mem size in this block
			mem_size = nnom_alignto(shape_size(&layer->comp->shape), 4);
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	3304      	adds	r3, #4
 8004618:	4618      	mov	r0, r3
 800461a:	f001 f9d6 	bl	80059ca <shape_size>
 800461e:	4603      	mov	r3, r0
 8004620:	2104      	movs	r1, #4
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fbba 	bl	8003d9c <nnom_alignto>
 8004628:	6278      	str	r0, [r7, #36]	; 0x24
			layer->comp->mem->size =
				mem_size > layer->comp->mem->size ? mem_size : layer->comp->mem->size;
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
			layer->comp->mem->size =
 8004632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
				mem_size > layer->comp->mem->size ? mem_size : layer->comp->mem->size;
 8004638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463a:	428a      	cmp	r2, r1
 800463c:	bf38      	it	cc
 800463e:	460a      	movcc	r2, r1
			layer->comp->mem->size =
 8004640:	605a      	str	r2, [r3, #4]
		}

		// print current layer's info. 
		// show names, activations, mem block size
		print_layer_info(layer, (*layer_count)++);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6011      	str	r1, [r2, #0]
 800464c:	4619      	mov	r1, r3
 800464e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004650:	f7ff fe14 	bl	800427c <print_layer_info>

		// 4. allocate output buffer for each output module. 
		// check output
		if (layer->out == NULL)
 8004654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <compile_layers+0x174>
			return NN_SUCCESS;
 800465c:	2300      	movs	r3, #0
 800465e:	e107      	b.n	8004870 <compile_layers+0x384>

		// 5.1 if there is only one layer hooked to the output. we dont use nested call, but continue in this big while loop. 
		// if the layer is Single Output, continue the loop directly. To reduce nested level
		if (layer->out->aux == NULL && layer->out->hook.next == NULL)
 8004660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d14d      	bne.n	8004706 <compile_layers+0x21a>
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d148      	bne.n	8004706 <compile_layers+0x21a>
		{
			// single buf layer.
			if (layer->in->type == LAYER_BUF_NULL || layer->out->type == LAYER_BUF_NULL)
 8004674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	7e1b      	ldrb	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <compile_layers+0x19c>
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	7e1b      	ldrb	r3, [r3, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10c      	bne.n	80046a2 <compile_layers+0x1b6>
			{
				// pass to next layer directly, like we never touch the buffer(dont change life-time)
				layer->out->mem = layer->in->mem;
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	6912      	ldr	r2, [r2, #16]
 8004692:	611a      	str	r2, [r3, #16]
				
				// print memory before release
				print_memory_block_info(block_pool);
 8004694:	68b8      	ldr	r0, [r7, #8]
 8004696:	f7ff fee7 	bl	8004468 <print_memory_block_info>
				// computational buf
				release_comp_mem(layer);
 800469a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800469c:	f7ff fd82 	bl	80041a4 <release_comp_mem>
			if (layer->in->type == LAYER_BUF_NULL || layer->out->type == LAYER_BUF_NULL)
 80046a0:	e0d5      	b.n	800484e <compile_layers+0x362>
			}
			// not a single buf layer
			else
			{
				// allocate mem block for the output
				out_blk = allocate_block(block_pool);
 80046a2:	68b8      	ldr	r0, [r7, #8]
 80046a4:	f7ff fd20 	bl	80040e8 <allocate_block>
 80046a8:	61f8      	str	r0, [r7, #28]
				if (out_blk == NULL)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d102      	bne.n	80046b6 <compile_layers+0x1ca>
					return NN_NO_MEMORY;
 80046b0:	f06f 0306 	mvn.w	r3, #6
 80046b4:	e0dc      	b.n	8004870 <compile_layers+0x384>
				// set the life time, only one hooked layer, so the life time is 1
				out_blk->owners = 1;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	2201      	movs	r2, #1
 80046ba:	721a      	strb	r2, [r3, #8]
				out_blk->state = NNOM_BUF_FILLED; // marked filled
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2201      	movs	r2, #1
 80046c0:	725a      	strb	r2, [r3, #9]
				// record maximum mem size in this block
				mem_size = nnom_alignto(tensor_size(layer->out->tensor), 4);
 80046c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 fd12 	bl	80060f2 <tensor_size>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2104      	movs	r1, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fb62 	bl	8003d9c <nnom_alignto>
 80046d8:	6278      	str	r0, [r7, #36]	; 0x24
				out_blk->size = mem_size > out_blk->size ? mem_size : out_blk->size;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	429a      	cmp	r2, r3
 80046e2:	bf38      	it	cc
 80046e4:	461a      	movcc	r2, r3
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	605a      	str	r2, [r3, #4]
				// set the blk to the layer IO
				layer->out->mem = out_blk;
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	611a      	str	r2, [r3, #16]

				// once we allocate for output, we can now release input and comput.
				// print memory before release
				print_memory_block_info(block_pool);
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f7ff feb8 	bl	8004468 <print_memory_block_info>
				// release input mem and comp mem
				release_input_mem(layer);
 80046f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046fa:	f7ff fd3c 	bl	8004176 <release_input_mem>
				release_comp_mem(layer);
 80046fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004700:	f7ff fd50 	bl	80041a4 <release_comp_mem>
			if (layer->in->type == LAYER_BUF_NULL || layer->out->type == LAYER_BUF_NULL)
 8004704:	e0a3      	b.n	800484e <compile_layers+0x362>
		}
		// Multiple output and/or mutiple hooks
		else
		{
			// single buf layer will use the input buf for the first output
			if (layer->in->type == LAYER_BUF_NULL || layer->out->type == LAYER_BUF_NULL)
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	7e1b      	ldrb	r3, [r3, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d004      	beq.n	800471a <compile_layers+0x22e>
 8004710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	7e1b      	ldrb	r3, [r3, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d125      	bne.n	8004766 <compile_layers+0x27a>
			{
				// we dont allocate new buf, but use the input
				// the ownership will be set to next layer later
				layer->out->mem = layer->in->mem;
 800471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	6912      	ldr	r2, [r2, #16]
 8004724:	611a      	str	r2, [r3, #16]
				layer->out->mem->owners += nnom_hook_length(&layer->out->hook); // set the mem lifetime.// test
 8004726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fd4c 	bl	80041c8 <nnom_hook_length>
 8004730:	4602      	mov	r2, r0
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	7a19      	ldrb	r1, [r3, #8]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	440a      	add	r2, r1
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	721a      	strb	r2, [r3, #8]
				layer->out->mem->state = NNOM_BUF_FILLED;
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2201      	movs	r2, #1
 8004750:	725a      	strb	r2, [r3, #9]
				
				// print memory before release
				print_memory_block_info(block_pool);
 8004752:	68b8      	ldr	r0, [r7, #8]
 8004754:	f7ff fe88 	bl	8004468 <print_memory_block_info>
				// release computational buff and input buffer 
				release_input_mem(layer);
 8004758:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800475a:	f7ff fd0c 	bl	8004176 <release_input_mem>
				release_comp_mem(layer);
 800475e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004760:	f7ff fd20 	bl	80041a4 <release_comp_mem>
 8004764:	e045      	b.n	80047f2 <compile_layers+0x306>
			}
			// mutiple buf layer. (I/O use different memory blocks)
			else
			{
				// allocate for every output
				out = layer->out;
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
				while (out != NULL && out->hook.io != NULL) // the output layer have no output IO
 800476c:	e031      	b.n	80047d2 <compile_layers+0x2e6>
				{
					// assign new block
					out->mem = allocate_block(block_pool);
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	f7ff fcba 	bl	80040e8 <allocate_block>
 8004774:	4602      	mov	r2, r0
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	611a      	str	r2, [r3, #16]
					if (out->mem == NULL)
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <compile_layers+0x29c>
						return NN_NO_MEMORY;
 8004782:	f06f 0306 	mvn.w	r3, #6
 8004786:	e073      	b.n	8004870 <compile_layers+0x384>
					// record maximum mem size in this block
					mem_size = nnom_alignto(tensor_size(out->tensor), 4);
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4618      	mov	r0, r3
 800478e:	f001 fcb0 	bl	80060f2 <tensor_size>
 8004792:	4603      	mov	r3, r0
 8004794:	2104      	movs	r1, #4
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fb00 	bl	8003d9c <nnom_alignto>
 800479c:	6278      	str	r0, [r7, #36]	; 0x24
					out->mem->size = mem_size > out->mem->size ? mem_size : out->mem->size;
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	428a      	cmp	r2, r1
 80047ac:	bf38      	it	cc
 80047ae:	460a      	movcc	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
					// keep the block untill the last hooked layer is called.
					out->mem->owners = nnom_hook_length(&out->hook); // set lifetime of the buffer = the num of hooked layers
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fd07 	bl	80041c8 <nnom_hook_length>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	721a      	strb	r2, [r3, #8]
					out->mem->state = NNOM_BUF_FILLED;
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2201      	movs	r2, #1
 80047ca:	725a      	strb	r2, [r3, #9]

					out = out->aux;
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
				while (out != NULL && out->hook.io != NULL) // the output layer have no output IO
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <compile_layers+0x2f4>
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1c6      	bne.n	800476e <compile_layers+0x282>
				}
				// once we allocate for output, we can now release input and comput (or reduce the lifetime).
				// print memory before release
				print_memory_block_info(block_pool);
 80047e0:	68b8      	ldr	r0, [r7, #8]
 80047e2:	f7ff fe41 	bl	8004468 <print_memory_block_info>
				// release input mem and comp mem
				release_input_mem(layer);
 80047e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047e8:	f7ff fcc5 	bl	8004176 <release_input_mem>
				release_comp_mem(layer);
 80047ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047ee:	f7ff fcd9 	bl	80041a4 <release_comp_mem>
			}

			// 5.12 nested call the hooked output layers (if there are > 1 hooked to the output of this layer)
			// while all the out module(s) receive a memory block, it is ready to be sent to other layers.
			// iterate all hooked layers in each out module.
			out = layer->out;
 80047f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (out != NULL)
 80047f8:	e024      	b.n	8004844 <compile_layers+0x358>
			{
				// nested call hooked layer one by one.
				hook = &out->hook;
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	62bb      	str	r3, [r7, #40]	; 0x28
				while (hook != NULL && hook->io != NULL)
 80047fe:	e017      	b.n	8004830 <compile_layers+0x344>
				{
					nnom_status_t result;
					// test, add shorcut before nested call
					// put the "hooked layer" to the END of the shortcut list, which STARTed at current "layer"
					// if the layer is already in the list, then it is already compiled by other layer's nested call, returns NN_ARGUMENT_ERROR
					result = layer_shortcut_add(layer, hook->io->owner);
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	4619      	mov	r1, r3
 8004808:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800480a:	f7ff fd11 	bl	8004230 <layer_shortcut_add>
 800480e:	4603      	mov	r3, r0
 8004810:	76fb      	strb	r3, [r7, #27]
					if (result == NN_SUCCESS)
 8004812:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d107      	bne.n	800482a <compile_layers+0x33e>
						// nested call only when the layer hasnt been compiled
						compile_layers(hook->io->owner, block_pool, layer_count);
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fe61 	bl	80044ec <compile_layers>
					// next hook
					hook = hook->next;
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
				while (hook != NULL && hook->io != NULL)
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <compile_layers+0x352>
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e0      	bne.n	8004800 <compile_layers+0x314>
				}

				// next io
				out = out->aux;
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (out != NULL)
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1d7      	bne.n	80047fa <compile_layers+0x30e>
			}

			// when all the out is called. this should stop here.
			// once enter mutiple output iterating, the function will always return.
			// because at least one of the nested called by this function will run till the end of the model.
			return NN_SUCCESS;
 800484a:	2300      	movs	r3, #0
 800484c:	e010      	b.n	8004870 <compile_layers+0x384>
		}
		// Multiple output ended.

		// return if this is output layer.
		// the output layer's output io is hooked to nothing.
		if (layer->out->hook.io == NULL)
 800484e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <compile_layers+0x370>
			return NN_SUCCESS;
 8004858:	2300      	movs	r3, #0
 800485a:	e009      	b.n	8004870 <compile_layers+0x384>

		// single output layer, this function continue to analyse next layer.
		// switch to next layer.
		layer = layer->out->hook.io->owner;
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
	while (layer)
 8004866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004868:	2b00      	cmp	r3, #0
 800486a:	f47f ae58 	bne.w	800451e <compile_layers+0x32>
	}

	// seems to be redundants
	return NN_SUCCESS;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	373c      	adds	r7, #60	; 0x3c
 8004874:	46bd      	mov	sp, r7
 8004876:	bd90      	pop	{r4, r7, pc}

08004878 <mem_analysis_result>:

size_t mem_analysis_result(nnom_model_t *m)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	uint32_t index;
	uint32_t total_mem = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	60bb      	str	r3, [r7, #8]
	NNOM_LOG("Memory cost by each block:\n ");
 8004884:	4817      	ldr	r0, [pc, #92]	; (80048e4 <mem_analysis_result+0x6c>)
 8004886:	f004 fca5 	bl	80091d4 <iprintf>
	// print size of memory blocks
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e01c      	b.n	80048ca <mem_analysis_result+0x52>
	{
		total_mem += m->blocks[index].size;
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4613      	mov	r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3324      	adds	r3, #36	; 0x24
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4413      	add	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
		NNOM_LOG("blk_%d:%d  ", index, m->blocks[index].size);
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4613      	mov	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	3324      	adds	r3, #36	; 0x24
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68f9      	ldr	r1, [r7, #12]
 80048be:	480a      	ldr	r0, [pc, #40]	; (80048e8 <mem_analysis_result+0x70>)
 80048c0:	f004 fc88 	bl	80091d4 <iprintf>
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3301      	adds	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b07      	cmp	r3, #7
 80048ce:	d9df      	bls.n	8004890 <mem_analysis_result+0x18>
	}
	// size of total memory cost by networks buffer
	NNOM_LOG("\n Total memory cost by network buffers: %d bytes\n", total_mem);
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	4806      	ldr	r0, [pc, #24]	; (80048ec <mem_analysis_result+0x74>)
 80048d4:	f004 fc7e 	bl	80091d4 <iprintf>

	return total_mem;
 80048d8:	68bb      	ldr	r3, [r7, #8]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	0800b074 	.word	0x0800b074
 80048e8:	0800b094 	.word	0x0800b094
 80048ec:	0800b0a0 	.word	0x0800b0a0

080048f0 <block_mem_set>:

// allocate memory, and set them to each block according to the mem analysis results.
nnom_status_t block_mem_set(nnom_model_t *m, void *buf)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
	uint32_t index;
	uint32_t mem_offset = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60bb      	str	r3, [r7, #8]

	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e025      	b.n	8004950 <block_mem_set+0x60>
	{
		if (m->blocks[index].size == 0)
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4613      	mov	r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	3324      	adds	r3, #36	; 0x24
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d01e      	beq.n	8004958 <block_mem_set+0x68>
			break;
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	18d1      	adds	r1, r2, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4613      	mov	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4403      	add	r3, r0
 800492e:	3320      	adds	r3, #32
 8004930:	6019      	str	r1, [r3, #0]
		mem_offset += m->blocks[index].size;
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	3324      	adds	r3, #36	; 0x24
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	4413      	add	r3, r2
 8004948:	60bb      	str	r3, [r7, #8]
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b07      	cmp	r3, #7
 8004954:	d9d6      	bls.n	8004904 <block_mem_set+0x14>
 8004956:	e000      	b.n	800495a <block_mem_set+0x6a>
			break;
 8004958:	bf00      	nop
	}
	return NN_SUCCESS;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <tensor_mem_set>:

// experimental: this function is temporary use to 
// assign memory blk which has assigned to input and output to the corresponding tensor
nnom_status_t tensor_mem_set(nnom_model_t *m)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	nnom_layer_t *layer = m->head;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]
	nnom_layer_io_t *io;
	while (layer)
 8004976:	e022      	b.n	80049be <tensor_mem_set+0x56>
	{
		io = layer->in;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	60bb      	str	r3, [r7, #8]
		while (io)
 800497e:	e008      	b.n	8004992 <tensor_mem_set+0x2a>
		{
			io->tensor->p_data = io->mem->blk;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	601a      	str	r2, [r3, #0]
			io = io->aux;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	60bb      	str	r3, [r7, #8]
		while (io)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f3      	bne.n	8004980 <tensor_mem_set+0x18>
		}

		io = layer->out;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	60bb      	str	r3, [r7, #8]
		while (io)
 800499e:	e008      	b.n	80049b2 <tensor_mem_set+0x4a>
		{
			io->tensor->p_data = io->mem->blk;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	601a      	str	r2, [r3, #0]
			io = io->aux;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60bb      	str	r3, [r7, #8]
		while (io)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f3      	bne.n	80049a0 <tensor_mem_set+0x38>
		}

		layer = layer->shortcut;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	60fb      	str	r3, [r7, #12]
	while (layer)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1d9      	bne.n	8004978 <tensor_mem_set+0x10>
	}
}
 80049c4:	bf00      	nop
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <set_tailed_activation>:

// this function has to be used after memory is assigned to the layers.
// it means it has to be call after compile_model() as well.
// it simply get the output buffer and set the buffer to tailed activation of each layer..
nnom_status_t set_tailed_activation(nnom_model_t *m)
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	NNOM_NULL_CHECK(m);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d105      	bne.n	80049ee <set_tailed_activation+0x1a>
 80049e2:	4827      	ldr	r0, [pc, #156]	; (8004a80 <set_tailed_activation+0xac>)
 80049e4:	f004 fc7e 	bl	80092e4 <puts>
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	e044      	b.n	8004a78 <set_tailed_activation+0xa4>
	NNOM_NULL_CHECK(m->head);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d105      	bne.n	8004a02 <set_tailed_activation+0x2e>
 80049f6:	4822      	ldr	r0, [pc, #136]	; (8004a80 <set_tailed_activation+0xac>)
 80049f8:	f004 fc74 	bl	80092e4 <puts>
 80049fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004a00:	e03a      	b.n	8004a78 <set_tailed_activation+0xa4>
	nnom_layer_t *layer = m->head;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

	// if tailed activation is exist, set it to the output.
	while (layer)
 8004a08:	e030      	b.n	8004a6c <set_tailed_activation+0x98>
	{
		if (layer->actail != NULL)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d025      	beq.n	8004a5e <set_tailed_activation+0x8a>
		{
			layer->actail->data = layer->out->tensor->p_data;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
			layer->actail->size = tensor_size(layer->out->tensor);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691c      	ldr	r4, [r3, #16]
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f001 fb61 	bl	80060f2 <tensor_size>
 8004a30:	4603      	mov	r3, r0
 8004a32:	60a3      	str	r3, [r4, #8]
			// if actail has its own shifting, then leave it as it is. otherwise set it to same as output
			if(layer->actail->qfmt.m == 0 && layer->actail->qfmt.n == 0)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10e      	bne.n	8004a5e <set_tailed_activation+0x8a>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d108      	bne.n	8004a5e <set_tailed_activation+0x8a>
				layer->actail->qfmt = layer->out->tensor->qfmt;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	330c      	adds	r3, #12
 8004a58:	3209      	adds	r2, #9
 8004a5a:	8812      	ldrh	r2, [r2, #0]
 8004a5c:	801a      	strh	r2, [r3, #0]
		}
		if (layer->shortcut == NULL)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <set_tailed_activation+0xa0>
			break;
		layer = layer->shortcut;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	60fb      	str	r3, [r7, #12]
	while (layer)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1cb      	bne.n	8004a0a <set_tailed_activation+0x36>
 8004a72:	e000      	b.n	8004a76 <set_tailed_activation+0xa2>
			break;
 8004a74:	bf00      	nop
	}

	return NN_SUCCESS;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}
 8004a80:	0800b0d4 	.word	0x0800b0d4

08004a84 <model_set_ops>:

// get total ops
static uint64_t model_set_ops(nnom_model_t *m)
{
 8004a84:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
	nnom_layer_t *layer;
	uint64_t total_ops = 0;
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	f04f 0400 	mov.w	r4, #0
 8004a96:	e9c7 3402 	strd	r3, r4, [r7, #8]
	layer = m->head;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	617b      	str	r3, [r7, #20]
	while (layer)
 8004aa0:	e013      	b.n	8004aca <model_set_ops+0x46>
	{
		total_ops += layer->stat.macc;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	469b      	mov	fp, r3
 8004aa8:	f04f 0c00 	mov.w	ip, #0
 8004aac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ab0:	eb1b 0301 	adds.w	r3, fp, r1
 8004ab4:	eb4c 0402 	adc.w	r4, ip, r2
 8004ab8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if (layer->shortcut == NULL)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d006      	beq.n	8004ad2 <model_set_ops+0x4e>
			break;
		layer = layer->shortcut;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	617b      	str	r3, [r7, #20]
	while (layer)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e8      	bne.n	8004aa2 <model_set_ops+0x1e>
 8004ad0:	e000      	b.n	8004ad4 <model_set_ops+0x50>
			break;
 8004ad2:	bf00      	nop
	}
	m->total_ops = total_ops;
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return total_ops;
 8004adc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8004aec:	4770      	bx	lr
	...

08004af0 <model_compile>:

// a compiler can be use for both sequencial / functional model.
// the output layer is optional only when the model is single output model
// in this case, if output = NULL, the compile can find it by its own. 
nnom_status_t model_compile(nnom_model_t *m, nnom_layer_t *input, nnom_layer_t *output)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
	size_t buf_size;
	uint8_t *buf;
	uint32_t layer_num = 1;
 8004afc:	2301      	movs	r3, #1
 8004afe:	613b      	str	r3, [r7, #16]
	uint32_t time = nnom_ms_get();
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]
	
	NNOM_NULL_CHECK(m);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d105      	bne.n	8004b16 <model_compile+0x26>
 8004b0a:	483c      	ldr	r0, [pc, #240]	; (8004bfc <model_compile+0x10c>)
 8004b0c:	f004 fbea 	bl	80092e4 <puts>
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295
 8004b14:	e06d      	b.n	8004bf2 <model_compile+0x102>
	NNOM_NULL_CHECK(input);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <model_compile+0x38>
 8004b1c:	4837      	ldr	r0, [pc, #220]	; (8004bfc <model_compile+0x10c>)
 8004b1e:	f004 fbe1 	bl	80092e4 <puts>
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	e064      	b.n	8004bf2 <model_compile+0x102>

	m->head = input;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	601a      	str	r2, [r3, #0]
	m->tail = output;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	605a      	str	r2, [r3, #4]
	if (output == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <model_compile+0x56>
		m->tail = find_last(input);
 8004b3a:	68b8      	ldr	r0, [r7, #8]
 8004b3c:	f7ff f953 	bl	8003de6 <find_last>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	605a      	str	r2, [r3, #4]

	NNOM_LOG("\nNNoM version %d.%d.%d\n", NNOM_MAJORVERSION, NNOM_SUBVERSION, NNOM_REVISION);
 8004b46:	2300      	movs	r3, #0
 8004b48:	2203      	movs	r2, #3
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	482c      	ldr	r0, [pc, #176]	; (8004c00 <model_compile+0x110>)
 8004b4e:	f004 fb41 	bl	80091d4 <iprintf>
	NNOM_LOG("Start compiling model...\n");
 8004b52:	482c      	ldr	r0, [pc, #176]	; (8004c04 <model_compile+0x114>)
 8004b54:	f004 fbc6 	bl	80092e4 <puts>
	NNOM_LOG("Layer(#)         Activation    output shape    ops(MAC)   mem(in, out, buf)      mem blk lifetime\n");
 8004b58:	482b      	ldr	r0, [pc, #172]	; (8004c08 <model_compile+0x118>)
 8004b5a:	f004 fbc3 	bl	80092e4 <puts>
	NNOM_LOG("-------------------------------------------------------------------------------------------------\n");
 8004b5e:	482b      	ldr	r0, [pc, #172]	; (8004c0c <model_compile+0x11c>)
 8004b60:	f004 fbc0 	bl	80092e4 <puts>

	// compile layers, started from list head, nested run till the end of models
	compile_layers(m->head, m->blocks, &layer_num);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3320      	adds	r3, #32
 8004b6c:	f107 0210 	add.w	r2, r7, #16
 8004b70:	4619      	mov	r1, r3
 8004b72:	f7ff fcbb 	bl	80044ec <compile_layers>

	NNOM_LOG("-------------------------------------------------------------------------------------------------\n");
 8004b76:	4825      	ldr	r0, [pc, #148]	; (8004c0c <model_compile+0x11c>)
 8004b78:	f004 fbb4 	bl	80092e4 <puts>

	// if model's tail is not the last layer which built by user.
	if (output != layer_shortcut_find_last(input))
 8004b7c:	68b8      	ldr	r0, [r7, #8]
 8004b7e:	f7ff fb3e 	bl	80041fe <layer_shortcut_find_last>
 8004b82:	4602      	mov	r2, r0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <model_compile+0xc2>
		NNOM_LOG("WARNING: model returned at #%d %s layer, but this layer is not the end of shortcut list \n",
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff f942 	bl	8003e1a <find_index>
 8004b96:	4601      	mov	r1, r0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	7d1b      	ldrb	r3, [r3, #20]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <model_compile+0x120>)
 8004ba8:	4413      	add	r3, r2
 8004baa:	461a      	mov	r2, r3
 8004bac:	4819      	ldr	r0, [pc, #100]	; (8004c14 <model_compile+0x124>)
 8004bae:	f004 fb11 	bl	80091d4 <iprintf>
			find_index(m->head, output), default_layer_names[output->type]);

	// get the total (aligned) memory requirement
	buf_size = mem_analysis_result(m);
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff fe60 	bl	8004878 <mem_analysis_result>
 8004bb8:	61b8      	str	r0, [r7, #24]

	// allocate one big memory block
	buf = nnom_mem(buf_size);
 8004bba:	69b8      	ldr	r0, [r7, #24]
 8004bbc:	f7ff f8ac 	bl	8003d18 <nnom_mem>
 8004bc0:	6178      	str	r0, [r7, #20]
	if (buf == NULL)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <model_compile+0xe6>
	{
		NNOM_LOG("ERROR: No enough memory for network buffer, required %d bytes\n", buf_size);
 8004bc8:	69b9      	ldr	r1, [r7, #24]
 8004bca:	4813      	ldr	r0, [pc, #76]	; (8004c18 <model_compile+0x128>)
 8004bcc:	f004 fb02 	bl	80091d4 <iprintf>
		return NN_NO_MEMORY;
 8004bd0:	f06f 0306 	mvn.w	r3, #6
 8004bd4:	e00d      	b.n	8004bf2 <model_compile+0x102>
	}

	// split the memory for every memory block
	block_mem_set(m, buf);
 8004bd6:	6979      	ldr	r1, [r7, #20]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff fe89 	bl	80048f0 <block_mem_set>

	// experimental: set memory from io to the io tensor 
	tensor_mem_set(m);
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff fec2 	bl	8004968 <tensor_mem_set>

	// finally set the output buff to tailed activation on each layer
	set_tailed_activation(m);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff fef5 	bl	80049d4 <set_tailed_activation>

	// calculate the total operations and set it to the model
	model_set_ops(m);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff ff4a 	bl	8004a84 <model_set_ops>
	
	// print the time. 
	if(nnom_ms_get())
		NNOM_LOG("Compling done in %d ms\n", nnom_ms_get() - time);

	return NN_SUCCESS;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	0800b0d4 	.word	0x0800b0d4
 8004c00:	0800b0e8 	.word	0x0800b0e8
 8004c04:	0800b100 	.word	0x0800b100
 8004c08:	0800b11c 	.word	0x0800b11c
 8004c0c:	0800b180 	.word	0x0800b180
 8004c10:	08012c68 	.word	0x08012c68
 8004c14:	0800b1e4 	.word	0x0800b1e4
 8004c18:	0800b240 	.word	0x0800b240

08004c1c <layer_run>:
	return model_compile(m, input, output);
}

// run that layer
nnom_status_t layer_run(nnom_layer_t *layer)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	nnom_status_t result;
	uint32_t start;
	NNOM_NULL_CHECK(layer);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <layer_run+0x1a>
 8004c2a:	4811      	ldr	r0, [pc, #68]	; (8004c70 <layer_run+0x54>)
 8004c2c:	f004 fb5a 	bl	80092e4 <puts>
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	e018      	b.n	8004c68 <layer_run+0x4c>

	// start
	start = nnom_us_get();
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
	// run main layer first
	result = layer->run(layer);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	72fb      	strb	r3, [r7, #11]
	// run tailed-activation if it is presented
	if (layer->actail != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d006      	beq.n	8004c5c <layer_run+0x40>
	{
		layer->actail->run(layer->actail);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6912      	ldr	r2, [r2, #16]
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4798      	blx	r3
	}
	// done
	layer->stat.time = nnom_us_get() - start;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	425a      	negs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24
	return result;
 8004c64:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	0800b0d4 	.word	0x0800b0d4

08004c74 <model_run_to>:

// run the model, until the end_layer. If end_layer == NULL, run all layers.
nnom_status_t model_run_to(nnom_model_t *m, nnom_layer_t *end_layer)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	uint32_t layer_num = 1;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
	nnom_status_t result;
	nnom_layer_t *layer;
	NNOM_NULL_CHECK(m);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <model_run_to+0x20>
 8004c88:	4832      	ldr	r0, [pc, #200]	; (8004d54 <model_run_to+0xe0>)
 8004c8a:	f004 fb2b 	bl	80092e4 <puts>
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c92:	e05b      	b.n	8004d4c <model_run_to+0xd8>
	NNOM_NULL_CHECK(m->head);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <model_run_to+0x34>
 8004c9c:	482d      	ldr	r0, [pc, #180]	; (8004d54 <model_run_to+0xe0>)
 8004c9e:	f004 fb21 	bl	80092e4 <puts>
 8004ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca6:	e051      	b.n	8004d4c <model_run_to+0xd8>

	layer = m->head;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]
	
	// using shortcut run
	while (layer)
 8004cae:	e049      	b.n	8004d44 <model_run_to+0xd0>
	{
		// run layer
		result = layer_run(layer);
 8004cb0:	6938      	ldr	r0, [r7, #16]
 8004cb2:	f7ff ffb3 	bl	8004c1c <layer_run>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	73fb      	strb	r3, [r7, #15]
		if (result != NN_SUCCESS)
 8004cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d011      	beq.n	8004ce6 <model_run_to+0x72>
		{
			NNOM_LOG("Error: #%d %s layer return error code:%d\n", layer_num, default_layer_names[layer->type], result);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	7d1b      	ldrb	r3, [r3, #20]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4613      	mov	r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <model_run_to+0xe4>)
 8004cd2:	441a      	add	r2, r3
 8004cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	4820      	ldr	r0, [pc, #128]	; (8004d5c <model_run_to+0xe8>)
 8004cdc:	f004 fa7a 	bl	80091d4 <iprintf>
			return result;
 8004ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce4:	e032      	b.n	8004d4c <model_run_to+0xd8>
		}
		// run callback
		if(m->layer_callback != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01c      	beq.n	8004d28 <model_run_to+0xb4>
		{
			result = m->layer_callback(m, layer);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	6939      	ldr	r1, [r7, #16]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	73fb      	strb	r3, [r7, #15]
			if (result != NN_SUCCESS)
 8004cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d011      	beq.n	8004d28 <model_run_to+0xb4>
			{
				NNOM_LOG("Error: Callback return error code %d at #%d %s layer\n", result, layer_num, default_layer_names[layer->type]);
 8004d04:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	7d1b      	ldrb	r3, [r3, #20]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4613      	mov	r3, r2
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <model_run_to+0xe4>)
 8004d18:	4413      	add	r3, r2
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4810      	ldr	r0, [pc, #64]	; (8004d60 <model_run_to+0xec>)
 8004d1e:	f004 fa59 	bl	80091d4 <iprintf>
				return result;
 8004d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d26:	e011      	b.n	8004d4c <model_run_to+0xd8>
			}
		}		
		// check if finished
		if (layer == end_layer || layer->shortcut == NULL)
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d00c      	beq.n	8004d4a <model_run_to+0xd6>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <model_run_to+0xd6>
			break;
		layer = layer->shortcut;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	613b      	str	r3, [r7, #16]
		layer_num++;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	3301      	adds	r3, #1
 8004d42:	617b      	str	r3, [r7, #20]
	while (layer)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1b2      	bne.n	8004cb0 <model_run_to+0x3c>
	}

	return NN_SUCCESS;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	0800b0d4 	.word	0x0800b0d4
 8004d58:	08012c68 	.word	0x08012c68
 8004d5c:	0800b280 	.word	0x0800b280
 8004d60:	0800b2ac 	.word	0x0800b2ac

08004d64 <model_run>:

// run all layers.
nnom_status_t model_run(nnom_model_t *m)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	return model_run_to(m, NULL);
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ff80 	bl	8004c74 <model_run_to>
 8004d74:	4603      	mov	r3, r0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <relu_run>:
#include "arm_nnfunctions.h"
#endif

// porting
static nnom_status_t relu_run(nnom_activation_t* act)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
#ifdef NNOM_USING_CMSIS_NN
	arm_relu_q7(act->data, act->size);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f7fb fa1c 	bl	80001d0 <arm_relu_q7>
#else
	local_relu_q7(act->data, act->size);
#endif
	return NN_SUCCESS;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <act_relu>:
	return NN_SUCCESS;
}

//
nnom_activation_t* act_relu(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
	nnom_activation_t* act = nnom_mem(sizeof(nnom_activation_t));
 8004daa:	2010      	movs	r0, #16
 8004dac:	f7fe ffb4 	bl	8003d18 <nnom_mem>
 8004db0:	6078      	str	r0, [r7, #4]
	act->run = relu_run;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <act_relu+0x24>)
 8004db6:	601a      	str	r2, [r3, #0]
	act->type = ACT_RELU;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	739a      	strb	r2, [r3, #14]
	return act;
 8004dbe:	687b      	ldr	r3, [r7, #4]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	08004d7f 	.word	0x08004d7f

08004dcc <default_build>:

// this is call while output shape is not defined.
// this will set the output shape same as input shape, and it set only the primary IO
// this cannot be used as first layer, of course...
nnom_status_t default_build(nnom_layer_t *layer)
{
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	// get the last layer's output as input shape
	layer->in->tensor = layer->in->hook.io->tensor;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	68d2      	ldr	r2, [r2, #12]
 8004de0:	60da      	str	r2, [r3, #12]
	// output tensor
	// 1. allocate a new tensor for output
	// 2. set the same dim, qfmt to the new tensor.
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	7a1b      	ldrb	r3, [r3, #8]
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69dc      	ldr	r4, [r3, #28]
 8004df0:	4611      	mov	r1, r2
 8004df2:	2000      	movs	r0, #0
 8004df4:	f001 f9a8 	bl	8006148 <new_tensor>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	60e3      	str	r3, [r4, #12]
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f001 f9ea 	bl	80061e4 <tensor_cpy_attributes>

	// now this build has passed the input tensors (shapes, formats) to the new tensors. 
	return NN_SUCCESS;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd90      	pop	{r4, r7, pc}
	...

08004e1c <Conv2D>:
// Conv2D
// multiplier of (output/input channel),
// shape of kernal, shape of strides, weight struct, bias struct
nnom_layer_t *Conv2D(uint32_t filters, nnom_shape_t k, nnom_shape_t s, nnom_padding_t pad_type,
					 const nnom_weight_t *w, const nnom_bias_t *b)
{
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b08a      	sub	sp, #40	; 0x28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	1d38      	adds	r0, r7, #4
 8004e28:	e880 0006 	stmia.w	r0, {r1, r2}
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
	nnom_conv2d_layer_t *layer;
	nnom_buf_t *comp;
	nnom_layer_io_t *in, *out;

	// apply a block memory for all the sub handles.
	size_t mem_size = sizeof(nnom_conv2d_layer_t) + sizeof(nnom_layer_io_t) * 2 + sizeof(nnom_buf_t);
 8004e2e:	2394      	movs	r3, #148	; 0x94
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
	layer = nnom_mem(mem_size);
 8004e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e34:	f7fe ff70 	bl	8003d18 <nnom_mem>
 8004e38:	6238      	str	r0, [r7, #32]
	if (layer == NULL)
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <Conv2D+0x28>
		return NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e073      	b.n	8004f2c <Conv2D+0x110>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_conv2d_layer_t));
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	3350      	adds	r3, #80	; 0x50
 8004e48:	61fb      	str	r3, [r7, #28]
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	331c      	adds	r3, #28
 8004e4e:	61bb      	str	r3, [r7, #24]
	comp = (void *)((uint8_t*)out + sizeof(nnom_layer_io_t));
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	331c      	adds	r3, #28
 8004e54:	617b      	str	r3, [r7, #20]

	// set type in layer parent
	layer->super.type = NNOM_CONV_2D;
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	751a      	strb	r2, [r3, #20]
	// set buf state
	in->type = LAYER_BUF_TEMP;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	761a      	strb	r2, [r3, #24]
	out->type = LAYER_BUF_TEMP;
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2201      	movs	r2, #1
 8004e66:	761a      	strb	r2, [r3, #24]
	comp->type = LAYER_BUF_TEMP;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	729a      	strb	r2, [r3, #10]
	// put in & out on the layer.
	layer->super.in = io_init(layer, in);
 8004e6e:	69f9      	ldr	r1, [r7, #28]
 8004e70:	6a38      	ldr	r0, [r7, #32]
 8004e72:	f000 fe02 	bl	8005a7a <io_init>
 8004e76:	4602      	mov	r2, r0
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	619a      	str	r2, [r3, #24]
	layer->super.out = io_init(layer, out);
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	6a38      	ldr	r0, [r7, #32]
 8004e80:	f000 fdfb 	bl	8005a7a <io_init>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	61da      	str	r2, [r3, #28]
	layer->super.comp = comp;
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	60da      	str	r2, [r3, #12]
	// set run method & output shape
	layer->super.run = conv2d_run;
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <Conv2D+0x120>)
 8004e94:	601a      	str	r2, [r3, #0]
	layer->super.build = conv2d_build;
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <Conv2D+0x124>)
 8004e9a:	605a      	str	r2, [r3, #4]

	// get the private parameters
	layer->kernel = k;
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	332c      	adds	r3, #44	; 0x2c
 8004ea0:	1d3a      	adds	r2, r7, #4
 8004ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ea6:	6018      	str	r0, [r3, #0]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	8019      	strh	r1, [r3, #0]
	layer->stride = s;
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	3332      	adds	r3, #50	; 0x32
 8004eb0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004eb4:	6810      	ldr	r0, [r2, #0]
 8004eb6:	6018      	str	r0, [r3, #0]
 8004eb8:	8892      	ldrh	r2, [r2, #4]
 8004eba:	809a      	strh	r2, [r3, #4]
	layer->bias = b;
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ec0:	64da      	str	r2, [r3, #76]	; 0x4c
	layer->weights = w;
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ec6:	649a      	str	r2, [r3, #72]	; 0x48
	layer->output_shift = w->shift;
 8004ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	b25a      	sxtb	r2, r3
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	layer->bias_shift = b->shift; // bias is quantized to have maximum shift of weights
 8004ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	b25a      	sxtb	r2, r3
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	layer->filter_mult = filters; // for convs, this means filter number
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
	layer->padding_type = pad_type;
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	// padding
	if (layer->padding_type == PADDING_SAME)
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d117      	bne.n	8004f2a <Conv2D+0x10e>
	{
		layer->pad.w = (k.w - 1) / 2;
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	0fda      	lsrs	r2, r3, #31
 8004f00:	4413      	add	r3, r2
 8004f02:	105b      	asrs	r3, r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	879a      	strh	r2, [r3, #60]	; 0x3c
		layer->pad.h = (k.h - 1) / 2;
 8004f0a:	88bb      	ldrh	r3, [r7, #4]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	0fda      	lsrs	r2, r3, #31
 8004f10:	4413      	add	r3, r2
 8004f12:	105b      	asrs	r3, r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	875a      	strh	r2, [r3, #58]	; 0x3a
		layer->pad.c = (k.c - 1) / 2;
 8004f1a:	893b      	ldrh	r3, [r7, #8]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	0fda      	lsrs	r2, r3, #31
 8004f20:	4413      	add	r3, r2
 8004f22:	105b      	asrs	r3, r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	87da      	strh	r2, [r3, #62]	; 0x3e
	}

	return (nnom_layer_t *)layer;
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3728      	adds	r7, #40	; 0x28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f36:	b002      	add	sp, #8
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	080050ef 	.word	0x080050ef
 8004f40:	08004f45 	.word	0x08004f45

08004f44 <conv2d_build>:



nnom_status_t conv2d_build(nnom_layer_t *layer)
{
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
	nnom_conv2d_layer_t *cl = (nnom_conv2d_layer_t *)layer;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	617b      	str	r3, [r7, #20]

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	68d2      	ldr	r2, [r2, #12]
 8004f5c:	60da      	str	r2, [r3, #12]

	// create new tensor for output
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	7a1b      	ldrb	r3, [r3, #8]
 8004f66:	461a      	mov	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	69dc      	ldr	r4, [r3, #28]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f001 f8ea 	bl	8006148 <new_tensor>
 8004f74:	4603      	mov	r3, r0
 8004f76:	60e3      	str	r3, [r4, #12]
	// copy then change later. 
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f001 f92c 	bl	80061e4 <tensor_cpy_attributes>

	// now we set up the tensor shape, always HWC format
	if (cl->padding_type == PADDING_SAME)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d133      	bne.n	8004ffe <conv2d_build+0xba>
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0], cl->stride.h);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004fae:	fb93 f2f2 	sdiv	r2, r3, r2
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	b292      	uxth	r2, r2
 8004fbc:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1], cl->stride.w);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8004fd8:	fb93 f2f2 	sdiv	r2, r3, r2
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	b292      	uxth	r2, r2
 8004fe8:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[2] = cl->filter_mult; // channel stays the same
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	b292      	uxth	r2, r2
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	e03a      	b.n	8005074 <conv2d_build+0x130>
	}
	else
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0] - cl->kernel.h + 1, cl->stride.h);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	3301      	adds	r3, #1
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005016:	4413      	add	r3, r2
 8005018:	3b01      	subs	r3, #1
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800501e:	fb93 f2f2 	sdiv	r2, r3, r2
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	b292      	uxth	r2, r2
 800502c:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1] - cl->kernel.w + 1, cl->stride.w);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	3302      	adds	r3, #2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	3301      	adds	r3, #1
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8005048:	4413      	add	r3, r2
 800504a:	3b01      	subs	r3, #1
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8005050:	fb93 f2f2 	sdiv	r2, r3, r2
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	3302      	adds	r3, #2
 800505e:	b292      	uxth	r2, r2
 8005060:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[2] = cl->filter_mult;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	b292      	uxth	r2, r2
 8005072:	801a      	strh	r2, [r3, #0]
	}

	// bufferA size: (1D shape)
	// 2*ch_im_in*dim_kernel*dim_kernel
	layer->comp->shape = shape(2 * 2 * layer->in->tensor->dim[2] * cl->kernel.w * cl->kernel.h, 1, 1);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	4619      	mov	r1, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68dc      	ldr	r4, [r3, #12]
 8005098:	4638      	mov	r0, r7
 800509a:	2301      	movs	r3, #1
 800509c:	2201      	movs	r2, #1
 800509e:	f000 fcae 	bl	80059fe <shape>
 80050a2:	1d23      	adds	r3, r4, #4
 80050a4:	463a      	mov	r2, r7
 80050a6:	6810      	ldr	r0, [r2, #0]
 80050a8:	6018      	str	r0, [r3, #0]
 80050aa:	8892      	ldrh	r2, [r2, #4]
 80050ac:	809a      	strh	r2, [r3, #4]
	// computational cost: K x K x Cin x Hour x Wout x Cout
	layer->stat.macc = cl->kernel.w * cl->kernel.h * layer->in->tensor->dim[2] * tensor_size(layer->out->tensor);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b2:	461a      	mov	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050b8:	fb03 f302 	mul.w	r3, r3, r2
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	6992      	ldr	r2, [r2, #24]
 80050c0:	68d2      	ldr	r2, [r2, #12]
 80050c2:	6852      	ldr	r2, [r2, #4]
 80050c4:	3204      	adds	r2, #4
 80050c6:	8812      	ldrh	r2, [r2, #0]
 80050c8:	fb02 f303 	mul.w	r3, r2, r3
 80050cc:	461c      	mov	r4, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 f80c 	bl	80060f2 <tensor_size>
 80050da:	4603      	mov	r3, r0
 80050dc:	fb03 f204 	mul.w	r2, r3, r4
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	621a      	str	r2, [r3, #32]
	return NN_SUCCESS;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd90      	pop	{r4, r7, pc}

080050ee <conv2d_run>:


nnom_status_t conv2d_run(nnom_layer_t *layer)
{
 80050ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f2:	b09e      	sub	sp, #120	; 0x78
 80050f4:	af10      	add	r7, sp, #64	; 0x40
 80050f6:	62f8      	str	r0, [r7, #44]	; 0x2c
	nnom_conv2d_layer_t *cl = (nnom_conv2d_layer_t *)layer;
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	637b      	str	r3, [r7, #52]	; 0x34
#else
	// HWC format
	#ifdef NNOM_USING_CMSIS_NN
	//RGB
	// ch_im_in = 3, w = h
	if (layer->in->tensor->dim[2] == 3 && layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	3304      	adds	r3, #4
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	2b03      	cmp	r3, #3
 800510a:	d168      	bne.n	80051de <conv2d_run+0xf0>
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	881a      	ldrh	r2, [r3, #0]
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	3302      	adds	r3, #2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d15b      	bne.n	80051de <conv2d_run+0xf0>
		return (nnom_status_t)arm_convolve_HWC_q7_RGB(
			layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	3302      	adds	r3, #2
		return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 800513a:	f8b3 c000 	ldrh.w	ip, [r3]
			layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	3304      	adds	r3, #4
		return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 8005148:	f8b3 e000 	ldrh.w	lr, [r3]
			cl->weights->p_value,
 800514c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	627a      	str	r2, [r7, #36]	; 0x24
			layer->out->tensor->dim[2],
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	3304      	adds	r3, #4
		return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 800515e:	8819      	ldrh	r1, [r3, #0]
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	8dd8      	ldrh	r0, [r3, #46]	; 0x2e
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516a:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			cl->kernel.w, cl->pad.w, cl->stride.w,
			cl->bias->p_value, cl->bias_shift,
 800516c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005170:	681e      	ldr	r6, [r3, #0]
 8005172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005174:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
		return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 8005178:	b29a      	uxth	r2, r3
 800517a:	623a      	str	r2, [r7, #32]
			cl->output_shift, layer->out->tensor->p_data, layer->out->tensor->dim[1],
 800517c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
		return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 8005182:	fa1f f883 	uxth.w	r8, r3
 8005186:	4643      	mov	r3, r8
 8005188:	61fb      	str	r3, [r7, #28]
			cl->output_shift, layer->out->tensor->p_data, layer->out->tensor->dim[1],
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	61ba      	str	r2, [r7, #24]
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	3302      	adds	r3, #2
		return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 800519e:	f8b3 8000 	ldrh.w	r8, [r3]
 80051a2:	4643      	mov	r3, r8
 80051a4:	617b      	str	r3, [r7, #20]
			(q15_t *)(layer->comp->mem->blk), NULL);
 80051a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
		return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 80051ae:	2300      	movs	r3, #0
 80051b0:	930a      	str	r3, [sp, #40]	; 0x28
 80051b2:	9209      	str	r2, [sp, #36]	; 0x24
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	9308      	str	r3, [sp, #32]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	9207      	str	r2, [sp, #28]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	9306      	str	r3, [sp, #24]
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	9205      	str	r2, [sp, #20]
 80051c4:	9604      	str	r6, [sp, #16]
 80051c6:	9503      	str	r5, [sp, #12]
 80051c8:	9402      	str	r4, [sp, #8]
 80051ca:	9001      	str	r0, [sp, #4]
 80051cc:	9100      	str	r1, [sp, #0]
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	4672      	mov	r2, lr
 80051d2:	4661      	mov	r1, ip
 80051d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d6:	f7fb f8f9 	bl	80003cc <arm_convolve_HWC_q7_RGB>
 80051da:	4603      	mov	r3, r0
 80051dc:	e255      	b.n	800568a <conv2d_run+0x59c>

	// check if can use optimized function
	//	ch_im_in is multiple of 4
	//	ch_im_out is multiple of 2
	if (layer->in->tensor->dim[2] % 4 == 0 &&
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 816b 	bne.w	80054cc <conv2d_run+0x3de>
		layer->out->tensor->dim[2] % 2 == 0)
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	b29b      	uxth	r3, r3
	if (layer->in->tensor->dim[2] % 4 == 0 &&
 8005208:	2b00      	cmp	r3, #0
 800520a:	f040 815f 	bne.w	80054cc <conv2d_run+0x3de>
	{
		// 1x1 fast
		if (cl->kernel.w == 1 && cl->kernel.h == 1)
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005212:	2b01      	cmp	r3, #1
 8005214:	d17a      	bne.n	800530c <conv2d_run+0x21e>
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d176      	bne.n	800530c <conv2d_run+0x21e>
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
				layer->in->tensor->p_data,
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 8005232:	f8b3 c000 	ldrh.w	ip, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 800523e:	f8b3 e000 	ldrh.w	lr, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 800524c:	f8b3 8000 	ldrh.w	r8, [r3]
				cl->weights->p_value,
 8005250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	627a      	str	r2, [r7, #36]	; 0x24
				layer->out->tensor->dim[2],
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 8005262:	8819      	ldrh	r1, [r3, #0]
 8005264:	6239      	str	r1, [r7, #32]
 8005266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005268:	8ddc      	ldrh	r4, [r3, #46]	; 0x2e
 800526a:	61fc      	str	r4, [r7, #28]
 800526c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526e:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8005270:	61bd      	str	r5, [r7, #24]
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	8f9e      	ldrh	r6, [r3, #60]	; 0x3c
 8005276:	617e      	str	r6, [r7, #20]
 8005278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005286:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005288:	60ba      	str	r2, [r7, #8]
				cl->kernel.w, cl->kernel.h, cl->pad.w, cl->pad.h, cl->stride.w, cl->stride.h,
				cl->bias->p_value, cl->bias_shift,
 800528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528e:	6819      	ldr	r1, [r3, #0]
 8005290:	6079      	str	r1, [r7, #4]
 8005292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005294:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 8005298:	b29e      	uxth	r6, r3
				cl->output_shift, layer->out->tensor->p_data, layer->out->tensor->dim[1], layer->out->tensor->dim[0],
 800529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 80052a0:	b29d      	uxth	r5, r3
				cl->output_shift, layer->out->tensor->p_data, layer->out->tensor->dim[1], layer->out->tensor->dim[0],
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	681c      	ldr	r4, [r3, #0]
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 80052b4:	8818      	ldrh	r0, [r3, #0]
				cl->output_shift, layer->out->tensor->p_data, layer->out->tensor->dim[1], layer->out->tensor->dim[0],
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 80052be:	8819      	ldrh	r1, [r3, #0]
				(q15_t *)(layer->comp->mem->blk), NULL);
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 80052c8:	2300      	movs	r3, #0
 80052ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80052cc:	920e      	str	r2, [sp, #56]	; 0x38
 80052ce:	910d      	str	r1, [sp, #52]	; 0x34
 80052d0:	900c      	str	r0, [sp, #48]	; 0x30
 80052d2:	940b      	str	r4, [sp, #44]	; 0x2c
 80052d4:	950a      	str	r5, [sp, #40]	; 0x28
 80052d6:	9609      	str	r6, [sp, #36]	; 0x24
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	9108      	str	r1, [sp, #32]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	9207      	str	r2, [sp, #28]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	9006      	str	r0, [sp, #24]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	9305      	str	r3, [sp, #20]
 80052e8:	697e      	ldr	r6, [r7, #20]
 80052ea:	9604      	str	r6, [sp, #16]
 80052ec:	69bd      	ldr	r5, [r7, #24]
 80052ee:	9503      	str	r5, [sp, #12]
 80052f0:	69fc      	ldr	r4, [r7, #28]
 80052f2:	9402      	str	r4, [sp, #8]
 80052f4:	6a39      	ldr	r1, [r7, #32]
 80052f6:	9101      	str	r1, [sp, #4]
 80052f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fa:	9200      	str	r2, [sp, #0]
 80052fc:	4643      	mov	r3, r8
 80052fe:	4672      	mov	r2, lr
 8005300:	4661      	mov	r1, ip
 8005302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005304:	f7fa ff9a 	bl	800023c <arm_convolve_1x1_HWC_q7_fast_nonsquare>
 8005308:	4603      	mov	r3, r0
 800530a:	e1be      	b.n	800568a <conv2d_run+0x59c>
		// opt square shape
		if (layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	3302      	adds	r3, #2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d15b      	bne.n	80053de <conv2d_run+0x2f0>
			return (nnom_status_t)arm_convolve_HWC_q7_fast(
				layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_HWC_q7_fast(
 800533a:	f8b3 c000 	ldrh.w	ip, [r3]
				layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_HWC_q7_fast(
 8005348:	f8b3 e000 	ldrh.w	lr, [r3]
				cl->weights->p_value,
 800534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	627a      	str	r2, [r7, #36]	; 0x24
				layer->out->tensor->dim[2], cl->kernel.w, cl->pad.w, cl->stride.w,
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_HWC_q7_fast(
 800535e:	8819      	ldrh	r1, [r3, #0]
 8005360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005362:	8dd8      	ldrh	r0, [r3, #46]	; 0x2e
 8005364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005366:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
				cl->bias->p_value, cl->bias_shift,
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005370:	681e      	ldr	r6, [r3, #0]
 8005372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005374:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
			return (nnom_status_t)arm_convolve_HWC_q7_fast(
 8005378:	b29a      	uxth	r2, r3
 800537a:	623a      	str	r2, [r7, #32]
				cl->output_shift, layer->out->tensor->p_data,
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
			return (nnom_status_t)arm_convolve_HWC_q7_fast(
 8005382:	fa1f f883 	uxth.w	r8, r3
 8005386:	4643      	mov	r3, r8
 8005388:	61fb      	str	r3, [r7, #28]
				cl->output_shift, layer->out->tensor->p_data,
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	61ba      	str	r2, [r7, #24]
				layer->out->tensor->dim[1], (q15_t *)(layer->comp->mem->blk), NULL);
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_HWC_q7_fast(
 800539e:	f8b3 8000 	ldrh.w	r8, [r3]
 80053a2:	4643      	mov	r3, r8
 80053a4:	617b      	str	r3, [r7, #20]
				layer->out->tensor->dim[1], (q15_t *)(layer->comp->mem->blk), NULL);
 80053a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
			return (nnom_status_t)arm_convolve_HWC_q7_fast(
 80053ae:	2300      	movs	r3, #0
 80053b0:	930a      	str	r3, [sp, #40]	; 0x28
 80053b2:	9209      	str	r2, [sp, #36]	; 0x24
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	9308      	str	r3, [sp, #32]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	9207      	str	r2, [sp, #28]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	9306      	str	r3, [sp, #24]
 80053c0:	6a3a      	ldr	r2, [r7, #32]
 80053c2:	9205      	str	r2, [sp, #20]
 80053c4:	9604      	str	r6, [sp, #16]
 80053c6:	9503      	str	r5, [sp, #12]
 80053c8:	9402      	str	r4, [sp, #8]
 80053ca:	9001      	str	r0, [sp, #4]
 80053cc:	9100      	str	r1, [sp, #0]
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	4672      	mov	r2, lr
 80053d2:	4661      	mov	r1, ip
 80053d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d6:	f7fb fbff 	bl	8000bd8 <arm_convolve_HWC_q7_fast>
 80053da:	4603      	mov	r3, r0
 80053dc:	e155      	b.n	800568a <conv2d_run+0x59c>
		// opt none square shape
		else
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
				layer->in->tensor->p_data,
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 80053f2:	f8b3 c000 	ldrh.w	ip, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 80053fe:	f8b3 e000 	ldrh.w	lr, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 800540c:	f8b3 8000 	ldrh.w	r8, [r3]
				cl->weights->p_value, layer->out->tensor->dim[2],
 8005410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	627a      	str	r2, [r7, #36]	; 0x24
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8005422:	8819      	ldrh	r1, [r3, #0]
 8005424:	6239      	str	r1, [r7, #32]
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	8ddc      	ldrh	r4, [r3, #46]	; 0x2e
 800542a:	61fc      	str	r4, [r7, #28]
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8005430:	61bd      	str	r5, [r7, #24]
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	8f9e      	ldrh	r6, [r3, #60]	; 0x3c
 8005436:	617e      	str	r6, [r7, #20]
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005448:	60ba      	str	r2, [r7, #8]
				cl->kernel.w, cl->kernel.h, cl->pad.w, cl->pad.h, cl->stride.w, cl->stride.h,
				cl->bias->p_value, cl->bias_shift, cl->output_shift,
 800544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	6079      	str	r1, [r7, #4]
 8005452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005454:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8005458:	b29e      	uxth	r6, r3
				cl->bias->p_value, cl->bias_shift, cl->output_shift,
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8005460:	b29d      	uxth	r5, r3
				layer->out->tensor->p_data,
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	681c      	ldr	r4, [r3, #0]
				layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8005474:	8818      	ldrh	r0, [r3, #0]
				layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	685b      	ldr	r3, [r3, #4]
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 800547e:	8819      	ldrh	r1, [r3, #0]
				layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8005488:	2300      	movs	r3, #0
 800548a:	930f      	str	r3, [sp, #60]	; 0x3c
 800548c:	920e      	str	r2, [sp, #56]	; 0x38
 800548e:	910d      	str	r1, [sp, #52]	; 0x34
 8005490:	900c      	str	r0, [sp, #48]	; 0x30
 8005492:	940b      	str	r4, [sp, #44]	; 0x2c
 8005494:	950a      	str	r5, [sp, #40]	; 0x28
 8005496:	9609      	str	r6, [sp, #36]	; 0x24
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	9108      	str	r1, [sp, #32]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	9207      	str	r2, [sp, #28]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	9006      	str	r0, [sp, #24]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	9305      	str	r3, [sp, #20]
 80054a8:	697e      	ldr	r6, [r7, #20]
 80054aa:	9604      	str	r6, [sp, #16]
 80054ac:	69bd      	ldr	r5, [r7, #24]
 80054ae:	9503      	str	r5, [sp, #12]
 80054b0:	69fc      	ldr	r4, [r7, #28]
 80054b2:	9402      	str	r4, [sp, #8]
 80054b4:	6a39      	ldr	r1, [r7, #32]
 80054b6:	9101      	str	r1, [sp, #4]
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	9200      	str	r2, [sp, #0]
 80054bc:	4643      	mov	r3, r8
 80054be:	4672      	mov	r2, lr
 80054c0:	4661      	mov	r1, ip
 80054c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c4:	f7fb ff1e 	bl	8001304 <arm_convolve_HWC_q7_fast_nonsquare>
 80054c8:	4603      	mov	r3, r0
 80054ca:	e0de      	b.n	800568a <conv2d_run+0x59c>
	}
	// none optimized
	else
	{
		// none opt square shape
		if (layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	881a      	ldrh	r2, [r3, #0]
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	3302      	adds	r3, #2
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d15b      	bne.n	800559e <conv2d_run+0x4b0>
			return (nnom_status_t)arm_convolve_HWC_q7_basic(
				layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_HWC_q7_basic(
 80054fa:	f8b3 c000 	ldrh.w	ip, [r3]
				layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_HWC_q7_basic(
 8005508:	f8b3 e000 	ldrh.w	lr, [r3]
				cl->weights->p_value,
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	627a      	str	r2, [r7, #36]	; 0x24
				layer->out->tensor->dim[2], cl->kernel.w, cl->pad.w, cl->stride.w,
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_HWC_q7_basic(
 800551e:	8819      	ldrh	r1, [r3, #0]
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	8dd8      	ldrh	r0, [r3, #46]	; 0x2e
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005526:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
				cl->bias->p_value, cl->bias_shift,
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005530:	681e      	ldr	r6, [r3, #0]
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
			return (nnom_status_t)arm_convolve_HWC_q7_basic(
 8005538:	b29a      	uxth	r2, r3
 800553a:	623a      	str	r2, [r7, #32]
				cl->output_shift, layer->out->tensor->p_data,
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
			return (nnom_status_t)arm_convolve_HWC_q7_basic(
 8005542:	fa1f f883 	uxth.w	r8, r3
 8005546:	4643      	mov	r3, r8
 8005548:	61fb      	str	r3, [r7, #28]
				cl->output_shift, layer->out->tensor->p_data,
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	61ba      	str	r2, [r7, #24]
				layer->out->tensor->dim[1], (q15_t *)(layer->comp->mem->blk), NULL);
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_HWC_q7_basic(
 800555e:	f8b3 8000 	ldrh.w	r8, [r3]
 8005562:	4643      	mov	r3, r8
 8005564:	617b      	str	r3, [r7, #20]
				layer->out->tensor->dim[1], (q15_t *)(layer->comp->mem->blk), NULL);
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
			return (nnom_status_t)arm_convolve_HWC_q7_basic(
 800556e:	2300      	movs	r3, #0
 8005570:	930a      	str	r3, [sp, #40]	; 0x28
 8005572:	9209      	str	r2, [sp, #36]	; 0x24
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	9308      	str	r3, [sp, #32]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	9207      	str	r2, [sp, #28]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	9306      	str	r3, [sp, #24]
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	9205      	str	r2, [sp, #20]
 8005584:	9604      	str	r6, [sp, #16]
 8005586:	9503      	str	r5, [sp, #12]
 8005588:	9402      	str	r4, [sp, #8]
 800558a:	9001      	str	r0, [sp, #4]
 800558c:	9100      	str	r1, [sp, #0]
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	4672      	mov	r2, lr
 8005592:	4661      	mov	r1, ip
 8005594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005596:	f7fb f87f 	bl	8000698 <arm_convolve_HWC_q7_basic>
 800559a:	4603      	mov	r3, r0
 800559c:	e075      	b.n	800568a <conv2d_run+0x59c>
		// none opt none square shape
		else
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
				layer->in->tensor->p_data,
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 80055b2:	f8b3 c000 	ldrh.w	ip, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 80055be:	f8b3 e000 	ldrh.w	lr, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 80055cc:	f8b3 8000 	ldrh.w	r8, [r3]
				cl->weights->p_value, layer->out->tensor->dim[2],
 80055d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	627a      	str	r2, [r7, #36]	; 0x24
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	3304      	adds	r3, #4
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 80055e2:	8819      	ldrh	r1, [r3, #0]
 80055e4:	6239      	str	r1, [r7, #32]
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	8ddc      	ldrh	r4, [r3, #46]	; 0x2e
 80055ea:	61fc      	str	r4, [r7, #28]
 80055ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ee:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 80055f0:	61bd      	str	r5, [r7, #24]
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f4:	8f9e      	ldrh	r6, [r3, #60]	; 0x3c
 80055f6:	617e      	str	r6, [r7, #20]
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005600:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005606:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005608:	60ba      	str	r2, [r7, #8]
				cl->kernel.w, cl->kernel.h, cl->pad.w, cl->pad.h, cl->stride.w, cl->stride.h,
				cl->bias->p_value, cl->bias_shift, cl->output_shift,
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	6079      	str	r1, [r7, #4]
 8005612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005614:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8005618:	b29e      	uxth	r6, r3
				cl->bias->p_value, cl->bias_shift, cl->output_shift,
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8005620:	b29d      	uxth	r5, r3
				layer->out->tensor->p_data,
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	681c      	ldr	r4, [r3, #0]
				layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	3302      	adds	r3, #2
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8005634:	8818      	ldrh	r0, [r3, #0]
				layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 800563e:	8819      	ldrh	r1, [r3, #0]
				layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8005648:	2300      	movs	r3, #0
 800564a:	930f      	str	r3, [sp, #60]	; 0x3c
 800564c:	920e      	str	r2, [sp, #56]	; 0x38
 800564e:	910d      	str	r1, [sp, #52]	; 0x34
 8005650:	900c      	str	r0, [sp, #48]	; 0x30
 8005652:	940b      	str	r4, [sp, #44]	; 0x2c
 8005654:	950a      	str	r5, [sp, #40]	; 0x28
 8005656:	9609      	str	r6, [sp, #36]	; 0x24
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	9108      	str	r1, [sp, #32]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	9207      	str	r2, [sp, #28]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	9006      	str	r0, [sp, #24]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	9305      	str	r3, [sp, #20]
 8005668:	697e      	ldr	r6, [r7, #20]
 800566a:	9604      	str	r6, [sp, #16]
 800566c:	69bd      	ldr	r5, [r7, #24]
 800566e:	9503      	str	r5, [sp, #12]
 8005670:	69fc      	ldr	r4, [r7, #28]
 8005672:	9402      	str	r4, [sp, #8]
 8005674:	6a39      	ldr	r1, [r7, #32]
 8005676:	9101      	str	r1, [sp, #4]
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	9200      	str	r2, [sp, #0]
 800567c:	4643      	mov	r3, r8
 800567e:	4672      	mov	r2, lr
 8005680:	4661      	mov	r1, ip
 8005682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005684:	f7fb f950 	bl	8000928 <arm_convolve_HWC_q7_basic_nonsquare>
 8005688:	4603      	mov	r3, r0
				layer->out->tensor->p_data,
				layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
	return NN_SUCCESS;
	#endif
#endif // end of CHW/HWC
}
 800568a:	4618      	mov	r0, r3
 800568c:	3738      	adds	r7, #56	; 0x38
 800568e:	46bd      	mov	sp, r7
 8005690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005694 <Dense>:

nnom_status_t dense_build(nnom_layer_t *layer);
nnom_status_t dense_run(nnom_layer_t *layer);

nnom_layer_t *Dense(size_t output_unit, const nnom_weight_t *w, const nnom_bias_t *b)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
	nnom_dense_layer_t *layer;
	nnom_buf_t *comp;
	nnom_layer_io_t *in, *out;

	// apply a block memory for all the sub handles.
	size_t mem_size = sizeof(nnom_dense_layer_t) + sizeof(nnom_layer_io_t) * 2 + sizeof(nnom_buf_t);
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
	layer = nnom_mem(mem_size);
 80056a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056a6:	f7fe fb37 	bl	8003d18 <nnom_mem>
 80056aa:	6238      	str	r0, [r7, #32]
	if (layer == NULL)
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <Dense+0x22>
		return NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e041      	b.n	800573a <Dense+0xa6>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_dense_layer_t));
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	333c      	adds	r3, #60	; 0x3c
 80056ba:	61fb      	str	r3, [r7, #28]
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	331c      	adds	r3, #28
 80056c0:	61bb      	str	r3, [r7, #24]
	comp = (void *)((uint8_t*)out + sizeof(nnom_layer_io_t));
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	331c      	adds	r3, #28
 80056c6:	617b      	str	r3, [r7, #20]

	// set type in layer parent
	layer->super.type = NNOM_DENSE;
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	2207      	movs	r2, #7
 80056cc:	751a      	strb	r2, [r3, #20]
	// set buf state
	in->type = LAYER_BUF_TEMP;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	2201      	movs	r2, #1
 80056d2:	761a      	strb	r2, [r3, #24]
	out->type = LAYER_BUF_TEMP;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2201      	movs	r2, #1
 80056d8:	761a      	strb	r2, [r3, #24]
	comp->type = LAYER_BUF_TEMP;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2201      	movs	r2, #1
 80056de:	729a      	strb	r2, [r3, #10]
	// put in & out on the layer.
	layer->super.in = io_init(layer, in);
 80056e0:	69f9      	ldr	r1, [r7, #28]
 80056e2:	6a38      	ldr	r0, [r7, #32]
 80056e4:	f000 f9c9 	bl	8005a7a <io_init>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	619a      	str	r2, [r3, #24]
	layer->super.out = io_init(layer, out);
 80056ee:	69b9      	ldr	r1, [r7, #24]
 80056f0:	6a38      	ldr	r0, [r7, #32]
 80056f2:	f000 f9c2 	bl	8005a7a <io_init>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	61da      	str	r2, [r3, #28]
	layer->super.comp = comp;
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	60da      	str	r2, [r3, #12]
	// set run and outshape methods
	layer->super.run = dense_run;
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <Dense+0xb0>)
 8005706:	601a      	str	r2, [r3, #0]
	layer->super.build = dense_build;
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	4a0f      	ldr	r2, [pc, #60]	; (8005748 <Dense+0xb4>)
 800570c:	605a      	str	r2, [r3, #4]

	// set parameters
	layer->bias = b;
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	635a      	str	r2, [r3, #52]	; 0x34
	layer->weights = w;
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
	layer->output_shift = w->shift;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	b25a      	sxtb	r2, r3
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	layer->bias_shift = b->shift; // bias is quantized to have maximum shift of weights
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	b25a      	sxtb	r2, r3
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	layer->output_unit = output_unit;
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c

	return (nnom_layer_t *)layer;
 8005738:	6a3b      	ldr	r3, [r7, #32]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3728      	adds	r7, #40	; 0x28
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	080057f1 	.word	0x080057f1
 8005748:	0800574d 	.word	0x0800574d

0800574c <dense_build>:

nnom_status_t dense_build(nnom_layer_t *layer)
{
 800574c:	b590      	push	{r4, r7, lr}
 800574e:	b089      	sub	sp, #36	; 0x24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
	nnom_dense_layer_t *cl = (nnom_dense_layer_t *)layer;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	61fb      	str	r3, [r7, #28]

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	68d2      	ldr	r2, [r2, #12]
 8005764:	60da      	str	r2, [r3, #12]

	// create new tensor for output
	layer->out->tensor = new_tensor(NULL, 1);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	69dc      	ldr	r4, [r3, #28]
 800576a:	2101      	movs	r1, #1
 800576c:	2000      	movs	r0, #0
 800576e:	f000 fceb 	bl	8006148 <new_tensor>
 8005772:	4603      	mov	r3, r0
 8005774:	60e3      	str	r3, [r4, #12]
	// setup new tensor
	nnom_qformat_t qfmt = {0 , 0}; // fill this later when layer API changed. 
 8005776:	2300      	movs	r3, #0
 8005778:	763b      	strb	r3, [r7, #24]
 800577a:	2300      	movs	r3, #0
 800577c:	767b      	strb	r3, [r7, #25]
	nnom_shape_data_t dim[1] = {cl->output_unit};
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	b29b      	uxth	r3, r3
 8005784:	82bb      	strh	r3, [r7, #20]
	tensor_set_attribuites(layer->out->tensor, qfmt, 1, dim);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	68d8      	ldr	r0, [r3, #12]
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	2201      	movs	r2, #1
 8005792:	69b9      	ldr	r1, [r7, #24]
 8005794:	f000 fcf9 	bl	800618a <tensor_set_attribuites>

	// vec_buffer size: dim_vec (*2, q7->q15) ? I am not sure this is right
	layer->comp->shape = shape(tensor_size(layer->in->tensor)*2, 1, 1);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fca7 	bl	80060f2 <tensor_size>
 80057a4:	4603      	mov	r3, r0
 80057a6:	0059      	lsls	r1, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68dc      	ldr	r4, [r3, #12]
 80057ac:	4638      	mov	r0, r7
 80057ae:	2301      	movs	r3, #1
 80057b0:	2201      	movs	r2, #1
 80057b2:	f000 f924 	bl	80059fe <shape>
 80057b6:	1d23      	adds	r3, r4, #4
 80057b8:	463a      	mov	r2, r7
 80057ba:	6810      	ldr	r0, [r2, #0]
 80057bc:	6018      	str	r0, [r3, #0]
 80057be:	8892      	ldrh	r2, [r2, #4]
 80057c0:	809a      	strh	r2, [r3, #4]

	// computational cost: In * out
	layer->stat.macc = tensor_size(layer->in->tensor) * tensor_size(layer->out->tensor);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fc92 	bl	80060f2 <tensor_size>
 80057ce:	4604      	mov	r4, r0
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fc8b 	bl	80060f2 <tensor_size>
 80057dc:	4603      	mov	r3, r0
 80057de:	fb03 f204 	mul.w	r2, r3, r4
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
	return NN_SUCCESS;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3724      	adds	r7, #36	; 0x24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd90      	pop	{r4, r7, pc}

080057f0 <dense_run>:

nnom_status_t dense_run(nnom_layer_t *layer)
{
 80057f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f2:	b08b      	sub	sp, #44	; 0x2c
 80057f4:	af06      	add	r7, sp, #24
 80057f6:	6078      	str	r0, [r7, #4]
	nnom_status_t result = NN_SUCCESS;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]
	nnom_dense_layer_t *cl = (nnom_dense_layer_t *)(layer);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60bb      	str	r3, [r7, #8]
		result = (nnom_status_t)arm_fully_connected_q7_opt(
	#else
		local_fully_connected_q7_opt(
	#endif
#endif
			layer->in->tensor->p_data,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	681d      	ldr	r5, [r3, #0]
			cl->weights->p_value,
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	681e      	ldr	r6, [r3, #0]
			tensor_size(layer->in->tensor), layer->out->tensor->dim[0],
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fc6c 	bl	80060f2 <tensor_size>
 800581a:	4603      	mov	r3, r0
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 800581c:	fa1f fc83 	uxth.w	ip, r3
			tensor_size(layer->in->tensor), layer->out->tensor->dim[0],
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 8005828:	f8b3 e000 	ldrh.w	lr, [r3]
			cl->bias_shift, cl->output_shift,
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 8005832:	b29b      	uxth	r3, r3
			cl->bias_shift, cl->output_shift,
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	f992 2038 	ldrsb.w	r2, [r2, #56]	; 0x38
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 800583a:	b292      	uxth	r2, r2
			cl->bias->p_value,
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005840:	6809      	ldr	r1, [r1, #0]
			layer->out->tensor->p_data, (q15_t *)(layer->comp->mem->blk));
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	69c0      	ldr	r0, [r0, #28]
 8005846:	68c0      	ldr	r0, [r0, #12]
 8005848:	6800      	ldr	r0, [r0, #0]
 800584a:	687c      	ldr	r4, [r7, #4]
 800584c:	68e4      	ldr	r4, [r4, #12]
 800584e:	6824      	ldr	r4, [r4, #0]
 8005850:	6824      	ldr	r4, [r4, #0]
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 8005852:	9404      	str	r4, [sp, #16]
 8005854:	9003      	str	r0, [sp, #12]
 8005856:	9102      	str	r1, [sp, #8]
 8005858:	9201      	str	r2, [sp, #4]
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	4673      	mov	r3, lr
 800585e:	4662      	mov	r2, ip
 8005860:	4631      	mov	r1, r6
 8005862:	4628      	mov	r0, r5
 8005864:	f7fc fb80 	bl	8001f68 <arm_fully_connected_q7_opt>
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]


	return result;
 800586c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005878 <Input>:
nnom_status_t input_build(nnom_layer_t *layer);
nnom_status_t input_run(nnom_layer_t *layer);


nnom_layer_t *Input(nnom_shape_t input_shape, void *p_buf)
{
 8005878:	b590      	push	{r4, r7, lr}
 800587a:	b08b      	sub	sp, #44	; 0x2c
 800587c:	af00      	add	r7, sp, #0
 800587e:	f107 0308 	add.w	r3, r7, #8
 8005882:	e883 0003 	stmia.w	r3, {r0, r1}
 8005886:	607a      	str	r2, [r7, #4]
	nnom_io_layer_t *layer;
	nnom_layer_io_t *in, *out;

	// apply a block memory for all the sub handles.
	size_t mem_size = sizeof(nnom_io_layer_t) + sizeof(nnom_layer_io_t) * 2;
 8005888:	2370      	movs	r3, #112	; 0x70
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
	layer = nnom_mem(mem_size);
 800588c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800588e:	f7fe fa43 	bl	8003d18 <nnom_mem>
 8005892:	6238      	str	r0, [r7, #32]
	if (layer == NULL)
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <Input+0x26>
		return NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	e050      	b.n	8005940 <Input+0xc8>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_io_layer_t));
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	3338      	adds	r3, #56	; 0x38
 80058a2:	61fb      	str	r3, [r7, #28]
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	331c      	adds	r3, #28
 80058a8:	61bb      	str	r3, [r7, #24]

	// set type in layer parent
	layer->super.type = NNOM_INPUT;
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	2202      	movs	r2, #2
 80058ae:	751a      	strb	r2, [r3, #20]
	layer->super.run = input_run;
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	4a25      	ldr	r2, [pc, #148]	; (8005948 <Input+0xd0>)
 80058b4:	601a      	str	r2, [r3, #0]
	layer->super.build = input_build;
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	4a24      	ldr	r2, [pc, #144]	; (800594c <Input+0xd4>)
 80058ba:	605a      	str	r2, [r3, #4]
	// set buf state
	in->type = LAYER_BUF_TEMP;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	2201      	movs	r2, #1
 80058c0:	761a      	strb	r2, [r3, #24]
	out->type = LAYER_BUF_NULL;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2200      	movs	r2, #0
 80058c6:	761a      	strb	r2, [r3, #24]
	// put in & out on the layer.
	layer->super.in = io_init(layer, in);
 80058c8:	69f9      	ldr	r1, [r7, #28]
 80058ca:	6a38      	ldr	r0, [r7, #32]
 80058cc:	f000 f8d5 	bl	8005a7a <io_init>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	619a      	str	r2, [r3, #24]
	layer->super.out = io_init(layer, out);
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	6a38      	ldr	r0, [r7, #32]
 80058da:	f000 f8ce 	bl	8005a7a <io_init>
 80058de:	4602      	mov	r2, r0
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	61da      	str	r2, [r3, #28]

	// set parameters
	layer->shape = input_shape;
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	332c      	adds	r3, #44	; 0x2c
 80058e8:	f107 0208 	add.w	r2, r7, #8
 80058ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058f0:	6018      	str	r0, [r3, #0]
 80058f2:	3304      	adds	r3, #4
 80058f4:	8019      	strh	r1, [r3, #0]
	layer->buf = p_buf;
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	635a      	str	r2, [r3, #52]	; 0x34

	// experimental: fixed input dim to 3
	// input normally dont have a tensor, so we create one to store the initial data. 
	nnom_shape_data_t dim[3] = { input_shape.h, input_shape.w, input_shape.c };
 80058fc:	893b      	ldrh	r3, [r7, #8]
 80058fe:	823b      	strh	r3, [r7, #16]
 8005900:	897b      	ldrh	r3, [r7, #10]
 8005902:	827b      	strh	r3, [r7, #18]
 8005904:	89bb      	ldrh	r3, [r7, #12]
 8005906:	82bb      	strh	r3, [r7, #20]
	layer->super.in->tensor = new_tensor(NULL, 3); 
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	699c      	ldr	r4, [r3, #24]
 800590c:	2103      	movs	r1, #3
 800590e:	2000      	movs	r0, #0
 8005910:	f000 fc1a 	bl	8006148 <new_tensor>
 8005914:	4603      	mov	r3, r0
 8005916:	60e3      	str	r3, [r4, #12]
	tensor_set_attribuites(layer->super.in->tensor, layer->super.in->tensor->qfmt, 3, dim);
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	68d8      	ldr	r0, [r3, #12]
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f107 0410 	add.w	r4, r7, #16
 8005928:	7a5a      	ldrb	r2, [r3, #9]
 800592a:	7a9b      	ldrb	r3, [r3, #10]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	4313      	orrs	r3, r2
 8005930:	2100      	movs	r1, #0
 8005932:	f363 010f 	bfi	r1, r3, #0, #16
 8005936:	4623      	mov	r3, r4
 8005938:	2203      	movs	r2, #3
 800593a:	f000 fc26 	bl	800618a <tensor_set_attribuites>

	return (nnom_layer_t *)layer;
 800593e:	6a3b      	ldr	r3, [r7, #32]
}
 8005940:	4618      	mov	r0, r3
 8005942:	372c      	adds	r7, #44	; 0x2c
 8005944:	46bd      	mov	sp, r7
 8005946:	bd90      	pop	{r4, r7, pc}
 8005948:	08005991 	.word	0x08005991
 800594c:	08005951 	.word	0x08005951

08005950 <input_build>:

nnom_status_t input_build(nnom_layer_t* layer)
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	// the input tensor of inputlayer has assigned previously 

	// output tensor
	// 1. allocate a new tensor for output
	// 2. set the same dim, qfmt to the new tensor.
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	7a1b      	ldrb	r3, [r3, #8]
 8005960:	461a      	mov	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69dc      	ldr	r4, [r3, #28]
 8005966:	4611      	mov	r1, r2
 8005968:	2000      	movs	r0, #0
 800596a:	f000 fbed 	bl	8006148 <new_tensor>
 800596e:	4603      	mov	r3, r0
 8005970:	60e3      	str	r3, [r4, #12]
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f000 fc2f 	bl	80061e4 <tensor_cpy_attributes>

	// now this build has passed the input tensors (shapes, formats) to the new tensors. 
	return NN_SUCCESS;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bd90      	pop	{r4, r7, pc}

08005990 <input_run>:


nnom_status_t input_run(nnom_layer_t *layer)
{
 8005990:	b5b0      	push	{r4, r5, r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	nnom_io_layer_t *cl = (nnom_io_layer_t *)layer;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]
#ifdef NNOM_USING_CHW
	tensor_hwc2chw_q7(layer->out->tensor, layer->in->tensor);
#else
	memcpy(layer->in->tensor->p_data, cl->buf, tensor_size(layer->in->tensor));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	681c      	ldr	r4, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fb9f 	bl	80060f2 <tensor_size>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	4629      	mov	r1, r5
 80059ba:	4620      	mov	r0, r4
 80059bc:	f002 fecc 	bl	8008758 <memcpy>
#endif
	return NN_SUCCESS;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bdb0      	pop	{r4, r5, r7, pc}

080059ca <shape_size>:
#include "nnom.h"
#include "nnom_local.h"
#include "nnom_layers.h"

size_t shape_size(nnom_shape_t *s)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
	if (s == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <shape_size+0x12>
		return 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	e00a      	b.n	80059f2 <shape_size+0x28>
	return s->h * s->w * s->c;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	885b      	ldrh	r3, [r3, #2]
 80059e6:	fb03 f302 	mul.w	r3, r3, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	8892      	ldrh	r2, [r2, #4]
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <shape>:

nnom_shape_t shape(size_t h, size_t w, size_t c)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b087      	sub	sp, #28
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	603b      	str	r3, [r7, #0]
	nnom_shape_t s;
	s.h = h;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	823b      	strh	r3, [r7, #16]
	s.w = w;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	827b      	strh	r3, [r7, #18]
	s.c = c;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	82bb      	strh	r3, [r7, #20]
	return s;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	461a      	mov	r2, r3
 8005a22:	f107 0310 	add.w	r3, r7, #16
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	6010      	str	r0, [r2, #0]
 8005a2a:	889b      	ldrh	r3, [r3, #4]
 8005a2c:	8093      	strh	r3, [r2, #4]
}
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <kernel>:
nnom_shape_t kernel(size_t h, size_t w)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
	return shape(h, w, 1);
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	f7ff ffd6 	bl	80059fe <shape>
}
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <stride>:
nnom_shape_t stride(size_t h, size_t w)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
	return shape(h, w, 1);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	2301      	movs	r3, #1
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	f7ff ffc6 	bl	80059fe <shape>
}
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <io_init>:
}

// this function has to be used while assign a io for a layer.
// because the io needs to know who is its owner.
nnom_layer_io_t *io_init(void *owner_layer, nnom_layer_io_t *io)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
	io->owner = (nnom_layer_t *)owner_layer;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	615a      	str	r2, [r3, #20]
	return io;
 8005a8a:	683b      	ldr	r3, [r7, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <local_maxpool_q7_HWC>:
	const uint16_t stride_y,     // stride
	const uint16_t dim_im_out_x, // output image dimension x or W
	const uint16_t dim_im_out_y, // output image dimension y or H
	q7_t *bufferA,               // a buffer for local storage, NULL by now
	q7_t *Im_out)
{
 8005a98:	b490      	push	{r4, r7}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	817b      	strh	r3, [r7, #10]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	813b      	strh	r3, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
    int16_t i_ch_in, i_x, i_y;
    int16_t k_x, k_y;

    for (i_ch_in = 0; i_ch_in < ch_im_in; i_ch_in++)
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	83fb      	strh	r3, [r7, #30]
 8005ab6:	e0b4      	b.n	8005c22 <local_maxpool_q7_HWC+0x18a>
    {
        for (i_y = 0; i_y < dim_im_out_y; i_y++)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	837b      	strh	r3, [r7, #26]
 8005abc:	e0a4      	b.n	8005c08 <local_maxpool_q7_HWC+0x170>
        {
            for (i_x = 0; i_x < dim_im_out_x; i_x++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	83bb      	strh	r3, [r7, #28]
 8005ac2:	e094      	b.n	8005bee <local_maxpool_q7_HWC+0x156>
            {
                int max = -129;
 8005ac4:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8005ac8:	613b      	str	r3, [r7, #16]
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 8005aca:	8b7b      	ldrh	r3, [r7, #26]
 8005acc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005ace:	fb12 f303 	smulbb	r3, r2, r3
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	82fb      	strh	r3, [r7, #22]
 8005adc:	e05f      	b.n	8005b9e <local_maxpool_q7_HWC+0x106>
                {
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
 8005ade:	8bbb      	ldrh	r3, [r7, #28]
 8005ae0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005ae2:	fb12 f303 	smulbb	r3, r2, r3
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	833b      	strh	r3, [r7, #24]
 8005af0:	e042      	b.n	8005b78 <local_maxpool_q7_HWC+0xe0>
                    {
                        if (k_y >= 0 && k_x >= 0 && k_y < dim_im_in_y && k_x < dim_im_in_x)
 8005af2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	db38      	blt.n	8005b6c <local_maxpool_q7_HWC+0xd4>
 8005afa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	db34      	blt.n	8005b6c <local_maxpool_q7_HWC+0xd4>
 8005b02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005b06:	893b      	ldrh	r3, [r7, #8]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	da2f      	bge.n	8005b6c <local_maxpool_q7_HWC+0xd4>
 8005b0c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005b10:	897b      	ldrh	r3, [r7, #10]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	da2a      	bge.n	8005b6c <local_maxpool_q7_HWC+0xd4>
                        {
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 8005b16:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005b20:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005b24:	897c      	ldrh	r4, [r7, #10]
 8005b26:	fb04 f101 	mul.w	r1, r4, r1
 8005b2a:	4401      	add	r1, r0
 8005b2c:	fb01 f303 	mul.w	r3, r1, r3
 8005b30:	4413      	add	r3, r2
 8005b32:	461a      	mov	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f993 3000 	ldrsb.w	r3, [r3]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4293      	cmp	r3, r2
 8005b42:	da13      	bge.n	8005b6c <local_maxpool_q7_HWC+0xd4>
                            {
                                max = Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)];
 8005b44:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005b4e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005b52:	897c      	ldrh	r4, [r7, #10]
 8005b54:	fb04 f101 	mul.w	r1, r4, r1
 8005b58:	4401      	add	r1, r0
 8005b5a:	fb01 f303 	mul.w	r3, r1, r3
 8005b5e:	4413      	add	r3, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f993 3000 	ldrsb.w	r3, [r3]
 8005b6a:	613b      	str	r3, [r7, #16]
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
 8005b6c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3301      	adds	r3, #1
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	833b      	strh	r3, [r7, #24]
 8005b78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005b7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005b80:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8005b82:	fb01 f103 	mul.w	r1, r1, r3
 8005b86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005b88:	1ac9      	subs	r1, r1, r3
 8005b8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b8c:	440b      	add	r3, r1
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	dbaf      	blt.n	8005af2 <local_maxpool_q7_HWC+0x5a>
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 8005b92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3301      	adds	r3, #1
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	82fb      	strh	r3, [r7, #22]
 8005b9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ba2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005ba6:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8005ba8:	fb01 f103 	mul.w	r1, r1, r3
 8005bac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005bae:	1ac9      	subs	r1, r1, r3
 8005bb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005bb2:	440b      	add	r3, r1
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	db92      	blt.n	8005ade <local_maxpool_q7_HWC+0x46>
                            }
                        }
                    }
                }
                Im_out[i_ch_in + ch_im_in * (i_x + i_y * dim_im_out_x)] = max;
 8005bb8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8005bc2:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8005bc6:	f8b7 4040 	ldrh.w	r4, [r7, #64]	; 0x40
 8005bca:	fb04 f101 	mul.w	r1, r4, r1
 8005bce:	4401      	add	r1, r0
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bda:	4413      	add	r3, r2
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	b252      	sxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
            for (i_x = 0; i_x < dim_im_out_x; i_x++)
 8005be2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	83bb      	strh	r3, [r7, #28]
 8005bee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005bf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	f6ff af64 	blt.w	8005ac4 <local_maxpool_q7_HWC+0x2c>
        for (i_y = 0; i_y < dim_im_out_y; i_y++)
 8005bfc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3301      	adds	r3, #1
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	837b      	strh	r3, [r7, #26]
 8005c08:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005c0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c10:	429a      	cmp	r2, r3
 8005c12:	f6ff af54 	blt.w	8005abe <local_maxpool_q7_HWC+0x26>
    for (i_ch_in = 0; i_ch_in < ch_im_in; i_ch_in++)
 8005c16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	83fb      	strh	r3, [r7, #30]
 8005c22:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005c26:	88fb      	ldrh	r3, [r7, #6]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	f6ff af45 	blt.w	8005ab8 <local_maxpool_q7_HWC+0x20>
            }
        }
    }
}
 8005c2e:	bf00      	nop
 8005c30:	3720      	adds	r7, #32
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc90      	pop	{r4, r7}
 8005c36:	4770      	bx	lr

08005c38 <MaxPool>:

nnom_status_t maxpooling_build(nnom_layer_t *layer);
nnom_status_t maxpool_run(nnom_layer_t *layer);

nnom_layer_t *MaxPool(nnom_shape_t k, nnom_shape_t s, nnom_padding_t pad_type)
{
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b08b      	sub	sp, #44	; 0x2c
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	f107 0408 	add.w	r4, r7, #8
 8005c42:	e884 0003 	stmia.w	r4, {r0, r1}
 8005c46:	4639      	mov	r1, r7
 8005c48:	e881 000c 	stmia.w	r1, {r2, r3}
	nnom_maxpool_layer_t *layer;
	nnom_buf_t *comp;
	nnom_layer_io_t *in, *out;

	// apply a block memory for all the sub handles.
	size_t mem_size = sizeof(nnom_maxpool_layer_t) + sizeof(nnom_layer_io_t) * 2 + sizeof(nnom_buf_t);
 8005c4c:	2388      	movs	r3, #136	; 0x88
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
	layer = nnom_mem(mem_size);
 8005c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c52:	f7fe f861 	bl	8003d18 <nnom_mem>
 8005c56:	6238      	str	r0, [r7, #32]
	if (layer == NULL)
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <MaxPool+0x2a>
		return NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e063      	b.n	8005d2a <MaxPool+0xf2>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_maxpool_layer_t));
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	3344      	adds	r3, #68	; 0x44
 8005c66:	61fb      	str	r3, [r7, #28]
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	331c      	adds	r3, #28
 8005c6c:	61bb      	str	r3, [r7, #24]
	comp = (void *)((uint8_t*)out + sizeof(nnom_layer_io_t));
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	331c      	adds	r3, #28
 8005c72:	617b      	str	r3, [r7, #20]

	// set type in layer parent
	layer->super.type = NNOM_MAXPOOL;
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	2210      	movs	r2, #16
 8005c78:	751a      	strb	r2, [r3, #20]
	layer->super.run = maxpool_run;
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <MaxPool+0xfc>)
 8005c7e:	601a      	str	r2, [r3, #0]
	layer->super.build = maxpooling_build;
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	4a2d      	ldr	r2, [pc, #180]	; (8005d38 <MaxPool+0x100>)
 8005c84:	605a      	str	r2, [r3, #4]
	// set buf state
	in->type = LAYER_BUF_TEMP;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	761a      	strb	r2, [r3, #24]
	out->type = LAYER_BUF_TEMP;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	761a      	strb	r2, [r3, #24]
	comp->type = LAYER_BUF_TEMP;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2201      	movs	r2, #1
 8005c96:	729a      	strb	r2, [r3, #10]
	// put in & out on the layer.
	layer->super.in = io_init(layer, in);
 8005c98:	69f9      	ldr	r1, [r7, #28]
 8005c9a:	6a38      	ldr	r0, [r7, #32]
 8005c9c:	f7ff feed 	bl	8005a7a <io_init>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	619a      	str	r2, [r3, #24]
	layer->super.out = io_init(layer, out);
 8005ca6:	69b9      	ldr	r1, [r7, #24]
 8005ca8:	6a38      	ldr	r0, [r7, #32]
 8005caa:	f7ff fee6 	bl	8005a7a <io_init>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	61da      	str	r2, [r3, #28]
	layer->super.comp = comp;
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	60da      	str	r2, [r3, #12]

	// set parameters
	layer->kernel = k;
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	332c      	adds	r3, #44	; 0x2c
 8005cbe:	f107 0208 	add.w	r2, r7, #8
 8005cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cc6:	6018      	str	r0, [r3, #0]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	8019      	strh	r1, [r3, #0]
	layer->stride = s;
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	3332      	adds	r3, #50	; 0x32
 8005cd0:	463a      	mov	r2, r7
 8005cd2:	6810      	ldr	r0, [r2, #0]
 8005cd4:	6018      	str	r0, [r3, #0]
 8005cd6:	8892      	ldrh	r2, [r2, #4]
 8005cd8:	809a      	strh	r2, [r3, #4]
	layer->padding_type = pad_type;
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	// padding
	if (layer->padding_type == PADDING_SAME)
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d113      	bne.n	8005d16 <MaxPool+0xde>
	{
		layer->pad.h = (k.h - 1) / 2;
 8005cee:	893b      	ldrh	r3, [r7, #8]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	0fda      	lsrs	r2, r3, #31
 8005cf4:	4413      	add	r3, r2
 8005cf6:	105b      	asrs	r3, r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	871a      	strh	r2, [r3, #56]	; 0x38
		layer->pad.w = (k.w - 1) / 2;
 8005cfe:	897b      	ldrh	r3, [r7, #10]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	0fda      	lsrs	r2, r3, #31
 8005d04:	4413      	add	r3, r2
 8005d06:	105b      	asrs	r3, r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	875a      	strh	r2, [r3, #58]	; 0x3a
		layer->pad.c = 1; // no meaning
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	2201      	movs	r2, #1
 8005d12:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005d14:	e008      	b.n	8005d28 <MaxPool+0xf0>
	}
	else
	{
		layer->pad.h = 0;
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	871a      	strh	r2, [r3, #56]	; 0x38
		layer->pad.w = 0;
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	875a      	strh	r2, [r3, #58]	; 0x3a
		layer->pad.c = 0;
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	2200      	movs	r2, #0
 8005d26:	879a      	strh	r2, [r3, #60]	; 0x3c
	}
	return (nnom_layer_t *)layer;
 8005d28:	6a3b      	ldr	r3, [r7, #32]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	372c      	adds	r7, #44	; 0x2c
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd90      	pop	{r4, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08005e7f 	.word	0x08005e7f
 8005d38:	08005d3d 	.word	0x08005d3d

08005d3c <maxpooling_build>:

nnom_status_t maxpooling_build(nnom_layer_t *layer)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	nnom_maxpool_layer_t *cl = (nnom_maxpool_layer_t *)layer;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	60fb      	str	r3, [r7, #12]

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	68d2      	ldr	r2, [r2, #12]
 8005d54:	60da      	str	r2, [r3, #12]

	// create new tensor for output
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	7a1b      	ldrb	r3, [r3, #8]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69dc      	ldr	r4, [r3, #28]
 8005d64:	4611      	mov	r1, r2
 8005d66:	2000      	movs	r0, #0
 8005d68:	f000 f9ee 	bl	8006148 <new_tensor>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	60e3      	str	r3, [r4, #12]
	// copy then change later. 
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f000 fa30 	bl	80061e4 <tensor_cpy_attributes>

	// now we set up the tensor shape, always HWC format
	if (cl->padding_type == PADDING_SAME)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d135      	bne.n	8005dfa <maxpooling_build+0xbe>
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0], cl->stride.h);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d9e:	4413      	add	r3, r2
 8005da0:	3b01      	subs	r3, #1
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005da6:	fb93 f2f2 	sdiv	r2, r3, r2
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	b292      	uxth	r2, r2
 8005db4:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1], cl->stride.w);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005dc8:	4413      	add	r3, r2
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8005dd0:	fb93 f2f2 	sdiv	r2, r3, r2
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	3302      	adds	r3, #2
 8005dde:	b292      	uxth	r2, r2
 8005de0:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[2] = layer->in->tensor->dim[2]; // channel stays the same
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	8892      	ldrh	r2, [r2, #4]
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	e03c      	b.n	8005e74 <maxpooling_build+0x138>
	}
	else
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0] - cl->kernel.h + 1, cl->stride.h);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005e12:	4413      	add	r3, r2
 8005e14:	3b01      	subs	r3, #1
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005e1a:	fb93 f2f2 	sdiv	r2, r3, r2
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	b292      	uxth	r2, r2
 8005e28:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1] - cl->kernel.w + 1, cl->stride.w);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	3302      	adds	r3, #2
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	3301      	adds	r3, #1
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8005e44:	4413      	add	r3, r2
 8005e46:	3b01      	subs	r3, #1
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8005e4c:	fb93 f2f2 	sdiv	r2, r3, r2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	3302      	adds	r3, #2
 8005e5a:	b292      	uxth	r2, r2
 8005e5c:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[2] = layer->in->tensor->dim[2];
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	8892      	ldrh	r2, [r2, #4]
 8005e72:	801a      	strh	r2, [r3, #0]
	}

	return NN_SUCCESS;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd90      	pop	{r4, r7, pc}

08005e7e <maxpool_run>:

nnom_status_t maxpool_run(nnom_layer_t *layer)
{
 8005e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e82:	b090      	sub	sp, #64	; 0x40
 8005e84:	af0a      	add	r7, sp, #40	; 0x28
 8005e86:	60f8      	str	r0, [r7, #12]
	nnom_maxpool_layer_t *cl = (nnom_maxpool_layer_t *)(layer);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	617b      	str	r3, [r7, #20]
			layer->out->mem->blk);
#else //end of CHW
	// HWC
	#ifdef NNOM_USING_CMSIS_NN
	// 2D, square
	if (layer->in->tensor->dim[1] == layer->in->tensor->dim[0] &&
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	3302      	adds	r3, #2
 8005e96:	881a      	ldrh	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d13a      	bne.n	8005f1c <maxpool_run+0x9e>
		layer->out->tensor->dim[1] == layer->out->tensor->dim[0])
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	3302      	adds	r3, #2
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	881b      	ldrh	r3, [r3, #0]
	if (layer->in->tensor->dim[1] == layer->in->tensor->dim[0] &&
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d12d      	bne.n	8005f1c <maxpool_run+0x9e>
	{
		arm_maxpool_q7_HWC(
			layer->in->mem->blk,
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	681c      	ldr	r4, [r3, #0]
			layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	3302      	adds	r3, #2
		arm_maxpool_q7_HWC(
 8005ed2:	881d      	ldrh	r5, [r3, #0]
			layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	3304      	adds	r3, #4
		arm_maxpool_q7_HWC(
 8005ede:	881e      	ldrh	r6, [r3, #0]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f8b3 c02e 	ldrh.w	ip, [r3, #46]	; 0x2e
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	8e92      	ldrh	r2, [r2, #52]	; 0x34
			cl->kernel.w, cl->pad.w, cl->stride.w,
			layer->out->tensor->dim[1],
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	69c9      	ldr	r1, [r1, #28]
 8005ef2:	68c9      	ldr	r1, [r1, #12]
 8005ef4:	6849      	ldr	r1, [r1, #4]
 8005ef6:	3102      	adds	r1, #2
		arm_maxpool_q7_HWC(
 8005ef8:	8809      	ldrh	r1, [r1, #0]
			NULL,
			layer->out->mem->blk);
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	69c0      	ldr	r0, [r0, #28]
 8005efe:	6900      	ldr	r0, [r0, #16]
 8005f00:	6800      	ldr	r0, [r0, #0]
		arm_maxpool_q7_HWC(
 8005f02:	9004      	str	r0, [sp, #16]
 8005f04:	2000      	movs	r0, #0
 8005f06:	9003      	str	r0, [sp, #12]
 8005f08:	9102      	str	r1, [sp, #8]
 8005f0a:	9201      	str	r2, [sp, #4]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	4663      	mov	r3, ip
 8005f10:	4632      	mov	r2, r6
 8005f12:	4629      	mov	r1, r5
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7fc f9c5 	bl	80022a4 <arm_maxpool_q7_HWC>
 8005f1a:	e048      	b.n	8005fae <maxpool_run+0x130>
	// none square 2D, or 1D
	else
	#endif
	{
		// CMSIS-NN does not support none-square pooling, we have to use local implementation
		local_maxpool_q7_HWC(layer->in->mem->blk, 				
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60bb      	str	r3, [r7, #8]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	3302      	adds	r3, #2
		local_maxpool_q7_HWC(layer->in->mem->blk, 				
 8005f30:	f8b3 c000 	ldrh.w	ip, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	685b      	ldr	r3, [r3, #4]
		local_maxpool_q7_HWC(layer->in->mem->blk, 				
 8005f3c:	f8b3 e000 	ldrh.w	lr, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	3304      	adds	r3, #4
		local_maxpool_q7_HWC(layer->in->mem->blk, 				
 8005f4a:	f8b3 8000 	ldrh.w	r8, [r3]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	6979      	ldr	r1, [r7, #20]
 8005f5a:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8005f5c:	6978      	ldr	r0, [r7, #20]
 8005f5e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8005f60:	697c      	ldr	r4, [r7, #20]
 8005f62:	8ea4      	ldrh	r4, [r4, #52]	; 0x34
 8005f64:	697d      	ldr	r5, [r7, #20]
 8005f66:	8e6d      	ldrh	r5, [r5, #50]	; 0x32
				cl->kernel.w, cl->kernel.h, 
				cl->pad.w, cl->pad.h,
				cl->stride.w, cl->stride.h,
				layer->out->tensor->dim[1], layer->out->tensor->dim[0],
 8005f68:	68fe      	ldr	r6, [r7, #12]
 8005f6a:	69f6      	ldr	r6, [r6, #28]
 8005f6c:	68f6      	ldr	r6, [r6, #12]
 8005f6e:	6876      	ldr	r6, [r6, #4]
 8005f70:	3602      	adds	r6, #2
		local_maxpool_q7_HWC(layer->in->mem->blk, 				
 8005f72:	8836      	ldrh	r6, [r6, #0]
				layer->out->tensor->dim[1], layer->out->tensor->dim[0],
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	69d2      	ldr	r2, [r2, #28]
 8005f78:	68d2      	ldr	r2, [r2, #12]
 8005f7a:	6852      	ldr	r2, [r2, #4]
		local_maxpool_q7_HWC(layer->in->mem->blk, 				
 8005f7c:	8812      	ldrh	r2, [r2, #0]
 8005f7e:	603a      	str	r2, [r7, #0]
				NULL,
				layer->out->mem->blk);
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	69d2      	ldr	r2, [r2, #28]
 8005f84:	6912      	ldr	r2, [r2, #16]
 8005f86:	6812      	ldr	r2, [r2, #0]
		local_maxpool_q7_HWC(layer->in->mem->blk, 				
 8005f88:	9209      	str	r2, [sp, #36]	; 0x24
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	9208      	str	r2, [sp, #32]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	9207      	str	r2, [sp, #28]
 8005f92:	9606      	str	r6, [sp, #24]
 8005f94:	9505      	str	r5, [sp, #20]
 8005f96:	9404      	str	r4, [sp, #16]
 8005f98:	9003      	str	r0, [sp, #12]
 8005f9a:	9102      	str	r1, [sp, #8]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	9201      	str	r2, [sp, #4]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	4643      	mov	r3, r8
 8005fa4:	4672      	mov	r2, lr
 8005fa6:	4661      	mov	r1, ip
 8005fa8:	68b8      	ldr	r0, [r7, #8]
 8005faa:	f7ff fd75 	bl	8005a98 <local_maxpool_q7_HWC>
	}
#endif // CHW/HWC
	return NN_SUCCESS;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005fbc <Output>:

nnom_status_t output_build(nnom_layer_t *layer);
nnom_status_t output_run(nnom_layer_t *layer);

nnom_layer_t *Output(nnom_shape_t output_shape, void *p_buf)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	f107 0308 	add.w	r3, r7, #8
 8005fc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8005fca:	607a      	str	r2, [r7, #4]
	// they are acturally the same.. expect the type defined
	nnom_layer_t *layer = Input(output_shape, p_buf);
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	f107 0308 	add.w	r3, r7, #8
 8005fd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005fd6:	f7ff fc4f 	bl	8005878 <Input>
 8005fda:	6178      	str	r0, [r7, #20]
	if (layer != NULL)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <Output+0x38>
	{
		layer->type = NNOM_OUTPUT;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	751a      	strb	r2, [r3, #20]
		layer->run = output_run;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4a05      	ldr	r2, [pc, #20]	; (8006000 <Output+0x44>)
 8005fec:	601a      	str	r2, [r3, #0]
		layer->build = default_build;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <Output+0x48>)
 8005ff2:	605a      	str	r2, [r3, #4]
	}
	return layer;
 8005ff4:	697b      	ldr	r3, [r7, #20]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	08006009 	.word	0x08006009
 8006004:	08004dcd 	.word	0x08004dcd

08006008 <output_run>:


nnom_status_t output_run(nnom_layer_t *layer)
{
 8006008:	b5b0      	push	{r4, r5, r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	nnom_io_layer_t *cl = (nnom_io_layer_t *)layer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]
	memcpy(cl->buf, layer->in->tensor->p_data, tensor_size(layer->out->tensor)); // in->memory -> user memory
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	681d      	ldr	r5, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f863 	bl	80060f2 <tensor_size>
 800602c:	4603      	mov	r3, r0
 800602e:	461a      	mov	r2, r3
 8006030:	4629      	mov	r1, r5
 8006032:	4620      	mov	r0, r4
 8006034:	f002 fb90 	bl	8008758 <memcpy>
	return NN_SUCCESS;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006044 <Softmax>:
#endif

nnom_status_t softmax_run(nnom_layer_t *layer);

nnom_layer_t *Softmax(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
	nnom_layer_t *layer;
	nnom_layer_io_t *in, *out;

	// apply a block memory for all the sub handles.
	size_t mem_size = sizeof(nnom_layer_t) + sizeof(nnom_layer_io_t) * 2;
 800604a:	2364      	movs	r3, #100	; 0x64
 800604c:	60fb      	str	r3, [r7, #12]
	layer = nnom_mem(mem_size);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7fd fe62 	bl	8003d18 <nnom_mem>
 8006054:	60b8      	str	r0, [r7, #8]
	if (layer == NULL)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <Softmax+0x1c>
		return NULL;
 800605c:	2300      	movs	r3, #0
 800605e:	e023      	b.n	80060a8 <Softmax+0x64>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_layer_t));
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	332c      	adds	r3, #44	; 0x2c
 8006064:	607b      	str	r3, [r7, #4]
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	331c      	adds	r3, #28
 800606a:	603b      	str	r3, [r7, #0]

	// set type in layer parent
	layer->type = NNOM_SOFTMAX;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	220f      	movs	r2, #15
 8006070:	751a      	strb	r2, [r3, #20]
	layer->run = softmax_run;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4a0e      	ldr	r2, [pc, #56]	; (80060b0 <Softmax+0x6c>)
 8006076:	601a      	str	r2, [r3, #0]
	layer->build = default_build;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4a0e      	ldr	r2, [pc, #56]	; (80060b4 <Softmax+0x70>)
 800607c:	605a      	str	r2, [r3, #4]
	// set buf state
	in->type = LAYER_BUF_TEMP;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	761a      	strb	r2, [r3, #24]
	out->type = LAYER_BUF_TEMP;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2201      	movs	r2, #1
 8006088:	761a      	strb	r2, [r3, #24]
	// put in & out on the layer.
	layer->in = io_init(layer, in);
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	68b8      	ldr	r0, [r7, #8]
 800608e:	f7ff fcf4 	bl	8005a7a <io_init>
 8006092:	4602      	mov	r2, r0
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	619a      	str	r2, [r3, #24]
	layer->out = io_init(layer, out);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	68b8      	ldr	r0, [r7, #8]
 800609c:	f7ff fced 	bl	8005a7a <io_init>
 80060a0:	4602      	mov	r2, r0
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	61da      	str	r2, [r3, #28]

	return layer;
 80060a6:	68bb      	ldr	r3, [r7, #8]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	080060b9 	.word	0x080060b9
 80060b4:	08004dcd 	.word	0x08004dcd

080060b8 <softmax_run>:

nnom_status_t softmax_run(nnom_layer_t *layer)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	#ifdef NNOM_USING_CMSIS_NN
	// temporary fixed for mutiple dimension input. 
	arm_softmax_q7(layer->in->tensor->p_data, tensor_size(layer->out->tensor), layer->out->tensor->p_data);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	681c      	ldr	r4, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 f80f 	bl	80060f2 <tensor_size>
 80060d4:	4603      	mov	r3, r0
 80060d6:	b299      	uxth	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	4620      	mov	r0, r4
 80060e4:	f7fc fbdc 	bl	80028a0 <arm_softmax_q7>
	#else
	local_softmax_q7(layer->in->tensor->p_data, tensor_size(layer->out->tensor), layer->out->tensor->p_data);
	#endif
	return NN_SUCCESS;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd90      	pop	{r4, r7, pc}

080060f2 <tensor_size>:
#include "nnom.h"
#include "nnom_tensor.h"

 // tensor size
size_t tensor_size(nnom_tensor_t* t)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
	size_t size = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
	if (t)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01a      	beq.n	800613a <tensor_size+0x48>
	{
		size = t->dim[0];
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < t->num_dim; i++)
 800610c:	2301      	movs	r3, #1
 800610e:	60bb      	str	r3, [r7, #8]
 8006110:	e00d      	b.n	800612e <tensor_size+0x3c>
			size *= t->dim[i];
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < t->num_dim; i++)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	3301      	adds	r3, #1
 800612c:	60bb      	str	r3, [r7, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	7a1b      	ldrb	r3, [r3, #8]
 8006132:	461a      	mov	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4293      	cmp	r3, r2
 8006138:	dbeb      	blt.n	8006112 <tensor_size+0x20>
	}
	return size;
 800613a:	68fb      	ldr	r3, [r7, #12]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <new_tensor>:

// initial tensor
nnom_tensor_t* new_tensor(nnom_tensor_t* t, uint32_t num_dim)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
	if (t)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <new_tensor+0x16>
		nnom_free(t);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f002 faf5 	bl	8008748 <free>
	t = nnom_mem(nnom_alignto(sizeof(nnom_tensor_t), 4) + num_dim*sizeof(nnom_shape_data_t));
 800615e:	2104      	movs	r1, #4
 8006160:	200c      	movs	r0, #12
 8006162:	f7fd fe1b 	bl	8003d9c <nnom_alignto>
 8006166:	4602      	mov	r2, r0
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4413      	add	r3, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f7fd fdd2 	bl	8003d18 <nnom_mem>
 8006174:	6078      	str	r0, [r7, #4]
	t->dim = (nnom_shape_data_t*)((uint8_t*)t + sizeof(nnom_tensor_t));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f103 020c 	add.w	r2, r3, #12
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	605a      	str	r2, [r3, #4]
	return t;
 8006180:	687b      	ldr	r3, [r7, #4]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <tensor_set_attribuites>:

// initial tensor
nnom_tensor_t* tensor_set_attribuites(nnom_tensor_t* t, nnom_qformat_t qfmt, uint32_t num_dim, nnom_shape_data_t* dim)
{
 800618a:	b480      	push	{r7}
 800618c:	b087      	sub	sp, #28
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	8139      	strh	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	603b      	str	r3, [r7, #0]
	t->qfmt = qfmt;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3309      	adds	r3, #9
 800619c:	f107 0208 	add.w	r2, r7, #8
 80061a0:	8812      	ldrh	r2, [r2, #0]
 80061a2:	801a      	strh	r2, [r3, #0]
	t->num_dim = num_dim;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < num_dim; i++)
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e00d      	b.n	80061ce <tensor_set_attribuites+0x44>
		t->dim[i] = dim[i];
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	441a      	add	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6859      	ldr	r1, [r3, #4]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	440b      	add	r3, r1
 80061c4:	8812      	ldrh	r2, [r2, #0]
 80061c6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < num_dim; i++)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	3301      	adds	r3, #1
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d8ed      	bhi.n	80061b2 <tensor_set_attribuites+0x28>
	return t;
 80061d6:	68fb      	ldr	r3, [r7, #12]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <tensor_cpy_attributes>:


// this method copy the attributes of a tensor to a new tensor
// Note, the tensors must have the same lenght. this method wont cpy the memory pointer data (we will assign memory later after building)
nnom_tensor_t* tensor_cpy_attributes(nnom_tensor_t* des, nnom_tensor_t* src)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
	des->num_dim = src->num_dim;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	7a1a      	ldrb	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	721a      	strb	r2, [r3, #8]
	des->qfmt = src->qfmt;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	3309      	adds	r3, #9
 80061fc:	3209      	adds	r2, #9
 80061fe:	8812      	ldrh	r2, [r2, #0]
 8006200:	801a      	strh	r2, [r3, #0]
	memcpy(des->dim, src->dim, src->num_dim * sizeof(nnom_shape_data_t));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6858      	ldr	r0, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	7a1b      	ldrb	r3, [r3, #8]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	461a      	mov	r2, r3
 8006212:	f002 faa1 	bl	8008758 <memcpy>
	return des;
 8006216:	687b      	ldr	r3, [r7, #4]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <nnom_predict>:
}

// stand alone prediction API
// this api test one set of data, return the prediction
nnom_status_t nnom_predict(nnom_model_t *m, uint32_t *label, float *prob)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	; 0x28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
	int32_t max_val, max_index, sum;
	int8_t *output;

	if (!m)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d102      	bne.n	8006238 <nnom_predict+0x18>
		return NN_ARGUMENT_ERROR;
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	e080      	b.n	800633a <nnom_predict+0x11a>

	model_run(m);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7fe fd93 	bl	8004d64 <model_run>

	// get the output memory
	output = m->tail->out->mem->blk;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	617b      	str	r3, [r7, #20]

	// multiple neural output
	if (tensor_size(m->tail->out->tensor) > 1)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff ff4d 	bl	80060f2 <tensor_size>
 8006258:	4603      	mov	r3, r0
 800625a:	2b01      	cmp	r3, #1
 800625c:	d94d      	bls.n	80062fa <nnom_predict+0xda>
	{
		// Top 1
		max_val = output[0];
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f993 3000 	ldrsb.w	r3, [r3]
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
		max_index = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	623b      	str	r3, [r7, #32]
		sum = max_val;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	61fb      	str	r3, [r7, #28]
		for (uint32_t i = 1; i < tensor_size(m->tail->out->tensor); i++)
 800626e:	2301      	movs	r3, #1
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e01c      	b.n	80062ae <nnom_predict+0x8e>
		{
			if (output[i] > max_val)
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	4413      	add	r3, r2
 800627a:	f993 3000 	ldrsb.w	r3, [r3]
 800627e:	461a      	mov	r2, r3
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	4293      	cmp	r3, r2
 8006284:	da07      	bge.n	8006296 <nnom_predict+0x76>
			{
				max_val = output[i];
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	4413      	add	r3, r2
 800628c:	f993 3000 	ldrsb.w	r3, [r3]
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
				max_index = i;
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	623b      	str	r3, [r7, #32]
			}
			sum += output[i];
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	4413      	add	r3, r2
 800629c:	f993 3000 	ldrsb.w	r3, [r3]
 80062a0:	461a      	mov	r2, r3
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	61fb      	str	r3, [r7, #28]
		for (uint32_t i = 1; i < tensor_size(m->tail->out->tensor); i++)
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff ff1b 	bl	80060f2 <tensor_size>
 80062bc:	4602      	mov	r2, r0
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d3d7      	bcc.n	8006274 <nnom_predict+0x54>
		}
		// send results
		*label = max_index;
 80062c4:	6a3a      	ldr	r2, [r7, #32]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	601a      	str	r2, [r3, #0]
		if(sum !=0)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00f      	beq.n	80062f0 <nnom_predict+0xd0>
			*prob = (float)max_val/(float)sum; 
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	edc3 7a00 	vstr	s15, [r3]
 80062ee:	e023      	b.n	8006338 <nnom_predict+0x118>
		else
			*prob = 0; 
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e01e      	b.n	8006338 <nnom_predict+0x118>
	}
	// single neural output
	else
	{
		*prob = (float)output[0] / 127.f;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f993 3000 	ldrsb.w	r3, [r3]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006308:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006344 <nnom_predict+0x124>
 800630c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	edc3 7a00 	vstr	s15, [r3]
		if (*prob >= 0.5f)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	edd3 7a00 	vldr	s15, [r3]
 800631c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006328:	db03      	blt.n	8006332 <nnom_predict+0x112>
			*label = 1;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2201      	movs	r2, #1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e002      	b.n	8006338 <nnom_predict+0x118>
		else
			*label = 0;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
	}
	
	return NN_SUCCESS;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3728      	adds	r7, #40	; 0x28
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	42fe0000 	.word	0x42fe0000

08006348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006380 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800634c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800634e:	e003      	b.n	8006358 <LoopCopyDataInit>

08006350 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006350:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006352:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006354:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006356:	3104      	adds	r1, #4

08006358 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006358:	480b      	ldr	r0, [pc, #44]	; (8006388 <LoopForever+0xa>)
	ldr	r3, =_edata
 800635a:	4b0c      	ldr	r3, [pc, #48]	; (800638c <LoopForever+0xe>)
	adds	r2, r0, r1
 800635c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800635e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006360:	d3f6      	bcc.n	8006350 <CopyDataInit>
	ldr	r2, =_sbss
 8006362:	4a0b      	ldr	r2, [pc, #44]	; (8006390 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006364:	e002      	b.n	800636c <LoopFillZerobss>

08006366 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006366:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006368:	f842 3b04 	str.w	r3, [r2], #4

0800636c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800636c:	4b09      	ldr	r3, [pc, #36]	; (8006394 <LoopForever+0x16>)
	cmp	r2, r3
 800636e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006370:	d3f9      	bcc.n	8006366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006372:	f7fd fc9b 	bl	8003cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006376:	f002 f9bb 	bl	80086f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800637a:	f7fd fa69 	bl	8003850 <main>

0800637e <LoopForever>:

LoopForever:
    b LoopForever
 800637e:	e7fe      	b.n	800637e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006380:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006384:	080130a8 	.word	0x080130a8
	ldr	r0, =_sdata
 8006388:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800638c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8006390:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8006394:	20000f00 	.word	0x20000f00

08006398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006398:	e7fe      	b.n	8006398 <ADC1_2_IRQHandler>

0800639a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063a4:	2003      	movs	r0, #3
 80063a6:	f000 f91b 	bl	80065e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063aa:	2000      	movs	r0, #0
 80063ac:	f000 f80e 	bl	80063cc <HAL_InitTick>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	71fb      	strb	r3, [r7, #7]
 80063ba:	e001      	b.n	80063c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80063bc:	f7fd fb46 	bl	8003a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80063c0:	79fb      	ldrb	r3, [r7, #7]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80063d8:	4b16      	ldr	r3, [pc, #88]	; (8006434 <HAL_InitTick+0x68>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d022      	beq.n	8006426 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <HAL_InitTick+0x6c>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	4b13      	ldr	r3, [pc, #76]	; (8006434 <HAL_InitTick+0x68>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 f91a 	bl	800662e <HAL_SYSTICK_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10f      	bne.n	8006420 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b0f      	cmp	r3, #15
 8006404:	d809      	bhi.n	800641a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006406:	2200      	movs	r2, #0
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	f04f 30ff 	mov.w	r0, #4294967295
 800640e:	f000 f8f2 	bl	80065f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006412:	4a0a      	ldr	r2, [pc, #40]	; (800643c <HAL_InitTick+0x70>)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	e007      	b.n	800642a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
 800641e:	e004      	b.n	800642a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
 8006424:	e001      	b.n	800642a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000008 	.word	0x20000008
 8006438:	20000000 	.word	0x20000000
 800643c:	20000004 	.word	0x20000004

08006440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <HAL_IncTick+0x1c>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <HAL_IncTick+0x20>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4413      	add	r3, r2
 800644e:	4a03      	ldr	r2, [pc, #12]	; (800645c <HAL_IncTick+0x1c>)
 8006450:	6013      	str	r3, [r2, #0]
}
 8006452:	bf00      	nop
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000ef8 	.word	0x20000ef8
 8006460:	20000008 	.word	0x20000008

08006464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
  return uwTick;
 8006468:	4b03      	ldr	r3, [pc, #12]	; (8006478 <HAL_GetTick+0x14>)
 800646a:	681b      	ldr	r3, [r3, #0]
}
 800646c:	4618      	mov	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	20000ef8 	.word	0x20000ef8

0800647c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800648c:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <__NVIC_SetPriorityGrouping+0x44>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006498:	4013      	ands	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064ae:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <__NVIC_SetPriorityGrouping+0x44>)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	60d3      	str	r3, [r2, #12]
}
 80064b4:	bf00      	nop
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	e000ed00 	.word	0xe000ed00

080064c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064c8:	4b04      	ldr	r3, [pc, #16]	; (80064dc <__NVIC_GetPriorityGrouping+0x18>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	0a1b      	lsrs	r3, r3, #8
 80064ce:	f003 0307 	and.w	r3, r3, #7
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	e000ed00 	.word	0xe000ed00

080064e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	6039      	str	r1, [r7, #0]
 80064ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db0a      	blt.n	800650a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	490c      	ldr	r1, [pc, #48]	; (800652c <__NVIC_SetPriority+0x4c>)
 80064fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fe:	0112      	lsls	r2, r2, #4
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	440b      	add	r3, r1
 8006504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006508:	e00a      	b.n	8006520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	b2da      	uxtb	r2, r3
 800650e:	4908      	ldr	r1, [pc, #32]	; (8006530 <__NVIC_SetPriority+0x50>)
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	3b04      	subs	r3, #4
 8006518:	0112      	lsls	r2, r2, #4
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	440b      	add	r3, r1
 800651e:	761a      	strb	r2, [r3, #24]
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	e000e100 	.word	0xe000e100
 8006530:	e000ed00 	.word	0xe000ed00

08006534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006534:	b480      	push	{r7}
 8006536:	b089      	sub	sp, #36	; 0x24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	bf28      	it	cs
 8006552:	2304      	movcs	r3, #4
 8006554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3304      	adds	r3, #4
 800655a:	2b06      	cmp	r3, #6
 800655c:	d902      	bls.n	8006564 <NVIC_EncodePriority+0x30>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	3b03      	subs	r3, #3
 8006562:	e000      	b.n	8006566 <NVIC_EncodePriority+0x32>
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43da      	mvns	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	401a      	ands	r2, r3
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800657c:	f04f 31ff 	mov.w	r1, #4294967295
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	fa01 f303 	lsl.w	r3, r1, r3
 8006586:	43d9      	mvns	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800658c:	4313      	orrs	r3, r2
         );
}
 800658e:	4618      	mov	r0, r3
 8006590:	3724      	adds	r7, #36	; 0x24
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ac:	d301      	bcc.n	80065b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065ae:	2301      	movs	r3, #1
 80065b0:	e00f      	b.n	80065d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065b2:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <SysTick_Config+0x40>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065ba:	210f      	movs	r1, #15
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	f7ff ff8e 	bl	80064e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <SysTick_Config+0x40>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065ca:	4b04      	ldr	r3, [pc, #16]	; (80065dc <SysTick_Config+0x40>)
 80065cc:	2207      	movs	r2, #7
 80065ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	e000e010 	.word	0xe000e010

080065e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ff47 	bl	800647c <__NVIC_SetPriorityGrouping>
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b086      	sub	sp, #24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	4603      	mov	r3, r0
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006608:	f7ff ff5c 	bl	80064c4 <__NVIC_GetPriorityGrouping>
 800660c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	6978      	ldr	r0, [r7, #20]
 8006614:	f7ff ff8e 	bl	8006534 <NVIC_EncodePriority>
 8006618:	4602      	mov	r2, r0
 800661a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff ff5d 	bl	80064e0 <__NVIC_SetPriority>
}
 8006626:	bf00      	nop
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff ffb0 	bl	800659c <SysTick_Config>
 800663c:	4603      	mov	r3, r0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006656:	e17f      	b.n	8006958 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	2101      	movs	r1, #1
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	4013      	ands	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 8171 	beq.w	8006952 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d00b      	beq.n	8006690 <HAL_GPIO_Init+0x48>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d007      	beq.n	8006690 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006684:	2b11      	cmp	r3, #17
 8006686:	d003      	beq.n	8006690 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b12      	cmp	r3, #18
 800668e:	d130      	bne.n	80066f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	2203      	movs	r2, #3
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4013      	ands	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066c6:	2201      	movs	r2, #1
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	43db      	mvns	r3, r3
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4013      	ands	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	091b      	lsrs	r3, r3, #4
 80066dc:	f003 0201 	and.w	r2, r3, #1
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d118      	bne.n	8006730 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006704:	2201      	movs	r2, #1
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	43db      	mvns	r3, r3
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4013      	ands	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	08db      	lsrs	r3, r3, #3
 800671a:	f003 0201 	and.w	r2, r3, #1
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	fa02 f303 	lsl.w	r3, r2, r3
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	2203      	movs	r2, #3
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	43db      	mvns	r3, r3
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4013      	ands	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	fa02 f303 	lsl.w	r3, r2, r3
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d003      	beq.n	8006770 <HAL_GPIO_Init+0x128>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b12      	cmp	r3, #18
 800676e:	d123      	bne.n	80067b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	08da      	lsrs	r2, r3, #3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3208      	adds	r2, #8
 8006778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	220f      	movs	r2, #15
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	43db      	mvns	r3, r3
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4013      	ands	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	08da      	lsrs	r2, r3, #3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3208      	adds	r2, #8
 80067b2:	6939      	ldr	r1, [r7, #16]
 80067b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	2203      	movs	r2, #3
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	43db      	mvns	r3, r3
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4013      	ands	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f003 0203 	and.w	r2, r3, #3
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80ac 	beq.w	8006952 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067fa:	4b5e      	ldr	r3, [pc, #376]	; (8006974 <HAL_GPIO_Init+0x32c>)
 80067fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fe:	4a5d      	ldr	r2, [pc, #372]	; (8006974 <HAL_GPIO_Init+0x32c>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6613      	str	r3, [r2, #96]	; 0x60
 8006806:	4b5b      	ldr	r3, [pc, #364]	; (8006974 <HAL_GPIO_Init+0x32c>)
 8006808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	60bb      	str	r3, [r7, #8]
 8006810:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006812:	4a59      	ldr	r2, [pc, #356]	; (8006978 <HAL_GPIO_Init+0x330>)
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	089b      	lsrs	r3, r3, #2
 8006818:	3302      	adds	r3, #2
 800681a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800681e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	220f      	movs	r2, #15
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43db      	mvns	r3, r3
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4013      	ands	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800683c:	d025      	beq.n	800688a <HAL_GPIO_Init+0x242>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a4e      	ldr	r2, [pc, #312]	; (800697c <HAL_GPIO_Init+0x334>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d01f      	beq.n	8006886 <HAL_GPIO_Init+0x23e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a4d      	ldr	r2, [pc, #308]	; (8006980 <HAL_GPIO_Init+0x338>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d019      	beq.n	8006882 <HAL_GPIO_Init+0x23a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a4c      	ldr	r2, [pc, #304]	; (8006984 <HAL_GPIO_Init+0x33c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_GPIO_Init+0x236>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a4b      	ldr	r2, [pc, #300]	; (8006988 <HAL_GPIO_Init+0x340>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00d      	beq.n	800687a <HAL_GPIO_Init+0x232>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a4a      	ldr	r2, [pc, #296]	; (800698c <HAL_GPIO_Init+0x344>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d007      	beq.n	8006876 <HAL_GPIO_Init+0x22e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a49      	ldr	r2, [pc, #292]	; (8006990 <HAL_GPIO_Init+0x348>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d101      	bne.n	8006872 <HAL_GPIO_Init+0x22a>
 800686e:	2306      	movs	r3, #6
 8006870:	e00c      	b.n	800688c <HAL_GPIO_Init+0x244>
 8006872:	2307      	movs	r3, #7
 8006874:	e00a      	b.n	800688c <HAL_GPIO_Init+0x244>
 8006876:	2305      	movs	r3, #5
 8006878:	e008      	b.n	800688c <HAL_GPIO_Init+0x244>
 800687a:	2304      	movs	r3, #4
 800687c:	e006      	b.n	800688c <HAL_GPIO_Init+0x244>
 800687e:	2303      	movs	r3, #3
 8006880:	e004      	b.n	800688c <HAL_GPIO_Init+0x244>
 8006882:	2302      	movs	r3, #2
 8006884:	e002      	b.n	800688c <HAL_GPIO_Init+0x244>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <HAL_GPIO_Init+0x244>
 800688a:	2300      	movs	r3, #0
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	f002 0203 	and.w	r2, r2, #3
 8006892:	0092      	lsls	r2, r2, #2
 8006894:	4093      	lsls	r3, r2
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800689c:	4936      	ldr	r1, [pc, #216]	; (8006978 <HAL_GPIO_Init+0x330>)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	089b      	lsrs	r3, r3, #2
 80068a2:	3302      	adds	r3, #2
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80068aa:	4b3a      	ldr	r3, [pc, #232]	; (8006994 <HAL_GPIO_Init+0x34c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4013      	ands	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068ce:	4a31      	ldr	r2, [pc, #196]	; (8006994 <HAL_GPIO_Init+0x34c>)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80068d4:	4b2f      	ldr	r3, [pc, #188]	; (8006994 <HAL_GPIO_Init+0x34c>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	43db      	mvns	r3, r3
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4013      	ands	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068f8:	4a26      	ldr	r2, [pc, #152]	; (8006994 <HAL_GPIO_Init+0x34c>)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068fe:	4b25      	ldr	r3, [pc, #148]	; (8006994 <HAL_GPIO_Init+0x34c>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	43db      	mvns	r3, r3
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4013      	ands	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006922:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <HAL_GPIO_Init+0x34c>)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006928:	4b1a      	ldr	r3, [pc, #104]	; (8006994 <HAL_GPIO_Init+0x34c>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	43db      	mvns	r3, r3
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4013      	ands	r3, r2
 8006936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800694c:	4a11      	ldr	r2, [pc, #68]	; (8006994 <HAL_GPIO_Init+0x34c>)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	3301      	adds	r3, #1
 8006956:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	fa22 f303 	lsr.w	r3, r2, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	f47f ae78 	bne.w	8006658 <HAL_GPIO_Init+0x10>
  }
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40021000 	.word	0x40021000
 8006978:	40010000 	.word	0x40010000
 800697c:	48000400 	.word	0x48000400
 8006980:	48000800 	.word	0x48000800
 8006984:	48000c00 	.word	0x48000c00
 8006988:	48001000 	.word	0x48001000
 800698c:	48001400 	.word	0x48001400
 8006990:	48001800 	.word	0x48001800
 8006994:	40010400 	.word	0x40010400

08006998 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800699c:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40007000 	.word	0x40007000

080069b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c2:	d130      	bne.n	8006a26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80069c4:	4b23      	ldr	r3, [pc, #140]	; (8006a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d0:	d038      	beq.n	8006a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069d2:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069da:	4a1e      	ldr	r2, [pc, #120]	; (8006a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069e2:	4b1d      	ldr	r3, [pc, #116]	; (8006a58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2232      	movs	r2, #50	; 0x32
 80069e8:	fb02 f303 	mul.w	r3, r2, r3
 80069ec:	4a1b      	ldr	r2, [pc, #108]	; (8006a5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80069ee:	fba2 2303 	umull	r2, r3, r2, r3
 80069f2:	0c9b      	lsrs	r3, r3, #18
 80069f4:	3301      	adds	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069f8:	e002      	b.n	8006a00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a00:	4b14      	ldr	r3, [pc, #80]	; (8006a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0c:	d102      	bne.n	8006a14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1f2      	bne.n	80069fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a14:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a20:	d110      	bne.n	8006a44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e00f      	b.n	8006a46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a32:	d007      	beq.n	8006a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a34:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a3c:	4a05      	ldr	r2, [pc, #20]	; (8006a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40007000 	.word	0x40007000
 8006a58:	20000000 	.word	0x20000000
 8006a5c:	431bde83 	.word	0x431bde83

08006a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e3d4      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a72:	4ba1      	ldr	r3, [pc, #644]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a7c:	4b9e      	ldr	r3, [pc, #632]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 80e4 	beq.w	8006c5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <HAL_RCC_OscConfig+0x4a>
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b0c      	cmp	r3, #12
 8006a9e:	f040 808b 	bne.w	8006bb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	f040 8087 	bne.w	8006bb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006aaa:	4b93      	ldr	r3, [pc, #588]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x62>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e3ac      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1a      	ldr	r2, [r3, #32]
 8006ac6:	4b8c      	ldr	r3, [pc, #560]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <HAL_RCC_OscConfig+0x7c>
 8006ad2:	4b89      	ldr	r3, [pc, #548]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ada:	e005      	b.n	8006ae8 <HAL_RCC_OscConfig+0x88>
 8006adc:	4b86      	ldr	r3, [pc, #536]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae2:	091b      	lsrs	r3, r3, #4
 8006ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d223      	bcs.n	8006b34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fd3f 	bl	8007574 <RCC_SetFlashLatencyFromMSIRange>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e38d      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b00:	4b7d      	ldr	r3, [pc, #500]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a7c      	ldr	r2, [pc, #496]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b06:	f043 0308 	orr.w	r3, r3, #8
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	4b7a      	ldr	r3, [pc, #488]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	4977      	ldr	r1, [pc, #476]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b1e:	4b76      	ldr	r3, [pc, #472]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	4972      	ldr	r1, [pc, #456]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	604b      	str	r3, [r1, #4]
 8006b32:	e025      	b.n	8006b80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b34:	4b70      	ldr	r3, [pc, #448]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a6f      	ldr	r2, [pc, #444]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b3a:	f043 0308 	orr.w	r3, r3, #8
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	4b6d      	ldr	r3, [pc, #436]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	496a      	ldr	r1, [pc, #424]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b52:	4b69      	ldr	r3, [pc, #420]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	4965      	ldr	r1, [pc, #404]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fcff 	bl	8007574 <RCC_SetFlashLatencyFromMSIRange>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e34d      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b80:	f000 fc36 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 8006b84:	4601      	mov	r1, r0
 8006b86:	4b5c      	ldr	r3, [pc, #368]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	091b      	lsrs	r3, r3, #4
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	4a5a      	ldr	r2, [pc, #360]	; (8006cfc <HAL_RCC_OscConfig+0x29c>)
 8006b92:	5cd3      	ldrb	r3, [r2, r3]
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	fa21 f303 	lsr.w	r3, r1, r3
 8006b9c:	4a58      	ldr	r2, [pc, #352]	; (8006d00 <HAL_RCC_OscConfig+0x2a0>)
 8006b9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ba0:	4b58      	ldr	r3, [pc, #352]	; (8006d04 <HAL_RCC_OscConfig+0x2a4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fc11 	bl	80063cc <HAL_InitTick>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d052      	beq.n	8006c5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	e331      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d032      	beq.n	8006c26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006bc0:	4b4d      	ldr	r3, [pc, #308]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a4c      	ldr	r2, [pc, #304]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bcc:	f7ff fc4a 	bl	8006464 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bd4:	f7ff fc46 	bl	8006464 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e31a      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006be6:	4b44      	ldr	r3, [pc, #272]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bf2:	4b41      	ldr	r3, [pc, #260]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a40      	ldr	r2, [pc, #256]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006bf8:	f043 0308 	orr.w	r3, r3, #8
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	4b3e      	ldr	r3, [pc, #248]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	493b      	ldr	r1, [pc, #236]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c10:	4b39      	ldr	r3, [pc, #228]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	4936      	ldr	r1, [pc, #216]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	604b      	str	r3, [r1, #4]
 8006c24:	e01a      	b.n	8006c5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c26:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a33      	ldr	r2, [pc, #204]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c32:	f7ff fc17 	bl	8006464 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c3a:	f7ff fc13 	bl	8006464 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e2e7      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c4c:	4b2a      	ldr	r3, [pc, #168]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f0      	bne.n	8006c3a <HAL_RCC_OscConfig+0x1da>
 8006c58:	e000      	b.n	8006c5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d074      	beq.n	8006d52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d005      	beq.n	8006c7a <HAL_RCC_OscConfig+0x21a>
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b0c      	cmp	r3, #12
 8006c72:	d10e      	bne.n	8006c92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d10b      	bne.n	8006c92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c7a:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d064      	beq.n	8006d50 <HAL_RCC_OscConfig+0x2f0>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d160      	bne.n	8006d50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e2c4      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9a:	d106      	bne.n	8006caa <HAL_RCC_OscConfig+0x24a>
 8006c9c:	4b16      	ldr	r3, [pc, #88]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a15      	ldr	r2, [pc, #84]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	e01d      	b.n	8006ce6 <HAL_RCC_OscConfig+0x286>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cb2:	d10c      	bne.n	8006cce <HAL_RCC_OscConfig+0x26e>
 8006cb4:	4b10      	ldr	r3, [pc, #64]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a0f      	ldr	r2, [pc, #60]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a0c      	ldr	r2, [pc, #48]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	e00b      	b.n	8006ce6 <HAL_RCC_OscConfig+0x286>
 8006cce:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a09      	ldr	r2, [pc, #36]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a06      	ldr	r2, [pc, #24]	; (8006cf8 <HAL_RCC_OscConfig+0x298>)
 8006ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ce4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d01c      	beq.n	8006d28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cee:	f7ff fbb9 	bl	8006464 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cf4:	e011      	b.n	8006d1a <HAL_RCC_OscConfig+0x2ba>
 8006cf6:	bf00      	nop
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	08012c20 	.word	0x08012c20
 8006d00:	20000000 	.word	0x20000000
 8006d04:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d08:	f7ff fbac 	bl	8006464 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b64      	cmp	r3, #100	; 0x64
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e280      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d1a:	4baf      	ldr	r3, [pc, #700]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f0      	beq.n	8006d08 <HAL_RCC_OscConfig+0x2a8>
 8006d26:	e014      	b.n	8006d52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7ff fb9c 	bl	8006464 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d30:	f7ff fb98 	bl	8006464 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b64      	cmp	r3, #100	; 0x64
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e26c      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d42:	4ba5      	ldr	r3, [pc, #660]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0x2d0>
 8006d4e:	e000      	b.n	8006d52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d060      	beq.n	8006e20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d005      	beq.n	8006d70 <HAL_RCC_OscConfig+0x310>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b0c      	cmp	r3, #12
 8006d68:	d119      	bne.n	8006d9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d116      	bne.n	8006d9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d70:	4b99      	ldr	r3, [pc, #612]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <HAL_RCC_OscConfig+0x328>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e249      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d88:	4b93      	ldr	r3, [pc, #588]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	061b      	lsls	r3, r3, #24
 8006d96:	4990      	ldr	r1, [pc, #576]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d9c:	e040      	b.n	8006e20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d023      	beq.n	8006dee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da6:	4b8c      	ldr	r3, [pc, #560]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a8b      	ldr	r2, [pc, #556]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7ff fb57 	bl	8006464 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dba:	f7ff fb53 	bl	8006464 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e227      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dcc:	4b82      	ldr	r3, [pc, #520]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd8:	4b7f      	ldr	r3, [pc, #508]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	061b      	lsls	r3, r3, #24
 8006de6:	497c      	ldr	r1, [pc, #496]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	604b      	str	r3, [r1, #4]
 8006dec:	e018      	b.n	8006e20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dee:	4b7a      	ldr	r3, [pc, #488]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a79      	ldr	r2, [pc, #484]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfa:	f7ff fb33 	bl	8006464 <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e00:	e008      	b.n	8006e14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e02:	f7ff fb2f 	bl	8006464 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e203      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e14:	4b70      	ldr	r3, [pc, #448]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f0      	bne.n	8006e02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d03c      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01c      	beq.n	8006e6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e34:	4b68      	ldr	r3, [pc, #416]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e3a:	4a67      	ldr	r2, [pc, #412]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e44:	f7ff fb0e 	bl	8006464 <HAL_GetTick>
 8006e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e4c:	f7ff fb0a 	bl	8006464 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e1de      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e5e:	4b5e      	ldr	r3, [pc, #376]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0ef      	beq.n	8006e4c <HAL_RCC_OscConfig+0x3ec>
 8006e6c:	e01b      	b.n	8006ea6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e6e:	4b5a      	ldr	r3, [pc, #360]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e74:	4a58      	ldr	r2, [pc, #352]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006e76:	f023 0301 	bic.w	r3, r3, #1
 8006e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7e:	f7ff faf1 	bl	8006464 <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e86:	f7ff faed 	bl	8006464 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e1c1      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e98:	4b4f      	ldr	r3, [pc, #316]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1ef      	bne.n	8006e86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80a6 	beq.w	8007000 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006eb8:	4b47      	ldr	r3, [pc, #284]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10d      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ec4:	4b44      	ldr	r3, [pc, #272]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	4a43      	ldr	r2, [pc, #268]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ece:	6593      	str	r3, [r2, #88]	; 0x58
 8006ed0:	4b41      	ldr	r3, [pc, #260]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	60bb      	str	r3, [r7, #8]
 8006eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006edc:	2301      	movs	r3, #1
 8006ede:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ee0:	4b3e      	ldr	r3, [pc, #248]	; (8006fdc <HAL_RCC_OscConfig+0x57c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d118      	bne.n	8006f1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eec:	4b3b      	ldr	r3, [pc, #236]	; (8006fdc <HAL_RCC_OscConfig+0x57c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a3a      	ldr	r2, [pc, #232]	; (8006fdc <HAL_RCC_OscConfig+0x57c>)
 8006ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ef8:	f7ff fab4 	bl	8006464 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f00:	f7ff fab0 	bl	8006464 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e184      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f12:	4b32      	ldr	r3, [pc, #200]	; (8006fdc <HAL_RCC_OscConfig+0x57c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f0      	beq.n	8006f00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d108      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4d8>
 8006f26:	4b2c      	ldr	r3, [pc, #176]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2c:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f36:	e024      	b.n	8006f82 <HAL_RCC_OscConfig+0x522>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b05      	cmp	r3, #5
 8006f3e:	d110      	bne.n	8006f62 <HAL_RCC_OscConfig+0x502>
 8006f40:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f46:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f48:	f043 0304 	orr.w	r3, r3, #4
 8006f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f50:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f56:	4a20      	ldr	r2, [pc, #128]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f60:	e00f      	b.n	8006f82 <HAL_RCC_OscConfig+0x522>
 8006f62:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f68:	4a1b      	ldr	r2, [pc, #108]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f6a:	f023 0301 	bic.w	r3, r3, #1
 8006f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f72:	4b19      	ldr	r3, [pc, #100]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f78:	4a17      	ldr	r2, [pc, #92]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006f7a:	f023 0304 	bic.w	r3, r3, #4
 8006f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d016      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8a:	f7ff fa6b 	bl	8006464 <HAL_GetTick>
 8006f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f90:	e00a      	b.n	8006fa8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f92:	f7ff fa67 	bl	8006464 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e139      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <HAL_RCC_OscConfig+0x578>)
 8006faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0ed      	beq.n	8006f92 <HAL_RCC_OscConfig+0x532>
 8006fb6:	e01a      	b.n	8006fee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb8:	f7ff fa54 	bl	8006464 <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fbe:	e00f      	b.n	8006fe0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc0:	f7ff fa50 	bl	8006464 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d906      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e122      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
 8006fd6:	bf00      	nop
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fe0:	4b90      	ldr	r3, [pc, #576]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8006fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e8      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fee:	7ffb      	ldrb	r3, [r7, #31]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d105      	bne.n	8007000 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ff4:	4b8b      	ldr	r3, [pc, #556]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff8:	4a8a      	ldr	r2, [pc, #552]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8006ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ffe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8108 	beq.w	800721a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	2b02      	cmp	r3, #2
 8007010:	f040 80d0 	bne.w	80071b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007014:	4b83      	ldr	r3, [pc, #524]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f003 0203 	and.w	r2, r3, #3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	429a      	cmp	r2, r3
 8007026:	d130      	bne.n	800708a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	3b01      	subs	r3, #1
 8007034:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007036:	429a      	cmp	r2, r3
 8007038:	d127      	bne.n	800708a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007046:	429a      	cmp	r2, r3
 8007048:	d11f      	bne.n	800708a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007054:	2a07      	cmp	r2, #7
 8007056:	bf14      	ite	ne
 8007058:	2201      	movne	r2, #1
 800705a:	2200      	moveq	r2, #0
 800705c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800705e:	4293      	cmp	r3, r2
 8007060:	d113      	bne.n	800708a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	3b01      	subs	r3, #1
 8007070:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007072:	429a      	cmp	r2, r3
 8007074:	d109      	bne.n	800708a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	3b01      	subs	r3, #1
 8007084:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007086:	429a      	cmp	r2, r3
 8007088:	d06e      	beq.n	8007168 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b0c      	cmp	r3, #12
 800708e:	d069      	beq.n	8007164 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007090:	4b64      	ldr	r3, [pc, #400]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800709c:	4b61      	ldr	r3, [pc, #388]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0b7      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80070ac:	4b5d      	ldr	r3, [pc, #372]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a5c      	ldr	r2, [pc, #368]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80070b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070b8:	f7ff f9d4 	bl	8006464 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c0:	f7ff f9d0 	bl	8006464 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e0a4      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070d2:	4b54      	ldr	r3, [pc, #336]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070de:	4b51      	ldr	r3, [pc, #324]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	4b51      	ldr	r3, [pc, #324]	; (8007228 <HAL_RCC_OscConfig+0x7c8>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80070ee:	3a01      	subs	r2, #1
 80070f0:	0112      	lsls	r2, r2, #4
 80070f2:	4311      	orrs	r1, r2
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070f8:	0212      	lsls	r2, r2, #8
 80070fa:	4311      	orrs	r1, r2
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007100:	0852      	lsrs	r2, r2, #1
 8007102:	3a01      	subs	r2, #1
 8007104:	0552      	lsls	r2, r2, #21
 8007106:	4311      	orrs	r1, r2
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800710c:	0852      	lsrs	r2, r2, #1
 800710e:	3a01      	subs	r2, #1
 8007110:	0652      	lsls	r2, r2, #25
 8007112:	4311      	orrs	r1, r2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007118:	0912      	lsrs	r2, r2, #4
 800711a:	0452      	lsls	r2, r2, #17
 800711c:	430a      	orrs	r2, r1
 800711e:	4941      	ldr	r1, [pc, #260]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007120:	4313      	orrs	r3, r2
 8007122:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007124:	4b3f      	ldr	r3, [pc, #252]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a3e      	ldr	r2, [pc, #248]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 800712a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800712e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007130:	4b3c      	ldr	r3, [pc, #240]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	4a3b      	ldr	r2, [pc, #236]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800713a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800713c:	f7ff f992 	bl	8006464 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007144:	f7ff f98e 	bl	8006464 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e062      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007156:	4b33      	ldr	r3, [pc, #204]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007162:	e05a      	b.n	800721a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e059      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007168:	4b2e      	ldr	r3, [pc, #184]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d152      	bne.n	800721a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007174:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a2a      	ldr	r2, [pc, #168]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 800717a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800717e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007180:	4b28      	ldr	r3, [pc, #160]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	4a27      	ldr	r2, [pc, #156]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 8007186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800718a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800718c:	f7ff f96a 	bl	8006464 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007194:	f7ff f966 	bl	8006464 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e03a      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071a6:	4b1f      	ldr	r3, [pc, #124]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f0      	beq.n	8007194 <HAL_RCC_OscConfig+0x734>
 80071b2:	e032      	b.n	800721a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b0c      	cmp	r3, #12
 80071b8:	d02d      	beq.n	8007216 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ba:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a19      	ldr	r2, [pc, #100]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80071c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80071c6:	4b17      	ldr	r3, [pc, #92]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d105      	bne.n	80071de <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80071d2:	4b14      	ldr	r3, [pc, #80]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	4a13      	ldr	r2, [pc, #76]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80071de:	4b11      	ldr	r3, [pc, #68]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	4a10      	ldr	r2, [pc, #64]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 80071e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80071e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ee:	f7ff f939 	bl	8006464 <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f6:	f7ff f935 	bl	8006464 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e009      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007208:	4b06      	ldr	r3, [pc, #24]	; (8007224 <HAL_RCC_OscConfig+0x7c4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f0      	bne.n	80071f6 <HAL_RCC_OscConfig+0x796>
 8007214:	e001      	b.n	800721a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40021000 	.word	0x40021000
 8007228:	f99d808c 	.word	0xf99d808c

0800722c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e0c8      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007240:	4b66      	ldr	r3, [pc, #408]	; (80073dc <HAL_RCC_ClockConfig+0x1b0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d910      	bls.n	8007270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724e:	4b63      	ldr	r3, [pc, #396]	; (80073dc <HAL_RCC_ClockConfig+0x1b0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f023 0207 	bic.w	r2, r3, #7
 8007256:	4961      	ldr	r1, [pc, #388]	; (80073dc <HAL_RCC_ClockConfig+0x1b0>)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	4313      	orrs	r3, r2
 800725c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800725e:	4b5f      	ldr	r3, [pc, #380]	; (80073dc <HAL_RCC_ClockConfig+0x1b0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d001      	beq.n	8007270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0b0      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d04c      	beq.n	8007316 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2b03      	cmp	r3, #3
 8007282:	d107      	bne.n	8007294 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007284:	4b56      	ldr	r3, [pc, #344]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d121      	bne.n	80072d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e09e      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d107      	bne.n	80072ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800729c:	4b50      	ldr	r3, [pc, #320]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d115      	bne.n	80072d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e092      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d107      	bne.n	80072c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072b4:	4b4a      	ldr	r3, [pc, #296]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d109      	bne.n	80072d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e086      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072c4:	4b46      	ldr	r3, [pc, #280]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e07e      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072d4:	4b42      	ldr	r3, [pc, #264]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f023 0203 	bic.w	r2, r3, #3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	493f      	ldr	r1, [pc, #252]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e6:	f7ff f8bd 	bl	8006464 <HAL_GetTick>
 80072ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ec:	e00a      	b.n	8007304 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072ee:	f7ff f8b9 	bl	8006464 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e066      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007304:	4b36      	ldr	r3, [pc, #216]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 020c 	and.w	r2, r3, #12
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	429a      	cmp	r2, r3
 8007314:	d1eb      	bne.n	80072ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d008      	beq.n	8007334 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007322:	4b2f      	ldr	r3, [pc, #188]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	492c      	ldr	r1, [pc, #176]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 8007330:	4313      	orrs	r3, r2
 8007332:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007334:	4b29      	ldr	r3, [pc, #164]	; (80073dc <HAL_RCC_ClockConfig+0x1b0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d210      	bcs.n	8007364 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <HAL_RCC_ClockConfig+0x1b0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f023 0207 	bic.w	r2, r3, #7
 800734a:	4924      	ldr	r1, [pc, #144]	; (80073dc <HAL_RCC_ClockConfig+0x1b0>)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	4313      	orrs	r3, r2
 8007350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007352:	4b22      	ldr	r3, [pc, #136]	; (80073dc <HAL_RCC_ClockConfig+0x1b0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d001      	beq.n	8007364 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e036      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007370:	4b1b      	ldr	r3, [pc, #108]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4918      	ldr	r1, [pc, #96]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 800737e:	4313      	orrs	r3, r2
 8007380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800738e:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4910      	ldr	r1, [pc, #64]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073a2:	f000 f825 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 80073a6:	4601      	mov	r1, r0
 80073a8:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <HAL_RCC_ClockConfig+0x1b4>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	091b      	lsrs	r3, r3, #4
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	4a0c      	ldr	r2, [pc, #48]	; (80073e4 <HAL_RCC_ClockConfig+0x1b8>)
 80073b4:	5cd3      	ldrb	r3, [r2, r3]
 80073b6:	f003 031f 	and.w	r3, r3, #31
 80073ba:	fa21 f303 	lsr.w	r3, r1, r3
 80073be:	4a0a      	ldr	r2, [pc, #40]	; (80073e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073c2:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <HAL_RCC_ClockConfig+0x1c0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff f800 	bl	80063cc <HAL_InitTick>
 80073cc:	4603      	mov	r3, r0
 80073ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80073d0:	7afb      	ldrb	r3, [r7, #11]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40022000 	.word	0x40022000
 80073e0:	40021000 	.word	0x40021000
 80073e4:	08012c20 	.word	0x08012c20
 80073e8:	20000000 	.word	0x20000000
 80073ec:	20000004 	.word	0x20000004

080073f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b089      	sub	sp, #36	; 0x24
 80073f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073fe:	4b3d      	ldr	r3, [pc, #244]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 030c 	and.w	r3, r3, #12
 8007406:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007408:	4b3a      	ldr	r3, [pc, #232]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <HAL_RCC_GetSysClockFreq+0x34>
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2b0c      	cmp	r3, #12
 800741c:	d121      	bne.n	8007462 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d11e      	bne.n	8007462 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007424:	4b33      	ldr	r3, [pc, #204]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0308 	and.w	r3, r3, #8
 800742c:	2b00      	cmp	r3, #0
 800742e:	d107      	bne.n	8007440 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007430:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007436:	0a1b      	lsrs	r3, r3, #8
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	61fb      	str	r3, [r7, #28]
 800743e:	e005      	b.n	800744c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007440:	4b2c      	ldr	r3, [pc, #176]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	091b      	lsrs	r3, r3, #4
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800744c:	4a2a      	ldr	r2, [pc, #168]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007454:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007460:	e00a      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b04      	cmp	r3, #4
 8007466:	d102      	bne.n	800746e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007468:	4b24      	ldr	r3, [pc, #144]	; (80074fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800746a:	61bb      	str	r3, [r7, #24]
 800746c:	e004      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b08      	cmp	r3, #8
 8007472:	d101      	bne.n	8007478 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007474:	4b22      	ldr	r3, [pc, #136]	; (8007500 <HAL_RCC_GetSysClockFreq+0x110>)
 8007476:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	2b0c      	cmp	r3, #12
 800747c:	d133      	bne.n	80074e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800747e:	4b1d      	ldr	r3, [pc, #116]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 0303 	and.w	r3, r3, #3
 8007486:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d002      	beq.n	8007494 <HAL_RCC_GetSysClockFreq+0xa4>
 800748e:	2b03      	cmp	r3, #3
 8007490:	d003      	beq.n	800749a <HAL_RCC_GetSysClockFreq+0xaa>
 8007492:	e005      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007494:	4b19      	ldr	r3, [pc, #100]	; (80074fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8007496:	617b      	str	r3, [r7, #20]
      break;
 8007498:	e005      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800749a:	4b19      	ldr	r3, [pc, #100]	; (8007500 <HAL_RCC_GetSysClockFreq+0x110>)
 800749c:	617b      	str	r3, [r7, #20]
      break;
 800749e:	e002      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	617b      	str	r3, [r7, #20]
      break;
 80074a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074a6:	4b13      	ldr	r3, [pc, #76]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	3301      	adds	r3, #1
 80074b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80074b4:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	fb02 f203 	mul.w	r2, r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	0e5b      	lsrs	r3, r3, #25
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	3301      	adds	r3, #1
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80074e6:	69bb      	ldr	r3, [r7, #24]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3724      	adds	r7, #36	; 0x24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	40021000 	.word	0x40021000
 80074f8:	08012c38 	.word	0x08012c38
 80074fc:	00f42400 	.word	0x00f42400
 8007500:	007a1200 	.word	0x007a1200

08007504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007508:	4b03      	ldr	r3, [pc, #12]	; (8007518 <HAL_RCC_GetHCLKFreq+0x14>)
 800750a:	681b      	ldr	r3, [r3, #0]
}
 800750c:	4618      	mov	r0, r3
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20000000 	.word	0x20000000

0800751c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007520:	f7ff fff0 	bl	8007504 <HAL_RCC_GetHCLKFreq>
 8007524:	4601      	mov	r1, r0
 8007526:	4b06      	ldr	r3, [pc, #24]	; (8007540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	4a04      	ldr	r2, [pc, #16]	; (8007544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007532:	5cd3      	ldrb	r3, [r2, r3]
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800753c:	4618      	mov	r0, r3
 800753e:	bd80      	pop	{r7, pc}
 8007540:	40021000 	.word	0x40021000
 8007544:	08012c30 	.word	0x08012c30

08007548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800754c:	f7ff ffda 	bl	8007504 <HAL_RCC_GetHCLKFreq>
 8007550:	4601      	mov	r1, r0
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	0adb      	lsrs	r3, r3, #11
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	4a04      	ldr	r2, [pc, #16]	; (8007570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800755e:	5cd3      	ldrb	r3, [r2, r3]
 8007560:	f003 031f 	and.w	r3, r3, #31
 8007564:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40021000 	.word	0x40021000
 8007570:	08012c30 	.word	0x08012c30

08007574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007580:	4b2a      	ldr	r3, [pc, #168]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800758c:	f7ff fa04 	bl	8006998 <HAL_PWREx_GetVoltageRange>
 8007590:	6178      	str	r0, [r7, #20]
 8007592:	e014      	b.n	80075be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007594:	4b25      	ldr	r3, [pc, #148]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007598:	4a24      	ldr	r2, [pc, #144]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800759a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800759e:	6593      	str	r3, [r2, #88]	; 0x58
 80075a0:	4b22      	ldr	r3, [pc, #136]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80075ac:	f7ff f9f4 	bl	8006998 <HAL_PWREx_GetVoltageRange>
 80075b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80075b2:	4b1e      	ldr	r3, [pc, #120]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	4a1d      	ldr	r2, [pc, #116]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c4:	d10b      	bne.n	80075de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	d919      	bls.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2ba0      	cmp	r3, #160	; 0xa0
 80075d0:	d902      	bls.n	80075d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80075d2:	2302      	movs	r3, #2
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	e013      	b.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80075d8:	2301      	movs	r3, #1
 80075da:	613b      	str	r3, [r7, #16]
 80075dc:	e010      	b.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b80      	cmp	r3, #128	; 0x80
 80075e2:	d902      	bls.n	80075ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80075e4:	2303      	movs	r3, #3
 80075e6:	613b      	str	r3, [r7, #16]
 80075e8:	e00a      	b.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d102      	bne.n	80075f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80075f0:	2302      	movs	r3, #2
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	e004      	b.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b70      	cmp	r3, #112	; 0x70
 80075fa:	d101      	bne.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80075fc:	2301      	movs	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f023 0207 	bic.w	r2, r3, #7
 8007608:	4909      	ldr	r1, [pc, #36]	; (8007630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	429a      	cmp	r2, r3
 800761c:	d001      	beq.n	8007622 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40021000 	.word	0x40021000
 8007630:	40022000 	.word	0x40022000

08007634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800763c:	2300      	movs	r3, #0
 800763e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007640:	2300      	movs	r3, #0
 8007642:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800764c:	2b00      	cmp	r3, #0
 800764e:	d03f      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007658:	d01c      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800765a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800765e:	d802      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00e      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007664:	e01f      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007666:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800766a:	d003      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800766c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007670:	d01c      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007672:	e018      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007674:	4b85      	ldr	r3, [pc, #532]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	4a84      	ldr	r2, [pc, #528]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800767a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800767e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007680:	e015      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3304      	adds	r3, #4
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fab9 	bl	8007c00 <RCCEx_PLLSAI1_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007692:	e00c      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3320      	adds	r3, #32
 8007698:	2100      	movs	r1, #0
 800769a:	4618      	mov	r0, r3
 800769c:	f000 fba0 	bl	8007de0 <RCCEx_PLLSAI2_Config>
 80076a0:	4603      	mov	r3, r0
 80076a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076a4:	e003      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	74fb      	strb	r3, [r7, #19]
      break;
 80076aa:	e000      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80076ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ae:	7cfb      	ldrb	r3, [r7, #19]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10b      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076b4:	4b75      	ldr	r3, [pc, #468]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c2:	4972      	ldr	r1, [pc, #456]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80076ca:	e001      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076cc:	7cfb      	ldrb	r3, [r7, #19]
 80076ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d03f      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076e4:	d01c      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80076e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076ea:	d802      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xda>
 80076f0:	e01f      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80076f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076f6:	d003      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80076f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076fc:	d01c      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80076fe:	e018      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007700:	4b62      	ldr	r3, [pc, #392]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	4a61      	ldr	r2, [pc, #388]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800770a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800770c:	e015      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3304      	adds	r3, #4
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fa73 	bl	8007c00 <RCCEx_PLLSAI1_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800771e:	e00c      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3320      	adds	r3, #32
 8007724:	2100      	movs	r1, #0
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fb5a 	bl	8007de0 <RCCEx_PLLSAI2_Config>
 800772c:	4603      	mov	r3, r0
 800772e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007730:	e003      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	74fb      	strb	r3, [r7, #19]
      break;
 8007736:	e000      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800773a:	7cfb      	ldrb	r3, [r7, #19]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007740:	4b52      	ldr	r3, [pc, #328]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007746:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800774e:	494f      	ldr	r1, [pc, #316]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007756:	e001      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007758:	7cfb      	ldrb	r3, [r7, #19]
 800775a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80a0 	beq.w	80078aa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800776a:	2300      	movs	r3, #0
 800776c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800776e:	4b47      	ldr	r3, [pc, #284]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800777e:	2300      	movs	r3, #0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00d      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007784:	4b41      	ldr	r3, [pc, #260]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	4a40      	ldr	r2, [pc, #256]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800778a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800778e:	6593      	str	r3, [r2, #88]	; 0x58
 8007790:	4b3e      	ldr	r3, [pc, #248]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800779c:	2301      	movs	r3, #1
 800779e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077a0:	4b3b      	ldr	r3, [pc, #236]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a3a      	ldr	r2, [pc, #232]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80077a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077ac:	f7fe fe5a 	bl	8006464 <HAL_GetTick>
 80077b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80077b2:	e009      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077b4:	f7fe fe56 	bl	8006464 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d902      	bls.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	74fb      	strb	r3, [r7, #19]
        break;
 80077c6:	e005      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80077c8:	4b31      	ldr	r3, [pc, #196]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0ef      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80077d4:	7cfb      	ldrb	r3, [r7, #19]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d15c      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077da:	4b2c      	ldr	r3, [pc, #176]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01f      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d019      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077f8:	4b24      	ldr	r3, [pc, #144]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007804:	4b21      	ldr	r3, [pc, #132]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780a:	4a20      	ldr	r2, [pc, #128]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800780c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007814:	4b1d      	ldr	r3, [pc, #116]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781a:	4a1c      	ldr	r2, [pc, #112]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800781c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d016      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007836:	f7fe fe15 	bl	8006464 <HAL_GetTick>
 800783a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800783c:	e00b      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800783e:	f7fe fe11 	bl	8006464 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	f241 3288 	movw	r2, #5000	; 0x1388
 800784c:	4293      	cmp	r3, r2
 800784e:	d902      	bls.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	74fb      	strb	r3, [r7, #19]
            break;
 8007854:	e006      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007856:	4b0d      	ldr	r3, [pc, #52]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0ec      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8007864:	7cfb      	ldrb	r3, [r7, #19]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10c      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800786a:	4b08      	ldr	r3, [pc, #32]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800786c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800787a:	4904      	ldr	r1, [pc, #16]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007882:	e009      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007884:	7cfb      	ldrb	r3, [r7, #19]
 8007886:	74bb      	strb	r3, [r7, #18]
 8007888:	e006      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800788a:	bf00      	nop
 800788c:	40021000 	.word	0x40021000
 8007890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	7cfb      	ldrb	r3, [r7, #19]
 8007896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007898:	7c7b      	ldrb	r3, [r7, #17]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d105      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800789e:	4b9e      	ldr	r3, [pc, #632]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a2:	4a9d      	ldr	r2, [pc, #628]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078b6:	4b98      	ldr	r3, [pc, #608]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078bc:	f023 0203 	bic.w	r2, r3, #3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	4994      	ldr	r1, [pc, #592]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078d8:	4b8f      	ldr	r3, [pc, #572]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078de:	f023 020c 	bic.w	r2, r3, #12
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e6:	498c      	ldr	r1, [pc, #560]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078fa:	4b87      	ldr	r3, [pc, #540]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007900:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	4983      	ldr	r1, [pc, #524]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800791c:	4b7e      	ldr	r3, [pc, #504]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007922:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792a:	497b      	ldr	r1, [pc, #492]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800793e:	4b76      	ldr	r3, [pc, #472]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794c:	4972      	ldr	r1, [pc, #456]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007960:	4b6d      	ldr	r3, [pc, #436]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007966:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796e:	496a      	ldr	r1, [pc, #424]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007982:	4b65      	ldr	r3, [pc, #404]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007988:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007990:	4961      	ldr	r1, [pc, #388]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079a4:	4b5c      	ldr	r3, [pc, #368]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b2:	4959      	ldr	r1, [pc, #356]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079c6:	4b54      	ldr	r3, [pc, #336]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d4:	4950      	ldr	r1, [pc, #320]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079e8:	4b4b      	ldr	r3, [pc, #300]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	4948      	ldr	r1, [pc, #288]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a0a:	4b43      	ldr	r3, [pc, #268]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a18:	493f      	ldr	r1, [pc, #252]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d028      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a2c:	4b3a      	ldr	r3, [pc, #232]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a3a:	4937      	ldr	r1, [pc, #220]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a4a:	d106      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a4c:	4b32      	ldr	r3, [pc, #200]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	4a31      	ldr	r2, [pc, #196]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a56:	60d3      	str	r3, [r2, #12]
 8007a58:	e011      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a62:	d10c      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3304      	adds	r3, #4
 8007a68:	2101      	movs	r1, #1
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f8c8 	bl	8007c00 <RCCEx_PLLSAI1_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007a74:	7cfb      	ldrb	r3, [r7, #19]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8007a7a:	7cfb      	ldrb	r3, [r7, #19]
 8007a7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d028      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a8a:	4b23      	ldr	r3, [pc, #140]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a98:	491f      	ldr	r1, [pc, #124]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aa8:	d106      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aaa:	4b1b      	ldr	r3, [pc, #108]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	4a1a      	ldr	r2, [pc, #104]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ab4:	60d3      	str	r3, [r2, #12]
 8007ab6:	e011      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ac0:	d10c      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 f899 	bl	8007c00 <RCCEx_PLLSAI1_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ad2:	7cfb      	ldrb	r3, [r7, #19]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8007ad8:	7cfb      	ldrb	r3, [r7, #19]
 8007ada:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d02b      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ae8:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af6:	4908      	ldr	r1, [pc, #32]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b06:	d109      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b08:	4b03      	ldr	r3, [pc, #12]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	4a02      	ldr	r2, [pc, #8]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b12:	60d3      	str	r3, [r2, #12]
 8007b14:	e014      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007b16:	bf00      	nop
 8007b18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b24:	d10c      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 f867 	bl	8007c00 <RCCEx_PLLSAI1_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b36:	7cfb      	ldrb	r3, [r7, #19]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8007b3c:	7cfb      	ldrb	r3, [r7, #19]
 8007b3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d02f      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b4c:	4b2b      	ldr	r3, [pc, #172]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b5a:	4928      	ldr	r1, [pc, #160]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b6a:	d10d      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	2102      	movs	r1, #2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f844 	bl	8007c00 <RCCEx_PLLSAI1_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b7c:	7cfb      	ldrb	r3, [r7, #19]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d014      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007b82:	7cfb      	ldrb	r3, [r7, #19]
 8007b84:	74bb      	strb	r3, [r7, #18]
 8007b86:	e011      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b90:	d10c      	bne.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3320      	adds	r3, #32
 8007b96:	2102      	movs	r1, #2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 f921 	bl	8007de0 <RCCEx_PLLSAI2_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ba2:	7cfb      	ldrb	r3, [r7, #19]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007ba8:	7cfb      	ldrb	r3, [r7, #19]
 8007baa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bb8:	4b10      	ldr	r3, [pc, #64]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc6:	490d      	ldr	r1, [pc, #52]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bea:	4904      	ldr	r1, [pc, #16]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007bf2:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	40021000 	.word	0x40021000

08007c00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c0e:	4b73      	ldr	r3, [pc, #460]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d018      	beq.n	8007c4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007c1a:	4b70      	ldr	r3, [pc, #448]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f003 0203 	and.w	r2, r3, #3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d10d      	bne.n	8007c46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
       ||
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d009      	beq.n	8007c46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007c32:	4b6a      	ldr	r3, [pc, #424]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	091b      	lsrs	r3, r3, #4
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
       ||
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d044      	beq.n	8007cd0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	73fb      	strb	r3, [r7, #15]
 8007c4a:	e041      	b.n	8007cd0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d00c      	beq.n	8007c6e <RCCEx_PLLSAI1_Config+0x6e>
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d013      	beq.n	8007c80 <RCCEx_PLLSAI1_Config+0x80>
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d120      	bne.n	8007c9e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c5c:	4b5f      	ldr	r3, [pc, #380]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11d      	bne.n	8007ca4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c6c:	e01a      	b.n	8007ca4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c6e:	4b5b      	ldr	r3, [pc, #364]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d116      	bne.n	8007ca8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c7e:	e013      	b.n	8007ca8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c80:	4b56      	ldr	r3, [pc, #344]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10f      	bne.n	8007cac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c8c:	4b53      	ldr	r3, [pc, #332]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d109      	bne.n	8007cac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c9c:	e006      	b.n	8007cac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca2:	e004      	b.n	8007cae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007ca4:	bf00      	nop
 8007ca6:	e002      	b.n	8007cae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007ca8:	bf00      	nop
 8007caa:	e000      	b.n	8007cae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007cac:	bf00      	nop
    }

    if(status == HAL_OK)
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10d      	bne.n	8007cd0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007cb4:	4b49      	ldr	r3, [pc, #292]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6819      	ldr	r1, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	4944      	ldr	r1, [pc, #272]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d17d      	bne.n	8007dd2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007cd6:	4b41      	ldr	r3, [pc, #260]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a40      	ldr	r2, [pc, #256]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007cdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ce2:	f7fe fbbf 	bl	8006464 <HAL_GetTick>
 8007ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ce8:	e009      	b.n	8007cfe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cea:	f7fe fbbb 	bl	8006464 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d902      	bls.n	8007cfe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	73fb      	strb	r3, [r7, #15]
        break;
 8007cfc:	e005      	b.n	8007d0a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007cfe:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1ef      	bne.n	8007cea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d160      	bne.n	8007dd2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d111      	bne.n	8007d3a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d16:	4b31      	ldr	r3, [pc, #196]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6892      	ldr	r2, [r2, #8]
 8007d26:	0211      	lsls	r1, r2, #8
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	68d2      	ldr	r2, [r2, #12]
 8007d2c:	0912      	lsrs	r2, r2, #4
 8007d2e:	0452      	lsls	r2, r2, #17
 8007d30:	430a      	orrs	r2, r1
 8007d32:	492a      	ldr	r1, [pc, #168]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	610b      	str	r3, [r1, #16]
 8007d38:	e027      	b.n	8007d8a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d112      	bne.n	8007d66 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d40:	4b26      	ldr	r3, [pc, #152]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007d48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6892      	ldr	r2, [r2, #8]
 8007d50:	0211      	lsls	r1, r2, #8
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6912      	ldr	r2, [r2, #16]
 8007d56:	0852      	lsrs	r2, r2, #1
 8007d58:	3a01      	subs	r2, #1
 8007d5a:	0552      	lsls	r2, r2, #21
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	491f      	ldr	r1, [pc, #124]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	610b      	str	r3, [r1, #16]
 8007d64:	e011      	b.n	8007d8a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d66:	4b1d      	ldr	r3, [pc, #116]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007d6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6892      	ldr	r2, [r2, #8]
 8007d76:	0211      	lsls	r1, r2, #8
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6952      	ldr	r2, [r2, #20]
 8007d7c:	0852      	lsrs	r2, r2, #1
 8007d7e:	3a01      	subs	r2, #1
 8007d80:	0652      	lsls	r2, r2, #25
 8007d82:	430a      	orrs	r2, r1
 8007d84:	4915      	ldr	r1, [pc, #84]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007d8a:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a13      	ldr	r2, [pc, #76]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d96:	f7fe fb65 	bl	8006464 <HAL_GetTick>
 8007d9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d9c:	e009      	b.n	8007db2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d9e:	f7fe fb61 	bl	8006464 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d902      	bls.n	8007db2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	73fb      	strb	r3, [r7, #15]
          break;
 8007db0:	e005      	b.n	8007dbe <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007db2:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0ef      	beq.n	8007d9e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d106      	bne.n	8007dd2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	4903      	ldr	r1, [pc, #12]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	40021000 	.word	0x40021000

08007de0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007dee:	4b68      	ldr	r3, [pc, #416]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d018      	beq.n	8007e2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007dfa:	4b65      	ldr	r3, [pc, #404]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f003 0203 	and.w	r2, r3, #3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d10d      	bne.n	8007e26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
       ||
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007e12:	4b5f      	ldr	r3, [pc, #380]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	091b      	lsrs	r3, r3, #4
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
       ||
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d044      	beq.n	8007eb0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	73fb      	strb	r3, [r7, #15]
 8007e2a:	e041      	b.n	8007eb0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d00c      	beq.n	8007e4e <RCCEx_PLLSAI2_Config+0x6e>
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d013      	beq.n	8007e60 <RCCEx_PLLSAI2_Config+0x80>
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d120      	bne.n	8007e7e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007e3c:	4b54      	ldr	r3, [pc, #336]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11d      	bne.n	8007e84 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e4c:	e01a      	b.n	8007e84 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007e4e:	4b50      	ldr	r3, [pc, #320]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d116      	bne.n	8007e88 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e5e:	e013      	b.n	8007e88 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007e60:	4b4b      	ldr	r3, [pc, #300]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10f      	bne.n	8007e8c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007e6c:	4b48      	ldr	r3, [pc, #288]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e7c:	e006      	b.n	8007e8c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	73fb      	strb	r3, [r7, #15]
      break;
 8007e82:	e004      	b.n	8007e8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007e84:	bf00      	nop
 8007e86:	e002      	b.n	8007e8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007e88:	bf00      	nop
 8007e8a:	e000      	b.n	8007e8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007e8c:	bf00      	nop
    }

    if(status == HAL_OK)
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10d      	bne.n	8007eb0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007e94:	4b3e      	ldr	r3, [pc, #248]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6819      	ldr	r1, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	430b      	orrs	r3, r1
 8007eaa:	4939      	ldr	r1, [pc, #228]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d167      	bne.n	8007f86 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007eb6:	4b36      	ldr	r3, [pc, #216]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a35      	ldr	r2, [pc, #212]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ec2:	f7fe facf 	bl	8006464 <HAL_GetTick>
 8007ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ec8:	e009      	b.n	8007ede <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007eca:	f7fe facb 	bl	8006464 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d902      	bls.n	8007ede <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	73fb      	strb	r3, [r7, #15]
        break;
 8007edc:	e005      	b.n	8007eea <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ede:	4b2c      	ldr	r3, [pc, #176]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1ef      	bne.n	8007eca <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d14a      	bne.n	8007f86 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d111      	bne.n	8007f1a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ef6:	4b26      	ldr	r3, [pc, #152]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6892      	ldr	r2, [r2, #8]
 8007f06:	0211      	lsls	r1, r2, #8
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	68d2      	ldr	r2, [r2, #12]
 8007f0c:	0912      	lsrs	r2, r2, #4
 8007f0e:	0452      	lsls	r2, r2, #17
 8007f10:	430a      	orrs	r2, r1
 8007f12:	491f      	ldr	r1, [pc, #124]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	614b      	str	r3, [r1, #20]
 8007f18:	e011      	b.n	8007f3e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f1a:	4b1d      	ldr	r3, [pc, #116]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007f22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6892      	ldr	r2, [r2, #8]
 8007f2a:	0211      	lsls	r1, r2, #8
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	6912      	ldr	r2, [r2, #16]
 8007f30:	0852      	lsrs	r2, r2, #1
 8007f32:	3a01      	subs	r2, #1
 8007f34:	0652      	lsls	r2, r2, #25
 8007f36:	430a      	orrs	r2, r1
 8007f38:	4915      	ldr	r1, [pc, #84]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007f3e:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a13      	ldr	r2, [pc, #76]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f4a:	f7fe fa8b 	bl	8006464 <HAL_GetTick>
 8007f4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007f50:	e009      	b.n	8007f66 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f52:	f7fe fa87 	bl	8006464 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d902      	bls.n	8007f66 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	73fb      	strb	r3, [r7, #15]
          break;
 8007f64:	e005      	b.n	8007f72 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007f66:	4b0a      	ldr	r3, [pc, #40]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0ef      	beq.n	8007f52 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007f78:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007f7a:	695a      	ldr	r2, [r3, #20]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	4903      	ldr	r1, [pc, #12]	; (8007f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40021000 	.word	0x40021000

08007f94 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e03c      	b.n	8008020 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fb fd6a 	bl	8003a94 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0201 	bic.w	r2, r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f9df 	bl	800839c <USART_SetConfig>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e01b      	b.n	8008020 <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ff6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008006:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0201 	orr.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fb17 	bl	800864c <USART_CheckIdleState>
 800801e:	4603      	mov	r3, r0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08a      	sub	sp, #40	; 0x28
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	4613      	mov	r3, r2
 8008036:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	f040 809a 	bne.w	800817a <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <HAL_USART_Transmit+0x2a>
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e092      	b.n	800817c <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_USART_Transmit+0x3c>
 8008060:	2302      	movs	r3, #2
 8008062:	e08b      	b.n	800817c <HAL_USART_Transmit+0x154>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2212      	movs	r2, #18
 8008076:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800807a:	f7fe f9f3 	bl	8006464 <HAL_GetTick>
 800807e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	88fa      	ldrh	r2, [r7, #6]
 8008084:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	88fa      	ldrh	r2, [r7, #6]
 800808a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008094:	d108      	bne.n	80080a8 <HAL_USART_Transmit+0x80>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	e003      	b.n	80080b0 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80080b0:	e02b      	b.n	800810a <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2200      	movs	r2, #0
 80080ba:	2180      	movs	r1, #128	; 0x80
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f936 	bl	800832e <USART_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e057      	b.n	800817c <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10b      	bne.n	80080ea <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	881a      	ldrh	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080de:	b292      	uxth	r2, r2
 80080e0:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	3302      	adds	r3, #2
 80080e6:	61bb      	str	r3, [r7, #24]
 80080e8:	e008      	b.n	80080fc <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	781a      	ldrb	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	b292      	uxth	r2, r2
 80080f4:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	3301      	adds	r3, #1
 80080fa:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810e:	b29b      	uxth	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1ce      	bne.n	80080b2 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2200      	movs	r2, #0
 800811c:	2140      	movs	r1, #64	; 0x40
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 f905 	bl	800832e <USART_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e026      	b.n	800817c <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2240      	movs	r2, #64	; 0x40
 8008134:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2208      	movs	r2, #8
 800813c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	8b1b      	ldrh	r3, [r3, #24]
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0208 	orr.w	r2, r2, #8
 800814e:	b292      	uxth	r2, r2
 8008150:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	8b1b      	ldrh	r3, [r3, #24]
 8008158:	b29a      	uxth	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0210 	orr.w	r2, r2, #16
 8008162:	b292      	uxth	r2, r2
 8008164:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 800817a:	2302      	movs	r3, #2
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	3720      	adds	r7, #32
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08a      	sub	sp, #40	; 0x28
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	4613      	mov	r3, r2
 8008192:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b01      	cmp	r3, #1
 800819e:	f040 80c1 	bne.w	8008324 <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <HAL_USART_Receive+0x2a>
 80081a8:	88fb      	ldrh	r3, [r7, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e0b9      	b.n	8008326 <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d101      	bne.n	80081c0 <HAL_USART_Receive+0x3c>
 80081bc:	2302      	movs	r3, #2
 80081be:	e0b2      	b.n	8008326 <HAL_USART_Receive+0x1a2>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2222      	movs	r2, #34	; 0x22
 80081d2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80081d6:	f7fe f945 	bl	8006464 <HAL_GetTick>
 80081da:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	88fa      	ldrh	r2, [r7, #6]
 80081e0:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	88fa      	ldrh	r2, [r7, #6]
 80081e6:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f0:	d10c      	bne.n	800820c <HAL_USART_Receive+0x88>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d104      	bne.n	8008204 <HAL_USART_Receive+0x80>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008200:	869a      	strh	r2, [r3, #52]	; 0x34
 8008202:	e027      	b.n	8008254 <HAL_USART_Receive+0xd0>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	22ff      	movs	r2, #255	; 0xff
 8008208:	869a      	strh	r2, [r3, #52]	; 0x34
 800820a:	e023      	b.n	8008254 <HAL_USART_Receive+0xd0>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10b      	bne.n	800822c <HAL_USART_Receive+0xa8>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <HAL_USART_Receive+0xa0>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	22ff      	movs	r2, #255	; 0xff
 8008220:	869a      	strh	r2, [r3, #52]	; 0x34
 8008222:	e017      	b.n	8008254 <HAL_USART_Receive+0xd0>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	227f      	movs	r2, #127	; 0x7f
 8008228:	869a      	strh	r2, [r3, #52]	; 0x34
 800822a:	e013      	b.n	8008254 <HAL_USART_Receive+0xd0>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008234:	d10b      	bne.n	800824e <HAL_USART_Receive+0xca>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <HAL_USART_Receive+0xc2>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	227f      	movs	r2, #127	; 0x7f
 8008242:	869a      	strh	r2, [r3, #52]	; 0x34
 8008244:	e006      	b.n	8008254 <HAL_USART_Receive+0xd0>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	223f      	movs	r2, #63	; 0x3f
 800824a:	869a      	strh	r2, [r3, #52]	; 0x34
 800824c:	e002      	b.n	8008254 <HAL_USART_Receive+0xd0>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	869a      	strh	r2, [r3, #52]	; 0x34
    uhMask = husart->Mask;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008258:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008262:	d108      	bne.n	8008276 <HAL_USART_Receive+0xf2>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 800826c:	2300      	movs	r3, #0
 800826e:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	61bb      	str	r3, [r7, #24]
 8008274:	e003      	b.n	800827e <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 800827e:	e042      	b.n	8008306 <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2200      	movs	r2, #0
 8008288:	2180      	movs	r1, #128	; 0x80
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f84f 	bl	800832e <USART_WaitOnFlagUntilTimeout>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e045      	b.n	8008326 <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	22ff      	movs	r2, #255	; 0xff
 80082a0:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2200      	movs	r2, #0
 80082aa:	2120      	movs	r1, #32
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f83e 	bl	800832e <USART_WaitOnFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e034      	b.n	8008326 <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10c      	bne.n	80082dc <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	8a7b      	ldrh	r3, [r7, #18]
 80082cc:	4013      	ands	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	3302      	adds	r3, #2
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	e00d      	b.n	80082f8 <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	8a7b      	ldrh	r3, [r7, #18]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	4013      	ands	r3, r2
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	3301      	adds	r3, #1
 80082f6:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	865a      	strh	r2, [r3, #50]	; 0x32
    while (husart->RxXferCount > 0U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800830a:	b29b      	uxth	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1b7      	bne.n	8008280 <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	e000      	b.n	8008326 <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8008324:	2302      	movs	r3, #2
  }
}
 8008326:	4618      	mov	r0, r3
 8008328:	3720      	adds	r7, #32
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	603b      	str	r3, [r7, #0]
 800833a:	4613      	mov	r3, r2
 800833c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800833e:	e018      	b.n	8008372 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	d014      	beq.n	8008372 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008348:	f7fe f88c 	bl	8006464 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	429a      	cmp	r2, r3
 8008356:	d302      	bcc.n	800835e <USART_WaitOnFlagUntilTimeout+0x30>
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e00f      	b.n	8008392 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69da      	ldr	r2, [r3, #28]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4013      	ands	r3, r2
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	429a      	cmp	r2, r3
 8008380:	bf0c      	ite	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	2300      	movne	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	429a      	cmp	r2, r3
 800838e:	d0d7      	beq.n	8008340 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80083a8:	2300      	movs	r3, #0
 80083aa:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	4b9b      	ldr	r3, [pc, #620]	; (8008638 <USART_SetConfig+0x29c>)
 80083ca:	4013      	ands	r3, r2
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	6812      	ldr	r2, [r2, #0]
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	430b      	orrs	r3, r1
 80083d4:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80083d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083da:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	430a      	orrs	r2, r1
 8008412:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a88      	ldr	r2, [pc, #544]	; (800863c <USART_SetConfig+0x2a0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d122      	bne.n	8008464 <USART_SetConfig+0xc8>
 800841e:	4b88      	ldr	r3, [pc, #544]	; (8008640 <USART_SetConfig+0x2a4>)
 8008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008424:	f003 0303 	and.w	r3, r3, #3
 8008428:	2b03      	cmp	r3, #3
 800842a:	d817      	bhi.n	800845c <USART_SetConfig+0xc0>
 800842c:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <USART_SetConfig+0x98>)
 800842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008432:	bf00      	nop
 8008434:	08008445 	.word	0x08008445
 8008438:	08008451 	.word	0x08008451
 800843c:	0800844b 	.word	0x0800844b
 8008440:	08008457 	.word	0x08008457
 8008444:	2301      	movs	r3, #1
 8008446:	77fb      	strb	r3, [r7, #31]
 8008448:	e06e      	b.n	8008528 <USART_SetConfig+0x18c>
 800844a:	2302      	movs	r3, #2
 800844c:	77fb      	strb	r3, [r7, #31]
 800844e:	e06b      	b.n	8008528 <USART_SetConfig+0x18c>
 8008450:	2304      	movs	r3, #4
 8008452:	77fb      	strb	r3, [r7, #31]
 8008454:	e068      	b.n	8008528 <USART_SetConfig+0x18c>
 8008456:	2308      	movs	r3, #8
 8008458:	77fb      	strb	r3, [r7, #31]
 800845a:	e065      	b.n	8008528 <USART_SetConfig+0x18c>
 800845c:	2310      	movs	r3, #16
 800845e:	77fb      	strb	r3, [r7, #31]
 8008460:	bf00      	nop
 8008462:	e061      	b.n	8008528 <USART_SetConfig+0x18c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a76      	ldr	r2, [pc, #472]	; (8008644 <USART_SetConfig+0x2a8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d134      	bne.n	80084d8 <USART_SetConfig+0x13c>
 800846e:	4b74      	ldr	r3, [pc, #464]	; (8008640 <USART_SetConfig+0x2a4>)
 8008470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008474:	f003 030c 	and.w	r3, r3, #12
 8008478:	2b0c      	cmp	r3, #12
 800847a:	d829      	bhi.n	80084d0 <USART_SetConfig+0x134>
 800847c:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <USART_SetConfig+0xe8>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	080084b9 	.word	0x080084b9
 8008488:	080084d1 	.word	0x080084d1
 800848c:	080084d1 	.word	0x080084d1
 8008490:	080084d1 	.word	0x080084d1
 8008494:	080084c5 	.word	0x080084c5
 8008498:	080084d1 	.word	0x080084d1
 800849c:	080084d1 	.word	0x080084d1
 80084a0:	080084d1 	.word	0x080084d1
 80084a4:	080084bf 	.word	0x080084bf
 80084a8:	080084d1 	.word	0x080084d1
 80084ac:	080084d1 	.word	0x080084d1
 80084b0:	080084d1 	.word	0x080084d1
 80084b4:	080084cb 	.word	0x080084cb
 80084b8:	2300      	movs	r3, #0
 80084ba:	77fb      	strb	r3, [r7, #31]
 80084bc:	e034      	b.n	8008528 <USART_SetConfig+0x18c>
 80084be:	2302      	movs	r3, #2
 80084c0:	77fb      	strb	r3, [r7, #31]
 80084c2:	e031      	b.n	8008528 <USART_SetConfig+0x18c>
 80084c4:	2304      	movs	r3, #4
 80084c6:	77fb      	strb	r3, [r7, #31]
 80084c8:	e02e      	b.n	8008528 <USART_SetConfig+0x18c>
 80084ca:	2308      	movs	r3, #8
 80084cc:	77fb      	strb	r3, [r7, #31]
 80084ce:	e02b      	b.n	8008528 <USART_SetConfig+0x18c>
 80084d0:	2310      	movs	r3, #16
 80084d2:	77fb      	strb	r3, [r7, #31]
 80084d4:	bf00      	nop
 80084d6:	e027      	b.n	8008528 <USART_SetConfig+0x18c>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a5a      	ldr	r2, [pc, #360]	; (8008648 <USART_SetConfig+0x2ac>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d120      	bne.n	8008524 <USART_SetConfig+0x188>
 80084e2:	4b57      	ldr	r3, [pc, #348]	; (8008640 <USART_SetConfig+0x2a4>)
 80084e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084ec:	2b10      	cmp	r3, #16
 80084ee:	d00f      	beq.n	8008510 <USART_SetConfig+0x174>
 80084f0:	2b10      	cmp	r3, #16
 80084f2:	d802      	bhi.n	80084fa <USART_SetConfig+0x15e>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <USART_SetConfig+0x168>
 80084f8:	e010      	b.n	800851c <USART_SetConfig+0x180>
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d005      	beq.n	800850a <USART_SetConfig+0x16e>
 80084fe:	2b30      	cmp	r3, #48	; 0x30
 8008500:	d009      	beq.n	8008516 <USART_SetConfig+0x17a>
 8008502:	e00b      	b.n	800851c <USART_SetConfig+0x180>
 8008504:	2300      	movs	r3, #0
 8008506:	77fb      	strb	r3, [r7, #31]
 8008508:	e00e      	b.n	8008528 <USART_SetConfig+0x18c>
 800850a:	2302      	movs	r3, #2
 800850c:	77fb      	strb	r3, [r7, #31]
 800850e:	e00b      	b.n	8008528 <USART_SetConfig+0x18c>
 8008510:	2304      	movs	r3, #4
 8008512:	77fb      	strb	r3, [r7, #31]
 8008514:	e008      	b.n	8008528 <USART_SetConfig+0x18c>
 8008516:	2308      	movs	r3, #8
 8008518:	77fb      	strb	r3, [r7, #31]
 800851a:	e005      	b.n	8008528 <USART_SetConfig+0x18c>
 800851c:	2310      	movs	r3, #16
 800851e:	77fb      	strb	r3, [r7, #31]
 8008520:	bf00      	nop
 8008522:	e001      	b.n	8008528 <USART_SetConfig+0x18c>
 8008524:	2310      	movs	r3, #16
 8008526:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8008528:	7ffb      	ldrb	r3, [r7, #31]
 800852a:	2b08      	cmp	r3, #8
 800852c:	d859      	bhi.n	80085e2 <USART_SetConfig+0x246>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <USART_SetConfig+0x198>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	08008559 	.word	0x08008559
 8008538:	08008577 	.word	0x08008577
 800853c:	08008595 	.word	0x08008595
 8008540:	080085e3 	.word	0x080085e3
 8008544:	080085af 	.word	0x080085af
 8008548:	080085e3 	.word	0x080085e3
 800854c:	080085e3 	.word	0x080085e3
 8008550:	080085e3 	.word	0x080085e3
 8008554:	080085cd 	.word	0x080085cd
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008558:	f7fe ffe0 	bl	800751c <HAL_RCC_GetPCLK1Freq>
 800855c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	005a      	lsls	r2, r3, #1
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	085b      	lsrs	r3, r3, #1
 8008568:	441a      	add	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008572:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8008574:	e038      	b.n	80085e8 <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8008576:	f7fe ffe7 	bl	8007548 <HAL_RCC_GetPCLK2Freq>
 800857a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	005a      	lsls	r2, r3, #1
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	441a      	add	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008590:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8008592:	e029      	b.n	80085e8 <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800859e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	6852      	ldr	r2, [r2, #4]
 80085a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80085aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80085ac:	e01c      	b.n	80085e8 <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80085ae:	f7fe ff1f 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 80085b2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	005a      	lsls	r2, r3, #1
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	085b      	lsrs	r3, r3, #1
 80085be:	441a      	add	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80085ca:	e00d      	b.n	80085e8 <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	085b      	lsrs	r3, r3, #1
 80085d2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	fbb2 f3f3 	udiv	r3, r2, r3
 80085de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80085e0:	e002      	b.n	80085e8 <USART_SetConfig+0x24c>
    default:
      ret = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	77bb      	strb	r3, [r7, #30]
      break;
 80085e6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2b0f      	cmp	r3, #15
 80085ec:	d916      	bls.n	800861c <USART_SetConfig+0x280>
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f4:	d212      	bcs.n	800861c <USART_SetConfig+0x280>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f023 030f 	bic.w	r3, r3, #15
 80085fe:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	b29b      	uxth	r3, r3
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	b29a      	uxth	r2, r3
 800860c:	89fb      	ldrh	r3, [r7, #14]
 800860e:	4313      	orrs	r3, r2
 8008610:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	89fa      	ldrh	r2, [r7, #14]
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	e001      	b.n	8008620 <USART_SetConfig+0x284>
  }
  else
  {
    ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 800862c:	7fbb      	ldrb	r3, [r7, #30]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3720      	adds	r7, #32
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	efff69f3 	.word	0xefff69f3
 800863c:	40013800 	.word	0x40013800
 8008640:	40021000 	.word	0x40021000
 8008644:	40004400 	.word	0x40004400
 8008648:	40004800 	.word	0x40004800

0800864c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af02      	add	r7, sp, #8
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800865a:	f7fd ff03 	bl	8006464 <HAL_GetTick>
 800865e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b08      	cmp	r3, #8
 800866c:	d10e      	bne.n	800868c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800866e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff fe56 	bl	800832e <USART_WaitOnFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e01e      	b.n	80086ca <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0304 	and.w	r3, r3, #4
 8008696:	2b04      	cmp	r3, #4
 8008698:	d10e      	bne.n	80086b8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800869a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff fe40 	bl	800832e <USART_WaitOnFlagUntilTimeout>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e008      	b.n	80086ca <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <calloc>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <calloc+0xc>)
 80086d6:	460a      	mov	r2, r1
 80086d8:	4601      	mov	r1, r0
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	f000 b868 	b.w	80087b0 <_calloc_r>
 80086e0:	2000000c 	.word	0x2000000c

080086e4 <__errno>:
 80086e4:	4b01      	ldr	r3, [pc, #4]	; (80086ec <__errno+0x8>)
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	2000000c 	.word	0x2000000c

080086f0 <__libc_init_array>:
 80086f0:	b570      	push	{r4, r5, r6, lr}
 80086f2:	4e0d      	ldr	r6, [pc, #52]	; (8008728 <__libc_init_array+0x38>)
 80086f4:	4c0d      	ldr	r4, [pc, #52]	; (800872c <__libc_init_array+0x3c>)
 80086f6:	1ba4      	subs	r4, r4, r6
 80086f8:	10a4      	asrs	r4, r4, #2
 80086fa:	2500      	movs	r5, #0
 80086fc:	42a5      	cmp	r5, r4
 80086fe:	d109      	bne.n	8008714 <__libc_init_array+0x24>
 8008700:	4e0b      	ldr	r6, [pc, #44]	; (8008730 <__libc_init_array+0x40>)
 8008702:	4c0c      	ldr	r4, [pc, #48]	; (8008734 <__libc_init_array+0x44>)
 8008704:	f002 fc18 	bl	800af38 <_init>
 8008708:	1ba4      	subs	r4, r4, r6
 800870a:	10a4      	asrs	r4, r4, #2
 800870c:	2500      	movs	r5, #0
 800870e:	42a5      	cmp	r5, r4
 8008710:	d105      	bne.n	800871e <__libc_init_array+0x2e>
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008718:	4798      	blx	r3
 800871a:	3501      	adds	r5, #1
 800871c:	e7ee      	b.n	80086fc <__libc_init_array+0xc>
 800871e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008722:	4798      	blx	r3
 8008724:	3501      	adds	r5, #1
 8008726:	e7f2      	b.n	800870e <__libc_init_array+0x1e>
 8008728:	080130a0 	.word	0x080130a0
 800872c:	080130a0 	.word	0x080130a0
 8008730:	080130a0 	.word	0x080130a0
 8008734:	080130a4 	.word	0x080130a4

08008738 <malloc>:
 8008738:	4b02      	ldr	r3, [pc, #8]	; (8008744 <malloc+0xc>)
 800873a:	4601      	mov	r1, r0
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	f000 b893 	b.w	8008868 <_malloc_r>
 8008742:	bf00      	nop
 8008744:	2000000c 	.word	0x2000000c

08008748 <free>:
 8008748:	4b02      	ldr	r3, [pc, #8]	; (8008754 <free+0xc>)
 800874a:	4601      	mov	r1, r0
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	f000 b83d 	b.w	80087cc <_free_r>
 8008752:	bf00      	nop
 8008754:	2000000c 	.word	0x2000000c

08008758 <memcpy>:
 8008758:	b510      	push	{r4, lr}
 800875a:	1e43      	subs	r3, r0, #1
 800875c:	440a      	add	r2, r1
 800875e:	4291      	cmp	r1, r2
 8008760:	d100      	bne.n	8008764 <memcpy+0xc>
 8008762:	bd10      	pop	{r4, pc}
 8008764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800876c:	e7f7      	b.n	800875e <memcpy+0x6>

0800876e <memmove>:
 800876e:	4288      	cmp	r0, r1
 8008770:	b510      	push	{r4, lr}
 8008772:	eb01 0302 	add.w	r3, r1, r2
 8008776:	d807      	bhi.n	8008788 <memmove+0x1a>
 8008778:	1e42      	subs	r2, r0, #1
 800877a:	4299      	cmp	r1, r3
 800877c:	d00a      	beq.n	8008794 <memmove+0x26>
 800877e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008782:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008786:	e7f8      	b.n	800877a <memmove+0xc>
 8008788:	4283      	cmp	r3, r0
 800878a:	d9f5      	bls.n	8008778 <memmove+0xa>
 800878c:	1881      	adds	r1, r0, r2
 800878e:	1ad2      	subs	r2, r2, r3
 8008790:	42d3      	cmn	r3, r2
 8008792:	d100      	bne.n	8008796 <memmove+0x28>
 8008794:	bd10      	pop	{r4, pc}
 8008796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800879a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800879e:	e7f7      	b.n	8008790 <memmove+0x22>

080087a0 <memset>:
 80087a0:	4402      	add	r2, r0
 80087a2:	4603      	mov	r3, r0
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d100      	bne.n	80087aa <memset+0xa>
 80087a8:	4770      	bx	lr
 80087aa:	f803 1b01 	strb.w	r1, [r3], #1
 80087ae:	e7f9      	b.n	80087a4 <memset+0x4>

080087b0 <_calloc_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	fb02 f401 	mul.w	r4, r2, r1
 80087b6:	4621      	mov	r1, r4
 80087b8:	f000 f856 	bl	8008868 <_malloc_r>
 80087bc:	4605      	mov	r5, r0
 80087be:	b118      	cbz	r0, 80087c8 <_calloc_r+0x18>
 80087c0:	4622      	mov	r2, r4
 80087c2:	2100      	movs	r1, #0
 80087c4:	f7ff ffec 	bl	80087a0 <memset>
 80087c8:	4628      	mov	r0, r5
 80087ca:	bd38      	pop	{r3, r4, r5, pc}

080087cc <_free_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4605      	mov	r5, r0
 80087d0:	2900      	cmp	r1, #0
 80087d2:	d045      	beq.n	8008860 <_free_r+0x94>
 80087d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d8:	1f0c      	subs	r4, r1, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bfb8      	it	lt
 80087de:	18e4      	addlt	r4, r4, r3
 80087e0:	f001 fe8a 	bl	800a4f8 <__malloc_lock>
 80087e4:	4a1f      	ldr	r2, [pc, #124]	; (8008864 <_free_r+0x98>)
 80087e6:	6813      	ldr	r3, [r2, #0]
 80087e8:	4610      	mov	r0, r2
 80087ea:	b933      	cbnz	r3, 80087fa <_free_r+0x2e>
 80087ec:	6063      	str	r3, [r4, #4]
 80087ee:	6014      	str	r4, [r2, #0]
 80087f0:	4628      	mov	r0, r5
 80087f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f6:	f001 be80 	b.w	800a4fa <__malloc_unlock>
 80087fa:	42a3      	cmp	r3, r4
 80087fc:	d90c      	bls.n	8008818 <_free_r+0x4c>
 80087fe:	6821      	ldr	r1, [r4, #0]
 8008800:	1862      	adds	r2, r4, r1
 8008802:	4293      	cmp	r3, r2
 8008804:	bf04      	itt	eq
 8008806:	681a      	ldreq	r2, [r3, #0]
 8008808:	685b      	ldreq	r3, [r3, #4]
 800880a:	6063      	str	r3, [r4, #4]
 800880c:	bf04      	itt	eq
 800880e:	1852      	addeq	r2, r2, r1
 8008810:	6022      	streq	r2, [r4, #0]
 8008812:	6004      	str	r4, [r0, #0]
 8008814:	e7ec      	b.n	80087f0 <_free_r+0x24>
 8008816:	4613      	mov	r3, r2
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	b10a      	cbz	r2, 8008820 <_free_r+0x54>
 800881c:	42a2      	cmp	r2, r4
 800881e:	d9fa      	bls.n	8008816 <_free_r+0x4a>
 8008820:	6819      	ldr	r1, [r3, #0]
 8008822:	1858      	adds	r0, r3, r1
 8008824:	42a0      	cmp	r0, r4
 8008826:	d10b      	bne.n	8008840 <_free_r+0x74>
 8008828:	6820      	ldr	r0, [r4, #0]
 800882a:	4401      	add	r1, r0
 800882c:	1858      	adds	r0, r3, r1
 800882e:	4282      	cmp	r2, r0
 8008830:	6019      	str	r1, [r3, #0]
 8008832:	d1dd      	bne.n	80087f0 <_free_r+0x24>
 8008834:	6810      	ldr	r0, [r2, #0]
 8008836:	6852      	ldr	r2, [r2, #4]
 8008838:	605a      	str	r2, [r3, #4]
 800883a:	4401      	add	r1, r0
 800883c:	6019      	str	r1, [r3, #0]
 800883e:	e7d7      	b.n	80087f0 <_free_r+0x24>
 8008840:	d902      	bls.n	8008848 <_free_r+0x7c>
 8008842:	230c      	movs	r3, #12
 8008844:	602b      	str	r3, [r5, #0]
 8008846:	e7d3      	b.n	80087f0 <_free_r+0x24>
 8008848:	6820      	ldr	r0, [r4, #0]
 800884a:	1821      	adds	r1, r4, r0
 800884c:	428a      	cmp	r2, r1
 800884e:	bf04      	itt	eq
 8008850:	6811      	ldreq	r1, [r2, #0]
 8008852:	6852      	ldreq	r2, [r2, #4]
 8008854:	6062      	str	r2, [r4, #4]
 8008856:	bf04      	itt	eq
 8008858:	1809      	addeq	r1, r1, r0
 800885a:	6021      	streq	r1, [r4, #0]
 800885c:	605c      	str	r4, [r3, #4]
 800885e:	e7c7      	b.n	80087f0 <_free_r+0x24>
 8008860:	bd38      	pop	{r3, r4, r5, pc}
 8008862:	bf00      	nop
 8008864:	20000ea0 	.word	0x20000ea0

08008868 <_malloc_r>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	1ccd      	adds	r5, r1, #3
 800886c:	f025 0503 	bic.w	r5, r5, #3
 8008870:	3508      	adds	r5, #8
 8008872:	2d0c      	cmp	r5, #12
 8008874:	bf38      	it	cc
 8008876:	250c      	movcc	r5, #12
 8008878:	2d00      	cmp	r5, #0
 800887a:	4606      	mov	r6, r0
 800887c:	db01      	blt.n	8008882 <_malloc_r+0x1a>
 800887e:	42a9      	cmp	r1, r5
 8008880:	d903      	bls.n	800888a <_malloc_r+0x22>
 8008882:	230c      	movs	r3, #12
 8008884:	6033      	str	r3, [r6, #0]
 8008886:	2000      	movs	r0, #0
 8008888:	bd70      	pop	{r4, r5, r6, pc}
 800888a:	f001 fe35 	bl	800a4f8 <__malloc_lock>
 800888e:	4a21      	ldr	r2, [pc, #132]	; (8008914 <_malloc_r+0xac>)
 8008890:	6814      	ldr	r4, [r2, #0]
 8008892:	4621      	mov	r1, r4
 8008894:	b991      	cbnz	r1, 80088bc <_malloc_r+0x54>
 8008896:	4c20      	ldr	r4, [pc, #128]	; (8008918 <_malloc_r+0xb0>)
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	b91b      	cbnz	r3, 80088a4 <_malloc_r+0x3c>
 800889c:	4630      	mov	r0, r6
 800889e:	f000 fd29 	bl	80092f4 <_sbrk_r>
 80088a2:	6020      	str	r0, [r4, #0]
 80088a4:	4629      	mov	r1, r5
 80088a6:	4630      	mov	r0, r6
 80088a8:	f000 fd24 	bl	80092f4 <_sbrk_r>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d124      	bne.n	80088fa <_malloc_r+0x92>
 80088b0:	230c      	movs	r3, #12
 80088b2:	6033      	str	r3, [r6, #0]
 80088b4:	4630      	mov	r0, r6
 80088b6:	f001 fe20 	bl	800a4fa <__malloc_unlock>
 80088ba:	e7e4      	b.n	8008886 <_malloc_r+0x1e>
 80088bc:	680b      	ldr	r3, [r1, #0]
 80088be:	1b5b      	subs	r3, r3, r5
 80088c0:	d418      	bmi.n	80088f4 <_malloc_r+0x8c>
 80088c2:	2b0b      	cmp	r3, #11
 80088c4:	d90f      	bls.n	80088e6 <_malloc_r+0x7e>
 80088c6:	600b      	str	r3, [r1, #0]
 80088c8:	50cd      	str	r5, [r1, r3]
 80088ca:	18cc      	adds	r4, r1, r3
 80088cc:	4630      	mov	r0, r6
 80088ce:	f001 fe14 	bl	800a4fa <__malloc_unlock>
 80088d2:	f104 000b 	add.w	r0, r4, #11
 80088d6:	1d23      	adds	r3, r4, #4
 80088d8:	f020 0007 	bic.w	r0, r0, #7
 80088dc:	1ac3      	subs	r3, r0, r3
 80088de:	d0d3      	beq.n	8008888 <_malloc_r+0x20>
 80088e0:	425a      	negs	r2, r3
 80088e2:	50e2      	str	r2, [r4, r3]
 80088e4:	e7d0      	b.n	8008888 <_malloc_r+0x20>
 80088e6:	428c      	cmp	r4, r1
 80088e8:	684b      	ldr	r3, [r1, #4]
 80088ea:	bf16      	itet	ne
 80088ec:	6063      	strne	r3, [r4, #4]
 80088ee:	6013      	streq	r3, [r2, #0]
 80088f0:	460c      	movne	r4, r1
 80088f2:	e7eb      	b.n	80088cc <_malloc_r+0x64>
 80088f4:	460c      	mov	r4, r1
 80088f6:	6849      	ldr	r1, [r1, #4]
 80088f8:	e7cc      	b.n	8008894 <_malloc_r+0x2c>
 80088fa:	1cc4      	adds	r4, r0, #3
 80088fc:	f024 0403 	bic.w	r4, r4, #3
 8008900:	42a0      	cmp	r0, r4
 8008902:	d005      	beq.n	8008910 <_malloc_r+0xa8>
 8008904:	1a21      	subs	r1, r4, r0
 8008906:	4630      	mov	r0, r6
 8008908:	f000 fcf4 	bl	80092f4 <_sbrk_r>
 800890c:	3001      	adds	r0, #1
 800890e:	d0cf      	beq.n	80088b0 <_malloc_r+0x48>
 8008910:	6025      	str	r5, [r4, #0]
 8008912:	e7db      	b.n	80088cc <_malloc_r+0x64>
 8008914:	20000ea0 	.word	0x20000ea0
 8008918:	20000ea4 	.word	0x20000ea4

0800891c <__cvt>:
 800891c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	ec55 4b10 	vmov	r4, r5, d0
 8008924:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008926:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800892a:	2d00      	cmp	r5, #0
 800892c:	460e      	mov	r6, r1
 800892e:	4691      	mov	r9, r2
 8008930:	4619      	mov	r1, r3
 8008932:	bfb8      	it	lt
 8008934:	4622      	movlt	r2, r4
 8008936:	462b      	mov	r3, r5
 8008938:	f027 0720 	bic.w	r7, r7, #32
 800893c:	bfbb      	ittet	lt
 800893e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008942:	461d      	movlt	r5, r3
 8008944:	2300      	movge	r3, #0
 8008946:	232d      	movlt	r3, #45	; 0x2d
 8008948:	bfb8      	it	lt
 800894a:	4614      	movlt	r4, r2
 800894c:	2f46      	cmp	r7, #70	; 0x46
 800894e:	700b      	strb	r3, [r1, #0]
 8008950:	d004      	beq.n	800895c <__cvt+0x40>
 8008952:	2f45      	cmp	r7, #69	; 0x45
 8008954:	d100      	bne.n	8008958 <__cvt+0x3c>
 8008956:	3601      	adds	r6, #1
 8008958:	2102      	movs	r1, #2
 800895a:	e000      	b.n	800895e <__cvt+0x42>
 800895c:	2103      	movs	r1, #3
 800895e:	ab03      	add	r3, sp, #12
 8008960:	9301      	str	r3, [sp, #4]
 8008962:	ab02      	add	r3, sp, #8
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	4632      	mov	r2, r6
 8008968:	4653      	mov	r3, sl
 800896a:	ec45 4b10 	vmov	d0, r4, r5
 800896e:	f000 fe1f 	bl	80095b0 <_dtoa_r>
 8008972:	2f47      	cmp	r7, #71	; 0x47
 8008974:	4680      	mov	r8, r0
 8008976:	d102      	bne.n	800897e <__cvt+0x62>
 8008978:	f019 0f01 	tst.w	r9, #1
 800897c:	d026      	beq.n	80089cc <__cvt+0xb0>
 800897e:	2f46      	cmp	r7, #70	; 0x46
 8008980:	eb08 0906 	add.w	r9, r8, r6
 8008984:	d111      	bne.n	80089aa <__cvt+0x8e>
 8008986:	f898 3000 	ldrb.w	r3, [r8]
 800898a:	2b30      	cmp	r3, #48	; 0x30
 800898c:	d10a      	bne.n	80089a4 <__cvt+0x88>
 800898e:	2200      	movs	r2, #0
 8008990:	2300      	movs	r3, #0
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f7fa fcff 	bl	8003398 <__aeabi_dcmpeq>
 800899a:	b918      	cbnz	r0, 80089a4 <__cvt+0x88>
 800899c:	f1c6 0601 	rsb	r6, r6, #1
 80089a0:	f8ca 6000 	str.w	r6, [sl]
 80089a4:	f8da 3000 	ldr.w	r3, [sl]
 80089a8:	4499      	add	r9, r3
 80089aa:	2200      	movs	r2, #0
 80089ac:	2300      	movs	r3, #0
 80089ae:	4620      	mov	r0, r4
 80089b0:	4629      	mov	r1, r5
 80089b2:	f7fa fcf1 	bl	8003398 <__aeabi_dcmpeq>
 80089b6:	b938      	cbnz	r0, 80089c8 <__cvt+0xac>
 80089b8:	2230      	movs	r2, #48	; 0x30
 80089ba:	9b03      	ldr	r3, [sp, #12]
 80089bc:	454b      	cmp	r3, r9
 80089be:	d205      	bcs.n	80089cc <__cvt+0xb0>
 80089c0:	1c59      	adds	r1, r3, #1
 80089c2:	9103      	str	r1, [sp, #12]
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	e7f8      	b.n	80089ba <__cvt+0x9e>
 80089c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089d0:	eba3 0308 	sub.w	r3, r3, r8
 80089d4:	4640      	mov	r0, r8
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	b004      	add	sp, #16
 80089da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080089de <__exponent>:
 80089de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089e0:	2900      	cmp	r1, #0
 80089e2:	4604      	mov	r4, r0
 80089e4:	bfba      	itte	lt
 80089e6:	4249      	neglt	r1, r1
 80089e8:	232d      	movlt	r3, #45	; 0x2d
 80089ea:	232b      	movge	r3, #43	; 0x2b
 80089ec:	2909      	cmp	r1, #9
 80089ee:	f804 2b02 	strb.w	r2, [r4], #2
 80089f2:	7043      	strb	r3, [r0, #1]
 80089f4:	dd20      	ble.n	8008a38 <__exponent+0x5a>
 80089f6:	f10d 0307 	add.w	r3, sp, #7
 80089fa:	461f      	mov	r7, r3
 80089fc:	260a      	movs	r6, #10
 80089fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8008a02:	fb06 1115 	mls	r1, r6, r5, r1
 8008a06:	3130      	adds	r1, #48	; 0x30
 8008a08:	2d09      	cmp	r5, #9
 8008a0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a0e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008a12:	4629      	mov	r1, r5
 8008a14:	dc09      	bgt.n	8008a2a <__exponent+0x4c>
 8008a16:	3130      	adds	r1, #48	; 0x30
 8008a18:	3b02      	subs	r3, #2
 8008a1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008a1e:	42bb      	cmp	r3, r7
 8008a20:	4622      	mov	r2, r4
 8008a22:	d304      	bcc.n	8008a2e <__exponent+0x50>
 8008a24:	1a10      	subs	r0, r2, r0
 8008a26:	b003      	add	sp, #12
 8008a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	e7e7      	b.n	80089fe <__exponent+0x20>
 8008a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a32:	f804 2b01 	strb.w	r2, [r4], #1
 8008a36:	e7f2      	b.n	8008a1e <__exponent+0x40>
 8008a38:	2330      	movs	r3, #48	; 0x30
 8008a3a:	4419      	add	r1, r3
 8008a3c:	7083      	strb	r3, [r0, #2]
 8008a3e:	1d02      	adds	r2, r0, #4
 8008a40:	70c1      	strb	r1, [r0, #3]
 8008a42:	e7ef      	b.n	8008a24 <__exponent+0x46>

08008a44 <_printf_float>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	b08d      	sub	sp, #52	; 0x34
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008a50:	4616      	mov	r6, r2
 8008a52:	461f      	mov	r7, r3
 8008a54:	4605      	mov	r5, r0
 8008a56:	f001 fcdd 	bl	800a414 <_localeconv_r>
 8008a5a:	6803      	ldr	r3, [r0, #0]
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fa f81c 	bl	8002a9c <strlen>
 8008a64:	2300      	movs	r3, #0
 8008a66:	930a      	str	r3, [sp, #40]	; 0x28
 8008a68:	f8d8 3000 	ldr.w	r3, [r8]
 8008a6c:	9005      	str	r0, [sp, #20]
 8008a6e:	3307      	adds	r3, #7
 8008a70:	f023 0307 	bic.w	r3, r3, #7
 8008a74:	f103 0208 	add.w	r2, r3, #8
 8008a78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a7c:	f8d4 b000 	ldr.w	fp, [r4]
 8008a80:	f8c8 2000 	str.w	r2, [r8]
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a8c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a94:	9307      	str	r3, [sp, #28]
 8008a96:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9e:	4ba7      	ldr	r3, [pc, #668]	; (8008d3c <_printf_float+0x2f8>)
 8008aa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008aa4:	f7fa fcaa 	bl	80033fc <__aeabi_dcmpun>
 8008aa8:	bb70      	cbnz	r0, 8008b08 <_printf_float+0xc4>
 8008aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008aae:	4ba3      	ldr	r3, [pc, #652]	; (8008d3c <_printf_float+0x2f8>)
 8008ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ab4:	f7fa fc84 	bl	80033c0 <__aeabi_dcmple>
 8008ab8:	bb30      	cbnz	r0, 8008b08 <_printf_float+0xc4>
 8008aba:	2200      	movs	r2, #0
 8008abc:	2300      	movs	r3, #0
 8008abe:	4640      	mov	r0, r8
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	f7fa fc73 	bl	80033ac <__aeabi_dcmplt>
 8008ac6:	b110      	cbz	r0, 8008ace <_printf_float+0x8a>
 8008ac8:	232d      	movs	r3, #45	; 0x2d
 8008aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ace:	4a9c      	ldr	r2, [pc, #624]	; (8008d40 <_printf_float+0x2fc>)
 8008ad0:	4b9c      	ldr	r3, [pc, #624]	; (8008d44 <_printf_float+0x300>)
 8008ad2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008ad6:	bf8c      	ite	hi
 8008ad8:	4690      	movhi	r8, r2
 8008ada:	4698      	movls	r8, r3
 8008adc:	2303      	movs	r3, #3
 8008ade:	f02b 0204 	bic.w	r2, fp, #4
 8008ae2:	6123      	str	r3, [r4, #16]
 8008ae4:	6022      	str	r2, [r4, #0]
 8008ae6:	f04f 0900 	mov.w	r9, #0
 8008aea:	9700      	str	r7, [sp, #0]
 8008aec:	4633      	mov	r3, r6
 8008aee:	aa0b      	add	r2, sp, #44	; 0x2c
 8008af0:	4621      	mov	r1, r4
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 f9e6 	bl	8008ec4 <_printf_common>
 8008af8:	3001      	adds	r0, #1
 8008afa:	f040 808d 	bne.w	8008c18 <_printf_float+0x1d4>
 8008afe:	f04f 30ff 	mov.w	r0, #4294967295
 8008b02:	b00d      	add	sp, #52	; 0x34
 8008b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b08:	4642      	mov	r2, r8
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	4649      	mov	r1, r9
 8008b10:	f7fa fc74 	bl	80033fc <__aeabi_dcmpun>
 8008b14:	b110      	cbz	r0, 8008b1c <_printf_float+0xd8>
 8008b16:	4a8c      	ldr	r2, [pc, #560]	; (8008d48 <_printf_float+0x304>)
 8008b18:	4b8c      	ldr	r3, [pc, #560]	; (8008d4c <_printf_float+0x308>)
 8008b1a:	e7da      	b.n	8008ad2 <_printf_float+0x8e>
 8008b1c:	6861      	ldr	r1, [r4, #4]
 8008b1e:	1c4b      	adds	r3, r1, #1
 8008b20:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008b24:	a80a      	add	r0, sp, #40	; 0x28
 8008b26:	d13e      	bne.n	8008ba6 <_printf_float+0x162>
 8008b28:	2306      	movs	r3, #6
 8008b2a:	6063      	str	r3, [r4, #4]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008b32:	ab09      	add	r3, sp, #36	; 0x24
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	ec49 8b10 	vmov	d0, r8, r9
 8008b3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b3e:	6022      	str	r2, [r4, #0]
 8008b40:	f8cd a004 	str.w	sl, [sp, #4]
 8008b44:	6861      	ldr	r1, [r4, #4]
 8008b46:	4628      	mov	r0, r5
 8008b48:	f7ff fee8 	bl	800891c <__cvt>
 8008b4c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008b50:	2b47      	cmp	r3, #71	; 0x47
 8008b52:	4680      	mov	r8, r0
 8008b54:	d109      	bne.n	8008b6a <_printf_float+0x126>
 8008b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b58:	1cd8      	adds	r0, r3, #3
 8008b5a:	db02      	blt.n	8008b62 <_printf_float+0x11e>
 8008b5c:	6862      	ldr	r2, [r4, #4]
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	dd47      	ble.n	8008bf2 <_printf_float+0x1ae>
 8008b62:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b66:	fa5f fa8a 	uxtb.w	sl, sl
 8008b6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008b6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b70:	d824      	bhi.n	8008bbc <_printf_float+0x178>
 8008b72:	3901      	subs	r1, #1
 8008b74:	4652      	mov	r2, sl
 8008b76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b7a:	9109      	str	r1, [sp, #36]	; 0x24
 8008b7c:	f7ff ff2f 	bl	80089de <__exponent>
 8008b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b82:	1813      	adds	r3, r2, r0
 8008b84:	2a01      	cmp	r2, #1
 8008b86:	4681      	mov	r9, r0
 8008b88:	6123      	str	r3, [r4, #16]
 8008b8a:	dc02      	bgt.n	8008b92 <_printf_float+0x14e>
 8008b8c:	6822      	ldr	r2, [r4, #0]
 8008b8e:	07d1      	lsls	r1, r2, #31
 8008b90:	d501      	bpl.n	8008b96 <_printf_float+0x152>
 8008b92:	3301      	adds	r3, #1
 8008b94:	6123      	str	r3, [r4, #16]
 8008b96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0a5      	beq.n	8008aea <_printf_float+0xa6>
 8008b9e:	232d      	movs	r3, #45	; 0x2d
 8008ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba4:	e7a1      	b.n	8008aea <_printf_float+0xa6>
 8008ba6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008baa:	f000 8177 	beq.w	8008e9c <_printf_float+0x458>
 8008bae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008bb2:	d1bb      	bne.n	8008b2c <_printf_float+0xe8>
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	d1b9      	bne.n	8008b2c <_printf_float+0xe8>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e7b6      	b.n	8008b2a <_printf_float+0xe6>
 8008bbc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008bc0:	d119      	bne.n	8008bf6 <_printf_float+0x1b2>
 8008bc2:	2900      	cmp	r1, #0
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	dd0c      	ble.n	8008be2 <_printf_float+0x19e>
 8008bc8:	6121      	str	r1, [r4, #16]
 8008bca:	b913      	cbnz	r3, 8008bd2 <_printf_float+0x18e>
 8008bcc:	6822      	ldr	r2, [r4, #0]
 8008bce:	07d2      	lsls	r2, r2, #31
 8008bd0:	d502      	bpl.n	8008bd8 <_printf_float+0x194>
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	440b      	add	r3, r1
 8008bd6:	6123      	str	r3, [r4, #16]
 8008bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bda:	65a3      	str	r3, [r4, #88]	; 0x58
 8008bdc:	f04f 0900 	mov.w	r9, #0
 8008be0:	e7d9      	b.n	8008b96 <_printf_float+0x152>
 8008be2:	b913      	cbnz	r3, 8008bea <_printf_float+0x1a6>
 8008be4:	6822      	ldr	r2, [r4, #0]
 8008be6:	07d0      	lsls	r0, r2, #31
 8008be8:	d501      	bpl.n	8008bee <_printf_float+0x1aa>
 8008bea:	3302      	adds	r3, #2
 8008bec:	e7f3      	b.n	8008bd6 <_printf_float+0x192>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e7f1      	b.n	8008bd6 <_printf_float+0x192>
 8008bf2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008bf6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	db05      	blt.n	8008c0a <_printf_float+0x1c6>
 8008bfe:	6822      	ldr	r2, [r4, #0]
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	07d1      	lsls	r1, r2, #31
 8008c04:	d5e8      	bpl.n	8008bd8 <_printf_float+0x194>
 8008c06:	3301      	adds	r3, #1
 8008c08:	e7e5      	b.n	8008bd6 <_printf_float+0x192>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	bfd4      	ite	le
 8008c0e:	f1c3 0302 	rsble	r3, r3, #2
 8008c12:	2301      	movgt	r3, #1
 8008c14:	4413      	add	r3, r2
 8008c16:	e7de      	b.n	8008bd6 <_printf_float+0x192>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	055a      	lsls	r2, r3, #21
 8008c1c:	d407      	bmi.n	8008c2e <_printf_float+0x1ea>
 8008c1e:	6923      	ldr	r3, [r4, #16]
 8008c20:	4642      	mov	r2, r8
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d12b      	bne.n	8008c84 <_printf_float+0x240>
 8008c2c:	e767      	b.n	8008afe <_printf_float+0xba>
 8008c2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008c32:	f240 80dc 	bls.w	8008dee <_printf_float+0x3aa>
 8008c36:	2200      	movs	r2, #0
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c3e:	f7fa fbab 	bl	8003398 <__aeabi_dcmpeq>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d033      	beq.n	8008cae <_printf_float+0x26a>
 8008c46:	2301      	movs	r3, #1
 8008c48:	4a41      	ldr	r2, [pc, #260]	; (8008d50 <_printf_float+0x30c>)
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b8      	blx	r7
 8008c50:	3001      	adds	r0, #1
 8008c52:	f43f af54 	beq.w	8008afe <_printf_float+0xba>
 8008c56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	db02      	blt.n	8008c64 <_printf_float+0x220>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	07d8      	lsls	r0, r3, #31
 8008c62:	d50f      	bpl.n	8008c84 <_printf_float+0x240>
 8008c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c68:	4631      	mov	r1, r6
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	47b8      	blx	r7
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f43f af45 	beq.w	8008afe <_printf_float+0xba>
 8008c74:	f04f 0800 	mov.w	r8, #0
 8008c78:	f104 091a 	add.w	r9, r4, #26
 8008c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	4543      	cmp	r3, r8
 8008c82:	dc09      	bgt.n	8008c98 <_printf_float+0x254>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	079b      	lsls	r3, r3, #30
 8008c88:	f100 8103 	bmi.w	8008e92 <_printf_float+0x44e>
 8008c8c:	68e0      	ldr	r0, [r4, #12]
 8008c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c90:	4298      	cmp	r0, r3
 8008c92:	bfb8      	it	lt
 8008c94:	4618      	movlt	r0, r3
 8008c96:	e734      	b.n	8008b02 <_printf_float+0xbe>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	464a      	mov	r2, r9
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b8      	blx	r7
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	f43f af2b 	beq.w	8008afe <_printf_float+0xba>
 8008ca8:	f108 0801 	add.w	r8, r8, #1
 8008cac:	e7e6      	b.n	8008c7c <_printf_float+0x238>
 8008cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dc2b      	bgt.n	8008d0c <_printf_float+0x2c8>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	4a26      	ldr	r2, [pc, #152]	; (8008d50 <_printf_float+0x30c>)
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b8      	blx	r7
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	f43f af1d 	beq.w	8008afe <_printf_float+0xba>
 8008cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc6:	b923      	cbnz	r3, 8008cd2 <_printf_float+0x28e>
 8008cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cca:	b913      	cbnz	r3, 8008cd2 <_printf_float+0x28e>
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	07d9      	lsls	r1, r3, #31
 8008cd0:	d5d8      	bpl.n	8008c84 <_printf_float+0x240>
 8008cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b8      	blx	r7
 8008cdc:	3001      	adds	r0, #1
 8008cde:	f43f af0e 	beq.w	8008afe <_printf_float+0xba>
 8008ce2:	f04f 0900 	mov.w	r9, #0
 8008ce6:	f104 0a1a 	add.w	sl, r4, #26
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	425b      	negs	r3, r3
 8008cee:	454b      	cmp	r3, r9
 8008cf0:	dc01      	bgt.n	8008cf6 <_printf_float+0x2b2>
 8008cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf4:	e794      	b.n	8008c20 <_printf_float+0x1dc>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	4652      	mov	r2, sl
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	47b8      	blx	r7
 8008d00:	3001      	adds	r0, #1
 8008d02:	f43f aefc 	beq.w	8008afe <_printf_float+0xba>
 8008d06:	f109 0901 	add.w	r9, r9, #1
 8008d0a:	e7ee      	b.n	8008cea <_printf_float+0x2a6>
 8008d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d10:	429a      	cmp	r2, r3
 8008d12:	bfa8      	it	ge
 8008d14:	461a      	movge	r2, r3
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	4691      	mov	r9, r2
 8008d1a:	dd07      	ble.n	8008d2c <_printf_float+0x2e8>
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4642      	mov	r2, r8
 8008d22:	4628      	mov	r0, r5
 8008d24:	47b8      	blx	r7
 8008d26:	3001      	adds	r0, #1
 8008d28:	f43f aee9 	beq.w	8008afe <_printf_float+0xba>
 8008d2c:	f104 031a 	add.w	r3, r4, #26
 8008d30:	f04f 0b00 	mov.w	fp, #0
 8008d34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d38:	9306      	str	r3, [sp, #24]
 8008d3a:	e015      	b.n	8008d68 <_printf_float+0x324>
 8008d3c:	7fefffff 	.word	0x7fefffff
 8008d40:	08012de4 	.word	0x08012de4
 8008d44:	08012de0 	.word	0x08012de0
 8008d48:	08012dec 	.word	0x08012dec
 8008d4c:	08012de8 	.word	0x08012de8
 8008d50:	08012df0 	.word	0x08012df0
 8008d54:	2301      	movs	r3, #1
 8008d56:	9a06      	ldr	r2, [sp, #24]
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f43f aecd 	beq.w	8008afe <_printf_float+0xba>
 8008d64:	f10b 0b01 	add.w	fp, fp, #1
 8008d68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008d6c:	ebaa 0309 	sub.w	r3, sl, r9
 8008d70:	455b      	cmp	r3, fp
 8008d72:	dcef      	bgt.n	8008d54 <_printf_float+0x310>
 8008d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	44d0      	add	r8, sl
 8008d7c:	db15      	blt.n	8008daa <_printf_float+0x366>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	07da      	lsls	r2, r3, #31
 8008d82:	d412      	bmi.n	8008daa <_printf_float+0x366>
 8008d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d88:	eba3 020a 	sub.w	r2, r3, sl
 8008d8c:	eba3 0a01 	sub.w	sl, r3, r1
 8008d90:	4592      	cmp	sl, r2
 8008d92:	bfa8      	it	ge
 8008d94:	4692      	movge	sl, r2
 8008d96:	f1ba 0f00 	cmp.w	sl, #0
 8008d9a:	dc0e      	bgt.n	8008dba <_printf_float+0x376>
 8008d9c:	f04f 0800 	mov.w	r8, #0
 8008da0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008da4:	f104 091a 	add.w	r9, r4, #26
 8008da8:	e019      	b.n	8008dde <_printf_float+0x39a>
 8008daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dae:	4631      	mov	r1, r6
 8008db0:	4628      	mov	r0, r5
 8008db2:	47b8      	blx	r7
 8008db4:	3001      	adds	r0, #1
 8008db6:	d1e5      	bne.n	8008d84 <_printf_float+0x340>
 8008db8:	e6a1      	b.n	8008afe <_printf_float+0xba>
 8008dba:	4653      	mov	r3, sl
 8008dbc:	4642      	mov	r2, r8
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	47b8      	blx	r7
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d1e9      	bne.n	8008d9c <_printf_float+0x358>
 8008dc8:	e699      	b.n	8008afe <_printf_float+0xba>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	464a      	mov	r2, r9
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f43f ae92 	beq.w	8008afe <_printf_float+0xba>
 8008dda:	f108 0801 	add.w	r8, r8, #1
 8008dde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	eba3 030a 	sub.w	r3, r3, sl
 8008de8:	4543      	cmp	r3, r8
 8008dea:	dcee      	bgt.n	8008dca <_printf_float+0x386>
 8008dec:	e74a      	b.n	8008c84 <_printf_float+0x240>
 8008dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008df0:	2a01      	cmp	r2, #1
 8008df2:	dc01      	bgt.n	8008df8 <_printf_float+0x3b4>
 8008df4:	07db      	lsls	r3, r3, #31
 8008df6:	d53a      	bpl.n	8008e6e <_printf_float+0x42a>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	4642      	mov	r2, r8
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4628      	mov	r0, r5
 8008e00:	47b8      	blx	r7
 8008e02:	3001      	adds	r0, #1
 8008e04:	f43f ae7b 	beq.w	8008afe <_printf_float+0xba>
 8008e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4628      	mov	r0, r5
 8008e10:	47b8      	blx	r7
 8008e12:	3001      	adds	r0, #1
 8008e14:	f108 0801 	add.w	r8, r8, #1
 8008e18:	f43f ae71 	beq.w	8008afe <_printf_float+0xba>
 8008e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f103 3aff 	add.w	sl, r3, #4294967295
 8008e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f7fa fab5 	bl	8003398 <__aeabi_dcmpeq>
 8008e2e:	b9c8      	cbnz	r0, 8008e64 <_printf_float+0x420>
 8008e30:	4653      	mov	r3, sl
 8008e32:	4642      	mov	r2, r8
 8008e34:	4631      	mov	r1, r6
 8008e36:	4628      	mov	r0, r5
 8008e38:	47b8      	blx	r7
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d10e      	bne.n	8008e5c <_printf_float+0x418>
 8008e3e:	e65e      	b.n	8008afe <_printf_float+0xba>
 8008e40:	2301      	movs	r3, #1
 8008e42:	4652      	mov	r2, sl
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	f43f ae57 	beq.w	8008afe <_printf_float+0xba>
 8008e50:	f108 0801 	add.w	r8, r8, #1
 8008e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e56:	3b01      	subs	r3, #1
 8008e58:	4543      	cmp	r3, r8
 8008e5a:	dcf1      	bgt.n	8008e40 <_printf_float+0x3fc>
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e62:	e6de      	b.n	8008c22 <_printf_float+0x1de>
 8008e64:	f04f 0800 	mov.w	r8, #0
 8008e68:	f104 0a1a 	add.w	sl, r4, #26
 8008e6c:	e7f2      	b.n	8008e54 <_printf_float+0x410>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e7df      	b.n	8008e32 <_printf_float+0x3ee>
 8008e72:	2301      	movs	r3, #1
 8008e74:	464a      	mov	r2, r9
 8008e76:	4631      	mov	r1, r6
 8008e78:	4628      	mov	r0, r5
 8008e7a:	47b8      	blx	r7
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	f43f ae3e 	beq.w	8008afe <_printf_float+0xba>
 8008e82:	f108 0801 	add.w	r8, r8, #1
 8008e86:	68e3      	ldr	r3, [r4, #12]
 8008e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	4543      	cmp	r3, r8
 8008e8e:	dcf0      	bgt.n	8008e72 <_printf_float+0x42e>
 8008e90:	e6fc      	b.n	8008c8c <_printf_float+0x248>
 8008e92:	f04f 0800 	mov.w	r8, #0
 8008e96:	f104 0919 	add.w	r9, r4, #25
 8008e9a:	e7f4      	b.n	8008e86 <_printf_float+0x442>
 8008e9c:	2900      	cmp	r1, #0
 8008e9e:	f43f ae8b 	beq.w	8008bb8 <_printf_float+0x174>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008ea8:	ab09      	add	r3, sp, #36	; 0x24
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	ec49 8b10 	vmov	d0, r8, r9
 8008eb0:	6022      	str	r2, [r4, #0]
 8008eb2:	f8cd a004 	str.w	sl, [sp, #4]
 8008eb6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f7ff fd2e 	bl	800891c <__cvt>
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	e648      	b.n	8008b56 <_printf_float+0x112>

08008ec4 <_printf_common>:
 8008ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	4691      	mov	r9, r2
 8008eca:	461f      	mov	r7, r3
 8008ecc:	688a      	ldr	r2, [r1, #8]
 8008ece:	690b      	ldr	r3, [r1, #16]
 8008ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bfb8      	it	lt
 8008ed8:	4613      	movlt	r3, r2
 8008eda:	f8c9 3000 	str.w	r3, [r9]
 8008ede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	b112      	cbz	r2, 8008eee <_printf_common+0x2a>
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f8c9 3000 	str.w	r3, [r9]
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	0699      	lsls	r1, r3, #26
 8008ef2:	bf42      	ittt	mi
 8008ef4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ef8:	3302      	addmi	r3, #2
 8008efa:	f8c9 3000 	strmi.w	r3, [r9]
 8008efe:	6825      	ldr	r5, [r4, #0]
 8008f00:	f015 0506 	ands.w	r5, r5, #6
 8008f04:	d107      	bne.n	8008f16 <_printf_common+0x52>
 8008f06:	f104 0a19 	add.w	sl, r4, #25
 8008f0a:	68e3      	ldr	r3, [r4, #12]
 8008f0c:	f8d9 2000 	ldr.w	r2, [r9]
 8008f10:	1a9b      	subs	r3, r3, r2
 8008f12:	42ab      	cmp	r3, r5
 8008f14:	dc28      	bgt.n	8008f68 <_printf_common+0xa4>
 8008f16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008f1a:	6822      	ldr	r2, [r4, #0]
 8008f1c:	3300      	adds	r3, #0
 8008f1e:	bf18      	it	ne
 8008f20:	2301      	movne	r3, #1
 8008f22:	0692      	lsls	r2, r2, #26
 8008f24:	d42d      	bmi.n	8008f82 <_printf_common+0xbe>
 8008f26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	47c0      	blx	r8
 8008f30:	3001      	adds	r0, #1
 8008f32:	d020      	beq.n	8008f76 <_printf_common+0xb2>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	68e5      	ldr	r5, [r4, #12]
 8008f38:	f8d9 2000 	ldr.w	r2, [r9]
 8008f3c:	f003 0306 	and.w	r3, r3, #6
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	bf08      	it	eq
 8008f44:	1aad      	subeq	r5, r5, r2
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	6922      	ldr	r2, [r4, #16]
 8008f4a:	bf0c      	ite	eq
 8008f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f50:	2500      	movne	r5, #0
 8008f52:	4293      	cmp	r3, r2
 8008f54:	bfc4      	itt	gt
 8008f56:	1a9b      	subgt	r3, r3, r2
 8008f58:	18ed      	addgt	r5, r5, r3
 8008f5a:	f04f 0900 	mov.w	r9, #0
 8008f5e:	341a      	adds	r4, #26
 8008f60:	454d      	cmp	r5, r9
 8008f62:	d11a      	bne.n	8008f9a <_printf_common+0xd6>
 8008f64:	2000      	movs	r0, #0
 8008f66:	e008      	b.n	8008f7a <_printf_common+0xb6>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	4652      	mov	r2, sl
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	4630      	mov	r0, r6
 8008f70:	47c0      	blx	r8
 8008f72:	3001      	adds	r0, #1
 8008f74:	d103      	bne.n	8008f7e <_printf_common+0xba>
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7e:	3501      	adds	r5, #1
 8008f80:	e7c3      	b.n	8008f0a <_printf_common+0x46>
 8008f82:	18e1      	adds	r1, r4, r3
 8008f84:	1c5a      	adds	r2, r3, #1
 8008f86:	2030      	movs	r0, #48	; 0x30
 8008f88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f8c:	4422      	add	r2, r4
 8008f8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f96:	3302      	adds	r3, #2
 8008f98:	e7c5      	b.n	8008f26 <_printf_common+0x62>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	47c0      	blx	r8
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d0e6      	beq.n	8008f76 <_printf_common+0xb2>
 8008fa8:	f109 0901 	add.w	r9, r9, #1
 8008fac:	e7d8      	b.n	8008f60 <_printf_common+0x9c>
	...

08008fb0 <_printf_i>:
 8008fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008fb8:	460c      	mov	r4, r1
 8008fba:	7e09      	ldrb	r1, [r1, #24]
 8008fbc:	b085      	sub	sp, #20
 8008fbe:	296e      	cmp	r1, #110	; 0x6e
 8008fc0:	4617      	mov	r7, r2
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	4698      	mov	r8, r3
 8008fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fc8:	f000 80b3 	beq.w	8009132 <_printf_i+0x182>
 8008fcc:	d822      	bhi.n	8009014 <_printf_i+0x64>
 8008fce:	2963      	cmp	r1, #99	; 0x63
 8008fd0:	d036      	beq.n	8009040 <_printf_i+0x90>
 8008fd2:	d80a      	bhi.n	8008fea <_printf_i+0x3a>
 8008fd4:	2900      	cmp	r1, #0
 8008fd6:	f000 80b9 	beq.w	800914c <_printf_i+0x19c>
 8008fda:	2958      	cmp	r1, #88	; 0x58
 8008fdc:	f000 8083 	beq.w	80090e6 <_printf_i+0x136>
 8008fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fe4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008fe8:	e032      	b.n	8009050 <_printf_i+0xa0>
 8008fea:	2964      	cmp	r1, #100	; 0x64
 8008fec:	d001      	beq.n	8008ff2 <_printf_i+0x42>
 8008fee:	2969      	cmp	r1, #105	; 0x69
 8008ff0:	d1f6      	bne.n	8008fe0 <_printf_i+0x30>
 8008ff2:	6820      	ldr	r0, [r4, #0]
 8008ff4:	6813      	ldr	r3, [r2, #0]
 8008ff6:	0605      	lsls	r5, r0, #24
 8008ff8:	f103 0104 	add.w	r1, r3, #4
 8008ffc:	d52a      	bpl.n	8009054 <_printf_i+0xa4>
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6011      	str	r1, [r2, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	da03      	bge.n	800900e <_printf_i+0x5e>
 8009006:	222d      	movs	r2, #45	; 0x2d
 8009008:	425b      	negs	r3, r3
 800900a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800900e:	486f      	ldr	r0, [pc, #444]	; (80091cc <_printf_i+0x21c>)
 8009010:	220a      	movs	r2, #10
 8009012:	e039      	b.n	8009088 <_printf_i+0xd8>
 8009014:	2973      	cmp	r1, #115	; 0x73
 8009016:	f000 809d 	beq.w	8009154 <_printf_i+0x1a4>
 800901a:	d808      	bhi.n	800902e <_printf_i+0x7e>
 800901c:	296f      	cmp	r1, #111	; 0x6f
 800901e:	d020      	beq.n	8009062 <_printf_i+0xb2>
 8009020:	2970      	cmp	r1, #112	; 0x70
 8009022:	d1dd      	bne.n	8008fe0 <_printf_i+0x30>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	f043 0320 	orr.w	r3, r3, #32
 800902a:	6023      	str	r3, [r4, #0]
 800902c:	e003      	b.n	8009036 <_printf_i+0x86>
 800902e:	2975      	cmp	r1, #117	; 0x75
 8009030:	d017      	beq.n	8009062 <_printf_i+0xb2>
 8009032:	2978      	cmp	r1, #120	; 0x78
 8009034:	d1d4      	bne.n	8008fe0 <_printf_i+0x30>
 8009036:	2378      	movs	r3, #120	; 0x78
 8009038:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800903c:	4864      	ldr	r0, [pc, #400]	; (80091d0 <_printf_i+0x220>)
 800903e:	e055      	b.n	80090ec <_printf_i+0x13c>
 8009040:	6813      	ldr	r3, [r2, #0]
 8009042:	1d19      	adds	r1, r3, #4
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6011      	str	r1, [r2, #0]
 8009048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800904c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009050:	2301      	movs	r3, #1
 8009052:	e08c      	b.n	800916e <_printf_i+0x1be>
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6011      	str	r1, [r2, #0]
 8009058:	f010 0f40 	tst.w	r0, #64	; 0x40
 800905c:	bf18      	it	ne
 800905e:	b21b      	sxthne	r3, r3
 8009060:	e7cf      	b.n	8009002 <_printf_i+0x52>
 8009062:	6813      	ldr	r3, [r2, #0]
 8009064:	6825      	ldr	r5, [r4, #0]
 8009066:	1d18      	adds	r0, r3, #4
 8009068:	6010      	str	r0, [r2, #0]
 800906a:	0628      	lsls	r0, r5, #24
 800906c:	d501      	bpl.n	8009072 <_printf_i+0xc2>
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	e002      	b.n	8009078 <_printf_i+0xc8>
 8009072:	0668      	lsls	r0, r5, #25
 8009074:	d5fb      	bpl.n	800906e <_printf_i+0xbe>
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	4854      	ldr	r0, [pc, #336]	; (80091cc <_printf_i+0x21c>)
 800907a:	296f      	cmp	r1, #111	; 0x6f
 800907c:	bf14      	ite	ne
 800907e:	220a      	movne	r2, #10
 8009080:	2208      	moveq	r2, #8
 8009082:	2100      	movs	r1, #0
 8009084:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009088:	6865      	ldr	r5, [r4, #4]
 800908a:	60a5      	str	r5, [r4, #8]
 800908c:	2d00      	cmp	r5, #0
 800908e:	f2c0 8095 	blt.w	80091bc <_printf_i+0x20c>
 8009092:	6821      	ldr	r1, [r4, #0]
 8009094:	f021 0104 	bic.w	r1, r1, #4
 8009098:	6021      	str	r1, [r4, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d13d      	bne.n	800911a <_printf_i+0x16a>
 800909e:	2d00      	cmp	r5, #0
 80090a0:	f040 808e 	bne.w	80091c0 <_printf_i+0x210>
 80090a4:	4665      	mov	r5, ip
 80090a6:	2a08      	cmp	r2, #8
 80090a8:	d10b      	bne.n	80090c2 <_printf_i+0x112>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	07db      	lsls	r3, r3, #31
 80090ae:	d508      	bpl.n	80090c2 <_printf_i+0x112>
 80090b0:	6923      	ldr	r3, [r4, #16]
 80090b2:	6862      	ldr	r2, [r4, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	bfde      	ittt	le
 80090b8:	2330      	movle	r3, #48	; 0x30
 80090ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090c2:	ebac 0305 	sub.w	r3, ip, r5
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	f8cd 8000 	str.w	r8, [sp]
 80090cc:	463b      	mov	r3, r7
 80090ce:	aa03      	add	r2, sp, #12
 80090d0:	4621      	mov	r1, r4
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7ff fef6 	bl	8008ec4 <_printf_common>
 80090d8:	3001      	adds	r0, #1
 80090da:	d14d      	bne.n	8009178 <_printf_i+0x1c8>
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	b005      	add	sp, #20
 80090e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090e6:	4839      	ldr	r0, [pc, #228]	; (80091cc <_printf_i+0x21c>)
 80090e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80090ec:	6813      	ldr	r3, [r2, #0]
 80090ee:	6821      	ldr	r1, [r4, #0]
 80090f0:	1d1d      	adds	r5, r3, #4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6015      	str	r5, [r2, #0]
 80090f6:	060a      	lsls	r2, r1, #24
 80090f8:	d50b      	bpl.n	8009112 <_printf_i+0x162>
 80090fa:	07ca      	lsls	r2, r1, #31
 80090fc:	bf44      	itt	mi
 80090fe:	f041 0120 	orrmi.w	r1, r1, #32
 8009102:	6021      	strmi	r1, [r4, #0]
 8009104:	b91b      	cbnz	r3, 800910e <_printf_i+0x15e>
 8009106:	6822      	ldr	r2, [r4, #0]
 8009108:	f022 0220 	bic.w	r2, r2, #32
 800910c:	6022      	str	r2, [r4, #0]
 800910e:	2210      	movs	r2, #16
 8009110:	e7b7      	b.n	8009082 <_printf_i+0xd2>
 8009112:	064d      	lsls	r5, r1, #25
 8009114:	bf48      	it	mi
 8009116:	b29b      	uxthmi	r3, r3
 8009118:	e7ef      	b.n	80090fa <_printf_i+0x14a>
 800911a:	4665      	mov	r5, ip
 800911c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009120:	fb02 3311 	mls	r3, r2, r1, r3
 8009124:	5cc3      	ldrb	r3, [r0, r3]
 8009126:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800912a:	460b      	mov	r3, r1
 800912c:	2900      	cmp	r1, #0
 800912e:	d1f5      	bne.n	800911c <_printf_i+0x16c>
 8009130:	e7b9      	b.n	80090a6 <_printf_i+0xf6>
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	6825      	ldr	r5, [r4, #0]
 8009136:	6961      	ldr	r1, [r4, #20]
 8009138:	1d18      	adds	r0, r3, #4
 800913a:	6010      	str	r0, [r2, #0]
 800913c:	0628      	lsls	r0, r5, #24
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	d501      	bpl.n	8009146 <_printf_i+0x196>
 8009142:	6019      	str	r1, [r3, #0]
 8009144:	e002      	b.n	800914c <_printf_i+0x19c>
 8009146:	066a      	lsls	r2, r5, #25
 8009148:	d5fb      	bpl.n	8009142 <_printf_i+0x192>
 800914a:	8019      	strh	r1, [r3, #0]
 800914c:	2300      	movs	r3, #0
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	4665      	mov	r5, ip
 8009152:	e7b9      	b.n	80090c8 <_printf_i+0x118>
 8009154:	6813      	ldr	r3, [r2, #0]
 8009156:	1d19      	adds	r1, r3, #4
 8009158:	6011      	str	r1, [r2, #0]
 800915a:	681d      	ldr	r5, [r3, #0]
 800915c:	6862      	ldr	r2, [r4, #4]
 800915e:	2100      	movs	r1, #0
 8009160:	4628      	mov	r0, r5
 8009162:	f7f9 fca5 	bl	8002ab0 <memchr>
 8009166:	b108      	cbz	r0, 800916c <_printf_i+0x1bc>
 8009168:	1b40      	subs	r0, r0, r5
 800916a:	6060      	str	r0, [r4, #4]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	2300      	movs	r3, #0
 8009172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009176:	e7a7      	b.n	80090c8 <_printf_i+0x118>
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	462a      	mov	r2, r5
 800917c:	4639      	mov	r1, r7
 800917e:	4630      	mov	r0, r6
 8009180:	47c0      	blx	r8
 8009182:	3001      	adds	r0, #1
 8009184:	d0aa      	beq.n	80090dc <_printf_i+0x12c>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	079b      	lsls	r3, r3, #30
 800918a:	d413      	bmi.n	80091b4 <_printf_i+0x204>
 800918c:	68e0      	ldr	r0, [r4, #12]
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	4298      	cmp	r0, r3
 8009192:	bfb8      	it	lt
 8009194:	4618      	movlt	r0, r3
 8009196:	e7a3      	b.n	80090e0 <_printf_i+0x130>
 8009198:	2301      	movs	r3, #1
 800919a:	464a      	mov	r2, r9
 800919c:	4639      	mov	r1, r7
 800919e:	4630      	mov	r0, r6
 80091a0:	47c0      	blx	r8
 80091a2:	3001      	adds	r0, #1
 80091a4:	d09a      	beq.n	80090dc <_printf_i+0x12c>
 80091a6:	3501      	adds	r5, #1
 80091a8:	68e3      	ldr	r3, [r4, #12]
 80091aa:	9a03      	ldr	r2, [sp, #12]
 80091ac:	1a9b      	subs	r3, r3, r2
 80091ae:	42ab      	cmp	r3, r5
 80091b0:	dcf2      	bgt.n	8009198 <_printf_i+0x1e8>
 80091b2:	e7eb      	b.n	800918c <_printf_i+0x1dc>
 80091b4:	2500      	movs	r5, #0
 80091b6:	f104 0919 	add.w	r9, r4, #25
 80091ba:	e7f5      	b.n	80091a8 <_printf_i+0x1f8>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1ac      	bne.n	800911a <_printf_i+0x16a>
 80091c0:	7803      	ldrb	r3, [r0, #0]
 80091c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091ca:	e76c      	b.n	80090a6 <_printf_i+0xf6>
 80091cc:	08012df2 	.word	0x08012df2
 80091d0:	08012e03 	.word	0x08012e03

080091d4 <iprintf>:
 80091d4:	b40f      	push	{r0, r1, r2, r3}
 80091d6:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <iprintf+0x2c>)
 80091d8:	b513      	push	{r0, r1, r4, lr}
 80091da:	681c      	ldr	r4, [r3, #0]
 80091dc:	b124      	cbz	r4, 80091e8 <iprintf+0x14>
 80091de:	69a3      	ldr	r3, [r4, #24]
 80091e0:	b913      	cbnz	r3, 80091e8 <iprintf+0x14>
 80091e2:	4620      	mov	r0, r4
 80091e4:	f001 f88c 	bl	800a300 <__sinit>
 80091e8:	ab05      	add	r3, sp, #20
 80091ea:	9a04      	ldr	r2, [sp, #16]
 80091ec:	68a1      	ldr	r1, [r4, #8]
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	4620      	mov	r0, r4
 80091f2:	f001 fc89 	bl	800ab08 <_vfiprintf_r>
 80091f6:	b002      	add	sp, #8
 80091f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fc:	b004      	add	sp, #16
 80091fe:	4770      	bx	lr
 8009200:	2000000c 	.word	0x2000000c

08009204 <putchar>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4b08      	ldr	r3, [pc, #32]	; (8009228 <putchar+0x24>)
 8009208:	681c      	ldr	r4, [r3, #0]
 800920a:	4605      	mov	r5, r0
 800920c:	b124      	cbz	r4, 8009218 <putchar+0x14>
 800920e:	69a3      	ldr	r3, [r4, #24]
 8009210:	b913      	cbnz	r3, 8009218 <putchar+0x14>
 8009212:	4620      	mov	r0, r4
 8009214:	f001 f874 	bl	800a300 <__sinit>
 8009218:	68a2      	ldr	r2, [r4, #8]
 800921a:	4629      	mov	r1, r5
 800921c:	4620      	mov	r0, r4
 800921e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009222:	f001 bd87 	b.w	800ad34 <_putc_r>
 8009226:	bf00      	nop
 8009228:	2000000c 	.word	0x2000000c

0800922c <_puts_r>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	460e      	mov	r6, r1
 8009230:	4605      	mov	r5, r0
 8009232:	b118      	cbz	r0, 800923c <_puts_r+0x10>
 8009234:	6983      	ldr	r3, [r0, #24]
 8009236:	b90b      	cbnz	r3, 800923c <_puts_r+0x10>
 8009238:	f001 f862 	bl	800a300 <__sinit>
 800923c:	69ab      	ldr	r3, [r5, #24]
 800923e:	68ac      	ldr	r4, [r5, #8]
 8009240:	b913      	cbnz	r3, 8009248 <_puts_r+0x1c>
 8009242:	4628      	mov	r0, r5
 8009244:	f001 f85c 	bl	800a300 <__sinit>
 8009248:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <_puts_r+0xac>)
 800924a:	429c      	cmp	r4, r3
 800924c:	d117      	bne.n	800927e <_puts_r+0x52>
 800924e:	686c      	ldr	r4, [r5, #4]
 8009250:	89a3      	ldrh	r3, [r4, #12]
 8009252:	071b      	lsls	r3, r3, #28
 8009254:	d51d      	bpl.n	8009292 <_puts_r+0x66>
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	b1db      	cbz	r3, 8009292 <_puts_r+0x66>
 800925a:	3e01      	subs	r6, #1
 800925c:	68a3      	ldr	r3, [r4, #8]
 800925e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009262:	3b01      	subs	r3, #1
 8009264:	60a3      	str	r3, [r4, #8]
 8009266:	b9e9      	cbnz	r1, 80092a4 <_puts_r+0x78>
 8009268:	2b00      	cmp	r3, #0
 800926a:	da2e      	bge.n	80092ca <_puts_r+0x9e>
 800926c:	4622      	mov	r2, r4
 800926e:	210a      	movs	r1, #10
 8009270:	4628      	mov	r0, r5
 8009272:	f000 f84f 	bl	8009314 <__swbuf_r>
 8009276:	3001      	adds	r0, #1
 8009278:	d011      	beq.n	800929e <_puts_r+0x72>
 800927a:	200a      	movs	r0, #10
 800927c:	e011      	b.n	80092a2 <_puts_r+0x76>
 800927e:	4b17      	ldr	r3, [pc, #92]	; (80092dc <_puts_r+0xb0>)
 8009280:	429c      	cmp	r4, r3
 8009282:	d101      	bne.n	8009288 <_puts_r+0x5c>
 8009284:	68ac      	ldr	r4, [r5, #8]
 8009286:	e7e3      	b.n	8009250 <_puts_r+0x24>
 8009288:	4b15      	ldr	r3, [pc, #84]	; (80092e0 <_puts_r+0xb4>)
 800928a:	429c      	cmp	r4, r3
 800928c:	bf08      	it	eq
 800928e:	68ec      	ldreq	r4, [r5, #12]
 8009290:	e7de      	b.n	8009250 <_puts_r+0x24>
 8009292:	4621      	mov	r1, r4
 8009294:	4628      	mov	r0, r5
 8009296:	f000 f88f 	bl	80093b8 <__swsetup_r>
 800929a:	2800      	cmp	r0, #0
 800929c:	d0dd      	beq.n	800925a <_puts_r+0x2e>
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	da04      	bge.n	80092b2 <_puts_r+0x86>
 80092a8:	69a2      	ldr	r2, [r4, #24]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	dc06      	bgt.n	80092bc <_puts_r+0x90>
 80092ae:	290a      	cmp	r1, #10
 80092b0:	d004      	beq.n	80092bc <_puts_r+0x90>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	6022      	str	r2, [r4, #0]
 80092b8:	7019      	strb	r1, [r3, #0]
 80092ba:	e7cf      	b.n	800925c <_puts_r+0x30>
 80092bc:	4622      	mov	r2, r4
 80092be:	4628      	mov	r0, r5
 80092c0:	f000 f828 	bl	8009314 <__swbuf_r>
 80092c4:	3001      	adds	r0, #1
 80092c6:	d1c9      	bne.n	800925c <_puts_r+0x30>
 80092c8:	e7e9      	b.n	800929e <_puts_r+0x72>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	200a      	movs	r0, #10
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	6022      	str	r2, [r4, #0]
 80092d2:	7018      	strb	r0, [r3, #0]
 80092d4:	e7e5      	b.n	80092a2 <_puts_r+0x76>
 80092d6:	bf00      	nop
 80092d8:	08012e44 	.word	0x08012e44
 80092dc:	08012e64 	.word	0x08012e64
 80092e0:	08012e24 	.word	0x08012e24

080092e4 <puts>:
 80092e4:	4b02      	ldr	r3, [pc, #8]	; (80092f0 <puts+0xc>)
 80092e6:	4601      	mov	r1, r0
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	f7ff bf9f 	b.w	800922c <_puts_r>
 80092ee:	bf00      	nop
 80092f0:	2000000c 	.word	0x2000000c

080092f4 <_sbrk_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4c06      	ldr	r4, [pc, #24]	; (8009310 <_sbrk_r+0x1c>)
 80092f8:	2300      	movs	r3, #0
 80092fa:	4605      	mov	r5, r0
 80092fc:	4608      	mov	r0, r1
 80092fe:	6023      	str	r3, [r4, #0]
 8009300:	f7fa fca8 	bl	8003c54 <_sbrk>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d102      	bne.n	800930e <_sbrk_r+0x1a>
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	b103      	cbz	r3, 800930e <_sbrk_r+0x1a>
 800930c:	602b      	str	r3, [r5, #0]
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	20000efc 	.word	0x20000efc

08009314 <__swbuf_r>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	460e      	mov	r6, r1
 8009318:	4614      	mov	r4, r2
 800931a:	4605      	mov	r5, r0
 800931c:	b118      	cbz	r0, 8009326 <__swbuf_r+0x12>
 800931e:	6983      	ldr	r3, [r0, #24]
 8009320:	b90b      	cbnz	r3, 8009326 <__swbuf_r+0x12>
 8009322:	f000 ffed 	bl	800a300 <__sinit>
 8009326:	4b21      	ldr	r3, [pc, #132]	; (80093ac <__swbuf_r+0x98>)
 8009328:	429c      	cmp	r4, r3
 800932a:	d12a      	bne.n	8009382 <__swbuf_r+0x6e>
 800932c:	686c      	ldr	r4, [r5, #4]
 800932e:	69a3      	ldr	r3, [r4, #24]
 8009330:	60a3      	str	r3, [r4, #8]
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	071a      	lsls	r2, r3, #28
 8009336:	d52e      	bpl.n	8009396 <__swbuf_r+0x82>
 8009338:	6923      	ldr	r3, [r4, #16]
 800933a:	b363      	cbz	r3, 8009396 <__swbuf_r+0x82>
 800933c:	6923      	ldr	r3, [r4, #16]
 800933e:	6820      	ldr	r0, [r4, #0]
 8009340:	1ac0      	subs	r0, r0, r3
 8009342:	6963      	ldr	r3, [r4, #20]
 8009344:	b2f6      	uxtb	r6, r6
 8009346:	4283      	cmp	r3, r0
 8009348:	4637      	mov	r7, r6
 800934a:	dc04      	bgt.n	8009356 <__swbuf_r+0x42>
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f000 ff6c 	bl	800a22c <_fflush_r>
 8009354:	bb28      	cbnz	r0, 80093a2 <__swbuf_r+0x8e>
 8009356:	68a3      	ldr	r3, [r4, #8]
 8009358:	3b01      	subs	r3, #1
 800935a:	60a3      	str	r3, [r4, #8]
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	6022      	str	r2, [r4, #0]
 8009362:	701e      	strb	r6, [r3, #0]
 8009364:	6963      	ldr	r3, [r4, #20]
 8009366:	3001      	adds	r0, #1
 8009368:	4283      	cmp	r3, r0
 800936a:	d004      	beq.n	8009376 <__swbuf_r+0x62>
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	07db      	lsls	r3, r3, #31
 8009370:	d519      	bpl.n	80093a6 <__swbuf_r+0x92>
 8009372:	2e0a      	cmp	r6, #10
 8009374:	d117      	bne.n	80093a6 <__swbuf_r+0x92>
 8009376:	4621      	mov	r1, r4
 8009378:	4628      	mov	r0, r5
 800937a:	f000 ff57 	bl	800a22c <_fflush_r>
 800937e:	b190      	cbz	r0, 80093a6 <__swbuf_r+0x92>
 8009380:	e00f      	b.n	80093a2 <__swbuf_r+0x8e>
 8009382:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <__swbuf_r+0x9c>)
 8009384:	429c      	cmp	r4, r3
 8009386:	d101      	bne.n	800938c <__swbuf_r+0x78>
 8009388:	68ac      	ldr	r4, [r5, #8]
 800938a:	e7d0      	b.n	800932e <__swbuf_r+0x1a>
 800938c:	4b09      	ldr	r3, [pc, #36]	; (80093b4 <__swbuf_r+0xa0>)
 800938e:	429c      	cmp	r4, r3
 8009390:	bf08      	it	eq
 8009392:	68ec      	ldreq	r4, [r5, #12]
 8009394:	e7cb      	b.n	800932e <__swbuf_r+0x1a>
 8009396:	4621      	mov	r1, r4
 8009398:	4628      	mov	r0, r5
 800939a:	f000 f80d 	bl	80093b8 <__swsetup_r>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d0cc      	beq.n	800933c <__swbuf_r+0x28>
 80093a2:	f04f 37ff 	mov.w	r7, #4294967295
 80093a6:	4638      	mov	r0, r7
 80093a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093aa:	bf00      	nop
 80093ac:	08012e44 	.word	0x08012e44
 80093b0:	08012e64 	.word	0x08012e64
 80093b4:	08012e24 	.word	0x08012e24

080093b8 <__swsetup_r>:
 80093b8:	4b32      	ldr	r3, [pc, #200]	; (8009484 <__swsetup_r+0xcc>)
 80093ba:	b570      	push	{r4, r5, r6, lr}
 80093bc:	681d      	ldr	r5, [r3, #0]
 80093be:	4606      	mov	r6, r0
 80093c0:	460c      	mov	r4, r1
 80093c2:	b125      	cbz	r5, 80093ce <__swsetup_r+0x16>
 80093c4:	69ab      	ldr	r3, [r5, #24]
 80093c6:	b913      	cbnz	r3, 80093ce <__swsetup_r+0x16>
 80093c8:	4628      	mov	r0, r5
 80093ca:	f000 ff99 	bl	800a300 <__sinit>
 80093ce:	4b2e      	ldr	r3, [pc, #184]	; (8009488 <__swsetup_r+0xd0>)
 80093d0:	429c      	cmp	r4, r3
 80093d2:	d10f      	bne.n	80093f4 <__swsetup_r+0x3c>
 80093d4:	686c      	ldr	r4, [r5, #4]
 80093d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093da:	b29a      	uxth	r2, r3
 80093dc:	0715      	lsls	r5, r2, #28
 80093de:	d42c      	bmi.n	800943a <__swsetup_r+0x82>
 80093e0:	06d0      	lsls	r0, r2, #27
 80093e2:	d411      	bmi.n	8009408 <__swsetup_r+0x50>
 80093e4:	2209      	movs	r2, #9
 80093e6:	6032      	str	r2, [r6, #0]
 80093e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	f04f 30ff 	mov.w	r0, #4294967295
 80093f2:	e03e      	b.n	8009472 <__swsetup_r+0xba>
 80093f4:	4b25      	ldr	r3, [pc, #148]	; (800948c <__swsetup_r+0xd4>)
 80093f6:	429c      	cmp	r4, r3
 80093f8:	d101      	bne.n	80093fe <__swsetup_r+0x46>
 80093fa:	68ac      	ldr	r4, [r5, #8]
 80093fc:	e7eb      	b.n	80093d6 <__swsetup_r+0x1e>
 80093fe:	4b24      	ldr	r3, [pc, #144]	; (8009490 <__swsetup_r+0xd8>)
 8009400:	429c      	cmp	r4, r3
 8009402:	bf08      	it	eq
 8009404:	68ec      	ldreq	r4, [r5, #12]
 8009406:	e7e6      	b.n	80093d6 <__swsetup_r+0x1e>
 8009408:	0751      	lsls	r1, r2, #29
 800940a:	d512      	bpl.n	8009432 <__swsetup_r+0x7a>
 800940c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800940e:	b141      	cbz	r1, 8009422 <__swsetup_r+0x6a>
 8009410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009414:	4299      	cmp	r1, r3
 8009416:	d002      	beq.n	800941e <__swsetup_r+0x66>
 8009418:	4630      	mov	r0, r6
 800941a:	f7ff f9d7 	bl	80087cc <_free_r>
 800941e:	2300      	movs	r3, #0
 8009420:	6363      	str	r3, [r4, #52]	; 0x34
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	2300      	movs	r3, #0
 800942c:	6063      	str	r3, [r4, #4]
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	f043 0308 	orr.w	r3, r3, #8
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	b94b      	cbnz	r3, 8009452 <__swsetup_r+0x9a>
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009448:	d003      	beq.n	8009452 <__swsetup_r+0x9a>
 800944a:	4621      	mov	r1, r4
 800944c:	4630      	mov	r0, r6
 800944e:	f001 f813 	bl	800a478 <__smakebuf_r>
 8009452:	89a2      	ldrh	r2, [r4, #12]
 8009454:	f012 0301 	ands.w	r3, r2, #1
 8009458:	d00c      	beq.n	8009474 <__swsetup_r+0xbc>
 800945a:	2300      	movs	r3, #0
 800945c:	60a3      	str	r3, [r4, #8]
 800945e:	6963      	ldr	r3, [r4, #20]
 8009460:	425b      	negs	r3, r3
 8009462:	61a3      	str	r3, [r4, #24]
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	b953      	cbnz	r3, 800947e <__swsetup_r+0xc6>
 8009468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009470:	d1ba      	bne.n	80093e8 <__swsetup_r+0x30>
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	0792      	lsls	r2, r2, #30
 8009476:	bf58      	it	pl
 8009478:	6963      	ldrpl	r3, [r4, #20]
 800947a:	60a3      	str	r3, [r4, #8]
 800947c:	e7f2      	b.n	8009464 <__swsetup_r+0xac>
 800947e:	2000      	movs	r0, #0
 8009480:	e7f7      	b.n	8009472 <__swsetup_r+0xba>
 8009482:	bf00      	nop
 8009484:	2000000c 	.word	0x2000000c
 8009488:	08012e44 	.word	0x08012e44
 800948c:	08012e64 	.word	0x08012e64
 8009490:	08012e24 	.word	0x08012e24

08009494 <quorem>:
 8009494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	6903      	ldr	r3, [r0, #16]
 800949a:	690c      	ldr	r4, [r1, #16]
 800949c:	42a3      	cmp	r3, r4
 800949e:	4680      	mov	r8, r0
 80094a0:	f2c0 8082 	blt.w	80095a8 <quorem+0x114>
 80094a4:	3c01      	subs	r4, #1
 80094a6:	f101 0714 	add.w	r7, r1, #20
 80094aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80094ae:	f100 0614 	add.w	r6, r0, #20
 80094b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80094b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80094ba:	eb06 030c 	add.w	r3, r6, ip
 80094be:	3501      	adds	r5, #1
 80094c0:	eb07 090c 	add.w	r9, r7, ip
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80094ca:	b395      	cbz	r5, 8009532 <quorem+0x9e>
 80094cc:	f04f 0a00 	mov.w	sl, #0
 80094d0:	4638      	mov	r0, r7
 80094d2:	46b6      	mov	lr, r6
 80094d4:	46d3      	mov	fp, sl
 80094d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80094da:	b293      	uxth	r3, r2
 80094dc:	fb05 a303 	mla	r3, r5, r3, sl
 80094e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	ebab 0303 	sub.w	r3, fp, r3
 80094ea:	0c12      	lsrs	r2, r2, #16
 80094ec:	f8de b000 	ldr.w	fp, [lr]
 80094f0:	fb05 a202 	mla	r2, r5, r2, sl
 80094f4:	fa13 f38b 	uxtah	r3, r3, fp
 80094f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80094fc:	fa1f fb82 	uxth.w	fp, r2
 8009500:	f8de 2000 	ldr.w	r2, [lr]
 8009504:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800950c:	b29b      	uxth	r3, r3
 800950e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009512:	4581      	cmp	r9, r0
 8009514:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009518:	f84e 3b04 	str.w	r3, [lr], #4
 800951c:	d2db      	bcs.n	80094d6 <quorem+0x42>
 800951e:	f856 300c 	ldr.w	r3, [r6, ip]
 8009522:	b933      	cbnz	r3, 8009532 <quorem+0x9e>
 8009524:	9b01      	ldr	r3, [sp, #4]
 8009526:	3b04      	subs	r3, #4
 8009528:	429e      	cmp	r6, r3
 800952a:	461a      	mov	r2, r3
 800952c:	d330      	bcc.n	8009590 <quorem+0xfc>
 800952e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009532:	4640      	mov	r0, r8
 8009534:	f001 f9f8 	bl	800a928 <__mcmp>
 8009538:	2800      	cmp	r0, #0
 800953a:	db25      	blt.n	8009588 <quorem+0xf4>
 800953c:	3501      	adds	r5, #1
 800953e:	4630      	mov	r0, r6
 8009540:	f04f 0c00 	mov.w	ip, #0
 8009544:	f857 2b04 	ldr.w	r2, [r7], #4
 8009548:	f8d0 e000 	ldr.w	lr, [r0]
 800954c:	b293      	uxth	r3, r2
 800954e:	ebac 0303 	sub.w	r3, ip, r3
 8009552:	0c12      	lsrs	r2, r2, #16
 8009554:	fa13 f38e 	uxtah	r3, r3, lr
 8009558:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800955c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009560:	b29b      	uxth	r3, r3
 8009562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009566:	45b9      	cmp	r9, r7
 8009568:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800956c:	f840 3b04 	str.w	r3, [r0], #4
 8009570:	d2e8      	bcs.n	8009544 <quorem+0xb0>
 8009572:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009576:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800957a:	b92a      	cbnz	r2, 8009588 <quorem+0xf4>
 800957c:	3b04      	subs	r3, #4
 800957e:	429e      	cmp	r6, r3
 8009580:	461a      	mov	r2, r3
 8009582:	d30b      	bcc.n	800959c <quorem+0x108>
 8009584:	f8c8 4010 	str.w	r4, [r8, #16]
 8009588:	4628      	mov	r0, r5
 800958a:	b003      	add	sp, #12
 800958c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009590:	6812      	ldr	r2, [r2, #0]
 8009592:	3b04      	subs	r3, #4
 8009594:	2a00      	cmp	r2, #0
 8009596:	d1ca      	bne.n	800952e <quorem+0x9a>
 8009598:	3c01      	subs	r4, #1
 800959a:	e7c5      	b.n	8009528 <quorem+0x94>
 800959c:	6812      	ldr	r2, [r2, #0]
 800959e:	3b04      	subs	r3, #4
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	d1ef      	bne.n	8009584 <quorem+0xf0>
 80095a4:	3c01      	subs	r4, #1
 80095a6:	e7ea      	b.n	800957e <quorem+0xea>
 80095a8:	2000      	movs	r0, #0
 80095aa:	e7ee      	b.n	800958a <quorem+0xf6>
 80095ac:	0000      	movs	r0, r0
	...

080095b0 <_dtoa_r>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	ec57 6b10 	vmov	r6, r7, d0
 80095b8:	b097      	sub	sp, #92	; 0x5c
 80095ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095bc:	9106      	str	r1, [sp, #24]
 80095be:	4604      	mov	r4, r0
 80095c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80095c2:	9312      	str	r3, [sp, #72]	; 0x48
 80095c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095c8:	e9cd 6700 	strd	r6, r7, [sp]
 80095cc:	b93d      	cbnz	r5, 80095de <_dtoa_r+0x2e>
 80095ce:	2010      	movs	r0, #16
 80095d0:	f7ff f8b2 	bl	8008738 <malloc>
 80095d4:	6260      	str	r0, [r4, #36]	; 0x24
 80095d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095da:	6005      	str	r5, [r0, #0]
 80095dc:	60c5      	str	r5, [r0, #12]
 80095de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e0:	6819      	ldr	r1, [r3, #0]
 80095e2:	b151      	cbz	r1, 80095fa <_dtoa_r+0x4a>
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	604a      	str	r2, [r1, #4]
 80095e8:	2301      	movs	r3, #1
 80095ea:	4093      	lsls	r3, r2
 80095ec:	608b      	str	r3, [r1, #8]
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 ffb8 	bl	800a564 <_Bfree>
 80095f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]
 80095fa:	1e3b      	subs	r3, r7, #0
 80095fc:	bfbb      	ittet	lt
 80095fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009602:	9301      	strlt	r3, [sp, #4]
 8009604:	2300      	movge	r3, #0
 8009606:	2201      	movlt	r2, #1
 8009608:	bfac      	ite	ge
 800960a:	f8c8 3000 	strge.w	r3, [r8]
 800960e:	f8c8 2000 	strlt.w	r2, [r8]
 8009612:	4baf      	ldr	r3, [pc, #700]	; (80098d0 <_dtoa_r+0x320>)
 8009614:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009618:	ea33 0308 	bics.w	r3, r3, r8
 800961c:	d114      	bne.n	8009648 <_dtoa_r+0x98>
 800961e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009620:	f242 730f 	movw	r3, #9999	; 0x270f
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	9b00      	ldr	r3, [sp, #0]
 8009628:	b923      	cbnz	r3, 8009634 <_dtoa_r+0x84>
 800962a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800962e:	2800      	cmp	r0, #0
 8009630:	f000 8542 	beq.w	800a0b8 <_dtoa_r+0xb08>
 8009634:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009636:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80098e4 <_dtoa_r+0x334>
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 8544 	beq.w	800a0c8 <_dtoa_r+0xb18>
 8009640:	f10b 0303 	add.w	r3, fp, #3
 8009644:	f000 bd3e 	b.w	800a0c4 <_dtoa_r+0xb14>
 8009648:	e9dd 6700 	ldrd	r6, r7, [sp]
 800964c:	2200      	movs	r2, #0
 800964e:	2300      	movs	r3, #0
 8009650:	4630      	mov	r0, r6
 8009652:	4639      	mov	r1, r7
 8009654:	f7f9 fea0 	bl	8003398 <__aeabi_dcmpeq>
 8009658:	4681      	mov	r9, r0
 800965a:	b168      	cbz	r0, 8009678 <_dtoa_r+0xc8>
 800965c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800965e:	2301      	movs	r3, #1
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 8524 	beq.w	800a0b2 <_dtoa_r+0xb02>
 800966a:	4b9a      	ldr	r3, [pc, #616]	; (80098d4 <_dtoa_r+0x324>)
 800966c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800966e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	f000 bd28 	b.w	800a0c8 <_dtoa_r+0xb18>
 8009678:	aa14      	add	r2, sp, #80	; 0x50
 800967a:	a915      	add	r1, sp, #84	; 0x54
 800967c:	ec47 6b10 	vmov	d0, r6, r7
 8009680:	4620      	mov	r0, r4
 8009682:	f001 f9c8 	bl	800aa16 <__d2b>
 8009686:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800968a:	9004      	str	r0, [sp, #16]
 800968c:	2d00      	cmp	r5, #0
 800968e:	d07c      	beq.n	800978a <_dtoa_r+0x1da>
 8009690:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009694:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009698:	46b2      	mov	sl, r6
 800969a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800969e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80096a6:	2200      	movs	r2, #0
 80096a8:	4b8b      	ldr	r3, [pc, #556]	; (80098d8 <_dtoa_r+0x328>)
 80096aa:	4650      	mov	r0, sl
 80096ac:	4659      	mov	r1, fp
 80096ae:	f7f9 fa53 	bl	8002b58 <__aeabi_dsub>
 80096b2:	a381      	add	r3, pc, #516	; (adr r3, 80098b8 <_dtoa_r+0x308>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	f7f9 fc06 	bl	8002ec8 <__aeabi_dmul>
 80096bc:	a380      	add	r3, pc, #512	; (adr r3, 80098c0 <_dtoa_r+0x310>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	f7f9 fa4b 	bl	8002b5c <__adddf3>
 80096c6:	4606      	mov	r6, r0
 80096c8:	4628      	mov	r0, r5
 80096ca:	460f      	mov	r7, r1
 80096cc:	f7f9 fb92 	bl	8002df4 <__aeabi_i2d>
 80096d0:	a37d      	add	r3, pc, #500	; (adr r3, 80098c8 <_dtoa_r+0x318>)
 80096d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d6:	f7f9 fbf7 	bl	8002ec8 <__aeabi_dmul>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4630      	mov	r0, r6
 80096e0:	4639      	mov	r1, r7
 80096e2:	f7f9 fa3b 	bl	8002b5c <__adddf3>
 80096e6:	4606      	mov	r6, r0
 80096e8:	460f      	mov	r7, r1
 80096ea:	f7f9 fe9d 	bl	8003428 <__aeabi_d2iz>
 80096ee:	2200      	movs	r2, #0
 80096f0:	4682      	mov	sl, r0
 80096f2:	2300      	movs	r3, #0
 80096f4:	4630      	mov	r0, r6
 80096f6:	4639      	mov	r1, r7
 80096f8:	f7f9 fe58 	bl	80033ac <__aeabi_dcmplt>
 80096fc:	b148      	cbz	r0, 8009712 <_dtoa_r+0x162>
 80096fe:	4650      	mov	r0, sl
 8009700:	f7f9 fb78 	bl	8002df4 <__aeabi_i2d>
 8009704:	4632      	mov	r2, r6
 8009706:	463b      	mov	r3, r7
 8009708:	f7f9 fe46 	bl	8003398 <__aeabi_dcmpeq>
 800970c:	b908      	cbnz	r0, 8009712 <_dtoa_r+0x162>
 800970e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009712:	f1ba 0f16 	cmp.w	sl, #22
 8009716:	d859      	bhi.n	80097cc <_dtoa_r+0x21c>
 8009718:	4970      	ldr	r1, [pc, #448]	; (80098dc <_dtoa_r+0x32c>)
 800971a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800971e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009726:	f7f9 fe5f 	bl	80033e8 <__aeabi_dcmpgt>
 800972a:	2800      	cmp	r0, #0
 800972c:	d050      	beq.n	80097d0 <_dtoa_r+0x220>
 800972e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009732:	2300      	movs	r3, #0
 8009734:	930f      	str	r3, [sp, #60]	; 0x3c
 8009736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009738:	1b5d      	subs	r5, r3, r5
 800973a:	f1b5 0801 	subs.w	r8, r5, #1
 800973e:	bf49      	itett	mi
 8009740:	f1c5 0301 	rsbmi	r3, r5, #1
 8009744:	2300      	movpl	r3, #0
 8009746:	9305      	strmi	r3, [sp, #20]
 8009748:	f04f 0800 	movmi.w	r8, #0
 800974c:	bf58      	it	pl
 800974e:	9305      	strpl	r3, [sp, #20]
 8009750:	f1ba 0f00 	cmp.w	sl, #0
 8009754:	db3e      	blt.n	80097d4 <_dtoa_r+0x224>
 8009756:	2300      	movs	r3, #0
 8009758:	44d0      	add	r8, sl
 800975a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800975e:	9307      	str	r3, [sp, #28]
 8009760:	9b06      	ldr	r3, [sp, #24]
 8009762:	2b09      	cmp	r3, #9
 8009764:	f200 8090 	bhi.w	8009888 <_dtoa_r+0x2d8>
 8009768:	2b05      	cmp	r3, #5
 800976a:	bfc4      	itt	gt
 800976c:	3b04      	subgt	r3, #4
 800976e:	9306      	strgt	r3, [sp, #24]
 8009770:	9b06      	ldr	r3, [sp, #24]
 8009772:	f1a3 0302 	sub.w	r3, r3, #2
 8009776:	bfcc      	ite	gt
 8009778:	2500      	movgt	r5, #0
 800977a:	2501      	movle	r5, #1
 800977c:	2b03      	cmp	r3, #3
 800977e:	f200 808f 	bhi.w	80098a0 <_dtoa_r+0x2f0>
 8009782:	e8df f003 	tbb	[pc, r3]
 8009786:	7f7d      	.short	0x7f7d
 8009788:	7131      	.short	0x7131
 800978a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800978e:	441d      	add	r5, r3
 8009790:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009794:	2820      	cmp	r0, #32
 8009796:	dd13      	ble.n	80097c0 <_dtoa_r+0x210>
 8009798:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800979c:	9b00      	ldr	r3, [sp, #0]
 800979e:	fa08 f800 	lsl.w	r8, r8, r0
 80097a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80097a6:	fa23 f000 	lsr.w	r0, r3, r0
 80097aa:	ea48 0000 	orr.w	r0, r8, r0
 80097ae:	f7f9 fb11 	bl	8002dd4 <__aeabi_ui2d>
 80097b2:	2301      	movs	r3, #1
 80097b4:	4682      	mov	sl, r0
 80097b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80097ba:	3d01      	subs	r5, #1
 80097bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80097be:	e772      	b.n	80096a6 <_dtoa_r+0xf6>
 80097c0:	9b00      	ldr	r3, [sp, #0]
 80097c2:	f1c0 0020 	rsb	r0, r0, #32
 80097c6:	fa03 f000 	lsl.w	r0, r3, r0
 80097ca:	e7f0      	b.n	80097ae <_dtoa_r+0x1fe>
 80097cc:	2301      	movs	r3, #1
 80097ce:	e7b1      	b.n	8009734 <_dtoa_r+0x184>
 80097d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80097d2:	e7b0      	b.n	8009736 <_dtoa_r+0x186>
 80097d4:	9b05      	ldr	r3, [sp, #20]
 80097d6:	eba3 030a 	sub.w	r3, r3, sl
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	f1ca 0300 	rsb	r3, sl, #0
 80097e0:	9307      	str	r3, [sp, #28]
 80097e2:	2300      	movs	r3, #0
 80097e4:	930e      	str	r3, [sp, #56]	; 0x38
 80097e6:	e7bb      	b.n	8009760 <_dtoa_r+0x1b0>
 80097e8:	2301      	movs	r3, #1
 80097ea:	930a      	str	r3, [sp, #40]	; 0x28
 80097ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dd59      	ble.n	80098a6 <_dtoa_r+0x2f6>
 80097f2:	9302      	str	r3, [sp, #8]
 80097f4:	4699      	mov	r9, r3
 80097f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097f8:	2200      	movs	r2, #0
 80097fa:	6072      	str	r2, [r6, #4]
 80097fc:	2204      	movs	r2, #4
 80097fe:	f102 0014 	add.w	r0, r2, #20
 8009802:	4298      	cmp	r0, r3
 8009804:	6871      	ldr	r1, [r6, #4]
 8009806:	d953      	bls.n	80098b0 <_dtoa_r+0x300>
 8009808:	4620      	mov	r0, r4
 800980a:	f000 fe77 	bl	800a4fc <_Balloc>
 800980e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009810:	6030      	str	r0, [r6, #0]
 8009812:	f1b9 0f0e 	cmp.w	r9, #14
 8009816:	f8d3 b000 	ldr.w	fp, [r3]
 800981a:	f200 80e6 	bhi.w	80099ea <_dtoa_r+0x43a>
 800981e:	2d00      	cmp	r5, #0
 8009820:	f000 80e3 	beq.w	80099ea <_dtoa_r+0x43a>
 8009824:	ed9d 7b00 	vldr	d7, [sp]
 8009828:	f1ba 0f00 	cmp.w	sl, #0
 800982c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009830:	dd74      	ble.n	800991c <_dtoa_r+0x36c>
 8009832:	4a2a      	ldr	r2, [pc, #168]	; (80098dc <_dtoa_r+0x32c>)
 8009834:	f00a 030f 	and.w	r3, sl, #15
 8009838:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800983c:	ed93 7b00 	vldr	d7, [r3]
 8009840:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009844:	06f0      	lsls	r0, r6, #27
 8009846:	ed8d 7b08 	vstr	d7, [sp, #32]
 800984a:	d565      	bpl.n	8009918 <_dtoa_r+0x368>
 800984c:	4b24      	ldr	r3, [pc, #144]	; (80098e0 <_dtoa_r+0x330>)
 800984e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009852:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009856:	f7f9 fc61 	bl	800311c <__aeabi_ddiv>
 800985a:	e9cd 0100 	strd	r0, r1, [sp]
 800985e:	f006 060f 	and.w	r6, r6, #15
 8009862:	2503      	movs	r5, #3
 8009864:	4f1e      	ldr	r7, [pc, #120]	; (80098e0 <_dtoa_r+0x330>)
 8009866:	e04c      	b.n	8009902 <_dtoa_r+0x352>
 8009868:	2301      	movs	r3, #1
 800986a:	930a      	str	r3, [sp, #40]	; 0x28
 800986c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800986e:	4453      	add	r3, sl
 8009870:	f103 0901 	add.w	r9, r3, #1
 8009874:	9302      	str	r3, [sp, #8]
 8009876:	464b      	mov	r3, r9
 8009878:	2b01      	cmp	r3, #1
 800987a:	bfb8      	it	lt
 800987c:	2301      	movlt	r3, #1
 800987e:	e7ba      	b.n	80097f6 <_dtoa_r+0x246>
 8009880:	2300      	movs	r3, #0
 8009882:	e7b2      	b.n	80097ea <_dtoa_r+0x23a>
 8009884:	2300      	movs	r3, #0
 8009886:	e7f0      	b.n	800986a <_dtoa_r+0x2ba>
 8009888:	2501      	movs	r5, #1
 800988a:	2300      	movs	r3, #0
 800988c:	9306      	str	r3, [sp, #24]
 800988e:	950a      	str	r5, [sp, #40]	; 0x28
 8009890:	f04f 33ff 	mov.w	r3, #4294967295
 8009894:	9302      	str	r3, [sp, #8]
 8009896:	4699      	mov	r9, r3
 8009898:	2200      	movs	r2, #0
 800989a:	2312      	movs	r3, #18
 800989c:	920b      	str	r2, [sp, #44]	; 0x2c
 800989e:	e7aa      	b.n	80097f6 <_dtoa_r+0x246>
 80098a0:	2301      	movs	r3, #1
 80098a2:	930a      	str	r3, [sp, #40]	; 0x28
 80098a4:	e7f4      	b.n	8009890 <_dtoa_r+0x2e0>
 80098a6:	2301      	movs	r3, #1
 80098a8:	9302      	str	r3, [sp, #8]
 80098aa:	4699      	mov	r9, r3
 80098ac:	461a      	mov	r2, r3
 80098ae:	e7f5      	b.n	800989c <_dtoa_r+0x2ec>
 80098b0:	3101      	adds	r1, #1
 80098b2:	6071      	str	r1, [r6, #4]
 80098b4:	0052      	lsls	r2, r2, #1
 80098b6:	e7a2      	b.n	80097fe <_dtoa_r+0x24e>
 80098b8:	636f4361 	.word	0x636f4361
 80098bc:	3fd287a7 	.word	0x3fd287a7
 80098c0:	8b60c8b3 	.word	0x8b60c8b3
 80098c4:	3fc68a28 	.word	0x3fc68a28
 80098c8:	509f79fb 	.word	0x509f79fb
 80098cc:	3fd34413 	.word	0x3fd34413
 80098d0:	7ff00000 	.word	0x7ff00000
 80098d4:	08012df1 	.word	0x08012df1
 80098d8:	3ff80000 	.word	0x3ff80000
 80098dc:	08012eb0 	.word	0x08012eb0
 80098e0:	08012e88 	.word	0x08012e88
 80098e4:	08012e1d 	.word	0x08012e1d
 80098e8:	07f1      	lsls	r1, r6, #31
 80098ea:	d508      	bpl.n	80098fe <_dtoa_r+0x34e>
 80098ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098f4:	f7f9 fae8 	bl	8002ec8 <__aeabi_dmul>
 80098f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80098fc:	3501      	adds	r5, #1
 80098fe:	1076      	asrs	r6, r6, #1
 8009900:	3708      	adds	r7, #8
 8009902:	2e00      	cmp	r6, #0
 8009904:	d1f0      	bne.n	80098e8 <_dtoa_r+0x338>
 8009906:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800990a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800990e:	f7f9 fc05 	bl	800311c <__aeabi_ddiv>
 8009912:	e9cd 0100 	strd	r0, r1, [sp]
 8009916:	e01a      	b.n	800994e <_dtoa_r+0x39e>
 8009918:	2502      	movs	r5, #2
 800991a:	e7a3      	b.n	8009864 <_dtoa_r+0x2b4>
 800991c:	f000 80a0 	beq.w	8009a60 <_dtoa_r+0x4b0>
 8009920:	f1ca 0600 	rsb	r6, sl, #0
 8009924:	4b9f      	ldr	r3, [pc, #636]	; (8009ba4 <_dtoa_r+0x5f4>)
 8009926:	4fa0      	ldr	r7, [pc, #640]	; (8009ba8 <_dtoa_r+0x5f8>)
 8009928:	f006 020f 	and.w	r2, r6, #15
 800992c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009938:	f7f9 fac6 	bl	8002ec8 <__aeabi_dmul>
 800993c:	e9cd 0100 	strd	r0, r1, [sp]
 8009940:	1136      	asrs	r6, r6, #4
 8009942:	2300      	movs	r3, #0
 8009944:	2502      	movs	r5, #2
 8009946:	2e00      	cmp	r6, #0
 8009948:	d17f      	bne.n	8009a4a <_dtoa_r+0x49a>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e1      	bne.n	8009912 <_dtoa_r+0x362>
 800994e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 8087 	beq.w	8009a64 <_dtoa_r+0x4b4>
 8009956:	e9dd 6700 	ldrd	r6, r7, [sp]
 800995a:	2200      	movs	r2, #0
 800995c:	4b93      	ldr	r3, [pc, #588]	; (8009bac <_dtoa_r+0x5fc>)
 800995e:	4630      	mov	r0, r6
 8009960:	4639      	mov	r1, r7
 8009962:	f7f9 fd23 	bl	80033ac <__aeabi_dcmplt>
 8009966:	2800      	cmp	r0, #0
 8009968:	d07c      	beq.n	8009a64 <_dtoa_r+0x4b4>
 800996a:	f1b9 0f00 	cmp.w	r9, #0
 800996e:	d079      	beq.n	8009a64 <_dtoa_r+0x4b4>
 8009970:	9b02      	ldr	r3, [sp, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	dd35      	ble.n	80099e2 <_dtoa_r+0x432>
 8009976:	f10a 33ff 	add.w	r3, sl, #4294967295
 800997a:	9308      	str	r3, [sp, #32]
 800997c:	4639      	mov	r1, r7
 800997e:	2200      	movs	r2, #0
 8009980:	4b8b      	ldr	r3, [pc, #556]	; (8009bb0 <_dtoa_r+0x600>)
 8009982:	4630      	mov	r0, r6
 8009984:	f7f9 faa0 	bl	8002ec8 <__aeabi_dmul>
 8009988:	e9cd 0100 	strd	r0, r1, [sp]
 800998c:	9f02      	ldr	r7, [sp, #8]
 800998e:	3501      	adds	r5, #1
 8009990:	4628      	mov	r0, r5
 8009992:	f7f9 fa2f 	bl	8002df4 <__aeabi_i2d>
 8009996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800999a:	f7f9 fa95 	bl	8002ec8 <__aeabi_dmul>
 800999e:	2200      	movs	r2, #0
 80099a0:	4b84      	ldr	r3, [pc, #528]	; (8009bb4 <_dtoa_r+0x604>)
 80099a2:	f7f9 f8db 	bl	8002b5c <__adddf3>
 80099a6:	4605      	mov	r5, r0
 80099a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80099ac:	2f00      	cmp	r7, #0
 80099ae:	d15d      	bne.n	8009a6c <_dtoa_r+0x4bc>
 80099b0:	2200      	movs	r2, #0
 80099b2:	4b81      	ldr	r3, [pc, #516]	; (8009bb8 <_dtoa_r+0x608>)
 80099b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099b8:	f7f9 f8ce 	bl	8002b58 <__aeabi_dsub>
 80099bc:	462a      	mov	r2, r5
 80099be:	4633      	mov	r3, r6
 80099c0:	e9cd 0100 	strd	r0, r1, [sp]
 80099c4:	f7f9 fd10 	bl	80033e8 <__aeabi_dcmpgt>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f040 8288 	bne.w	8009ede <_dtoa_r+0x92e>
 80099ce:	462a      	mov	r2, r5
 80099d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80099d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099d8:	f7f9 fce8 	bl	80033ac <__aeabi_dcmplt>
 80099dc:	2800      	cmp	r0, #0
 80099de:	f040 827c 	bne.w	8009eda <_dtoa_r+0x92a>
 80099e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099e6:	e9cd 2300 	strd	r2, r3, [sp]
 80099ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f2c0 8150 	blt.w	8009c92 <_dtoa_r+0x6e2>
 80099f2:	f1ba 0f0e 	cmp.w	sl, #14
 80099f6:	f300 814c 	bgt.w	8009c92 <_dtoa_r+0x6e2>
 80099fa:	4b6a      	ldr	r3, [pc, #424]	; (8009ba4 <_dtoa_r+0x5f4>)
 80099fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a00:	ed93 7b00 	vldr	d7, [r3]
 8009a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a0c:	f280 80d8 	bge.w	8009bc0 <_dtoa_r+0x610>
 8009a10:	f1b9 0f00 	cmp.w	r9, #0
 8009a14:	f300 80d4 	bgt.w	8009bc0 <_dtoa_r+0x610>
 8009a18:	f040 825e 	bne.w	8009ed8 <_dtoa_r+0x928>
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	4b66      	ldr	r3, [pc, #408]	; (8009bb8 <_dtoa_r+0x608>)
 8009a20:	ec51 0b17 	vmov	r0, r1, d7
 8009a24:	f7f9 fa50 	bl	8002ec8 <__aeabi_dmul>
 8009a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a2c:	f7f9 fcd2 	bl	80033d4 <__aeabi_dcmpge>
 8009a30:	464f      	mov	r7, r9
 8009a32:	464e      	mov	r6, r9
 8009a34:	2800      	cmp	r0, #0
 8009a36:	f040 8234 	bne.w	8009ea2 <_dtoa_r+0x8f2>
 8009a3a:	2331      	movs	r3, #49	; 0x31
 8009a3c:	f10b 0501 	add.w	r5, fp, #1
 8009a40:	f88b 3000 	strb.w	r3, [fp]
 8009a44:	f10a 0a01 	add.w	sl, sl, #1
 8009a48:	e22f      	b.n	8009eaa <_dtoa_r+0x8fa>
 8009a4a:	07f2      	lsls	r2, r6, #31
 8009a4c:	d505      	bpl.n	8009a5a <_dtoa_r+0x4aa>
 8009a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a52:	f7f9 fa39 	bl	8002ec8 <__aeabi_dmul>
 8009a56:	3501      	adds	r5, #1
 8009a58:	2301      	movs	r3, #1
 8009a5a:	1076      	asrs	r6, r6, #1
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	e772      	b.n	8009946 <_dtoa_r+0x396>
 8009a60:	2502      	movs	r5, #2
 8009a62:	e774      	b.n	800994e <_dtoa_r+0x39e>
 8009a64:	f8cd a020 	str.w	sl, [sp, #32]
 8009a68:	464f      	mov	r7, r9
 8009a6a:	e791      	b.n	8009990 <_dtoa_r+0x3e0>
 8009a6c:	4b4d      	ldr	r3, [pc, #308]	; (8009ba4 <_dtoa_r+0x5f4>)
 8009a6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d047      	beq.n	8009b0c <_dtoa_r+0x55c>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	2000      	movs	r0, #0
 8009a82:	494e      	ldr	r1, [pc, #312]	; (8009bbc <_dtoa_r+0x60c>)
 8009a84:	f7f9 fb4a 	bl	800311c <__aeabi_ddiv>
 8009a88:	462a      	mov	r2, r5
 8009a8a:	4633      	mov	r3, r6
 8009a8c:	f7f9 f864 	bl	8002b58 <__aeabi_dsub>
 8009a90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009a94:	465d      	mov	r5, fp
 8009a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a9a:	f7f9 fcc5 	bl	8003428 <__aeabi_d2iz>
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	f7f9 f9a8 	bl	8002df4 <__aeabi_i2d>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aac:	f7f9 f854 	bl	8002b58 <__aeabi_dsub>
 8009ab0:	3630      	adds	r6, #48	; 0x30
 8009ab2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ab6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009aba:	e9cd 0100 	strd	r0, r1, [sp]
 8009abe:	f7f9 fc75 	bl	80033ac <__aeabi_dcmplt>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d163      	bne.n	8009b8e <_dtoa_r+0x5de>
 8009ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aca:	2000      	movs	r0, #0
 8009acc:	4937      	ldr	r1, [pc, #220]	; (8009bac <_dtoa_r+0x5fc>)
 8009ace:	f7f9 f843 	bl	8002b58 <__aeabi_dsub>
 8009ad2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009ad6:	f7f9 fc69 	bl	80033ac <__aeabi_dcmplt>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f040 80b7 	bne.w	8009c4e <_dtoa_r+0x69e>
 8009ae0:	eba5 030b 	sub.w	r3, r5, fp
 8009ae4:	429f      	cmp	r7, r3
 8009ae6:	f77f af7c 	ble.w	80099e2 <_dtoa_r+0x432>
 8009aea:	2200      	movs	r2, #0
 8009aec:	4b30      	ldr	r3, [pc, #192]	; (8009bb0 <_dtoa_r+0x600>)
 8009aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009af2:	f7f9 f9e9 	bl	8002ec8 <__aeabi_dmul>
 8009af6:	2200      	movs	r2, #0
 8009af8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009afc:	4b2c      	ldr	r3, [pc, #176]	; (8009bb0 <_dtoa_r+0x600>)
 8009afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b02:	f7f9 f9e1 	bl	8002ec8 <__aeabi_dmul>
 8009b06:	e9cd 0100 	strd	r0, r1, [sp]
 8009b0a:	e7c4      	b.n	8009a96 <_dtoa_r+0x4e6>
 8009b0c:	462a      	mov	r2, r5
 8009b0e:	4633      	mov	r3, r6
 8009b10:	f7f9 f9da 	bl	8002ec8 <__aeabi_dmul>
 8009b14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009b18:	eb0b 0507 	add.w	r5, fp, r7
 8009b1c:	465e      	mov	r6, fp
 8009b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b22:	f7f9 fc81 	bl	8003428 <__aeabi_d2iz>
 8009b26:	4607      	mov	r7, r0
 8009b28:	f7f9 f964 	bl	8002df4 <__aeabi_i2d>
 8009b2c:	3730      	adds	r7, #48	; 0x30
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b36:	f7f9 f80f 	bl	8002b58 <__aeabi_dsub>
 8009b3a:	f806 7b01 	strb.w	r7, [r6], #1
 8009b3e:	42ae      	cmp	r6, r5
 8009b40:	e9cd 0100 	strd	r0, r1, [sp]
 8009b44:	f04f 0200 	mov.w	r2, #0
 8009b48:	d126      	bne.n	8009b98 <_dtoa_r+0x5e8>
 8009b4a:	4b1c      	ldr	r3, [pc, #112]	; (8009bbc <_dtoa_r+0x60c>)
 8009b4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b50:	f7f9 f804 	bl	8002b5c <__adddf3>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b5c:	f7f9 fc44 	bl	80033e8 <__aeabi_dcmpgt>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d174      	bne.n	8009c4e <_dtoa_r+0x69e>
 8009b64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b68:	2000      	movs	r0, #0
 8009b6a:	4914      	ldr	r1, [pc, #80]	; (8009bbc <_dtoa_r+0x60c>)
 8009b6c:	f7f8 fff4 	bl	8002b58 <__aeabi_dsub>
 8009b70:	4602      	mov	r2, r0
 8009b72:	460b      	mov	r3, r1
 8009b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b78:	f7f9 fc18 	bl	80033ac <__aeabi_dcmplt>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f43f af30 	beq.w	80099e2 <_dtoa_r+0x432>
 8009b82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b86:	2b30      	cmp	r3, #48	; 0x30
 8009b88:	f105 32ff 	add.w	r2, r5, #4294967295
 8009b8c:	d002      	beq.n	8009b94 <_dtoa_r+0x5e4>
 8009b8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009b92:	e04a      	b.n	8009c2a <_dtoa_r+0x67a>
 8009b94:	4615      	mov	r5, r2
 8009b96:	e7f4      	b.n	8009b82 <_dtoa_r+0x5d2>
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <_dtoa_r+0x600>)
 8009b9a:	f7f9 f995 	bl	8002ec8 <__aeabi_dmul>
 8009b9e:	e9cd 0100 	strd	r0, r1, [sp]
 8009ba2:	e7bc      	b.n	8009b1e <_dtoa_r+0x56e>
 8009ba4:	08012eb0 	.word	0x08012eb0
 8009ba8:	08012e88 	.word	0x08012e88
 8009bac:	3ff00000 	.word	0x3ff00000
 8009bb0:	40240000 	.word	0x40240000
 8009bb4:	401c0000 	.word	0x401c0000
 8009bb8:	40140000 	.word	0x40140000
 8009bbc:	3fe00000 	.word	0x3fe00000
 8009bc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bc4:	465d      	mov	r5, fp
 8009bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bca:	4630      	mov	r0, r6
 8009bcc:	4639      	mov	r1, r7
 8009bce:	f7f9 faa5 	bl	800311c <__aeabi_ddiv>
 8009bd2:	f7f9 fc29 	bl	8003428 <__aeabi_d2iz>
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	f7f9 f90c 	bl	8002df4 <__aeabi_i2d>
 8009bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009be0:	f7f9 f972 	bl	8002ec8 <__aeabi_dmul>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009bf0:	f7f8 ffb2 	bl	8002b58 <__aeabi_dsub>
 8009bf4:	f805 6b01 	strb.w	r6, [r5], #1
 8009bf8:	eba5 060b 	sub.w	r6, r5, fp
 8009bfc:	45b1      	cmp	r9, r6
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	d139      	bne.n	8009c78 <_dtoa_r+0x6c8>
 8009c04:	f7f8 ffaa 	bl	8002b5c <__adddf3>
 8009c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	460f      	mov	r7, r1
 8009c10:	f7f9 fbea 	bl	80033e8 <__aeabi_dcmpgt>
 8009c14:	b9c8      	cbnz	r0, 8009c4a <_dtoa_r+0x69a>
 8009c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	f7f9 fbbb 	bl	8003398 <__aeabi_dcmpeq>
 8009c22:	b110      	cbz	r0, 8009c2a <_dtoa_r+0x67a>
 8009c24:	f018 0f01 	tst.w	r8, #1
 8009c28:	d10f      	bne.n	8009c4a <_dtoa_r+0x69a>
 8009c2a:	9904      	ldr	r1, [sp, #16]
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 fc99 	bl	800a564 <_Bfree>
 8009c32:	2300      	movs	r3, #0
 8009c34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c36:	702b      	strb	r3, [r5, #0]
 8009c38:	f10a 0301 	add.w	r3, sl, #1
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 8241 	beq.w	800a0c8 <_dtoa_r+0xb18>
 8009c46:	601d      	str	r5, [r3, #0]
 8009c48:	e23e      	b.n	800a0c8 <_dtoa_r+0xb18>
 8009c4a:	f8cd a020 	str.w	sl, [sp, #32]
 8009c4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c52:	2a39      	cmp	r2, #57	; 0x39
 8009c54:	f105 33ff 	add.w	r3, r5, #4294967295
 8009c58:	d108      	bne.n	8009c6c <_dtoa_r+0x6bc>
 8009c5a:	459b      	cmp	fp, r3
 8009c5c:	d10a      	bne.n	8009c74 <_dtoa_r+0x6c4>
 8009c5e:	9b08      	ldr	r3, [sp, #32]
 8009c60:	3301      	adds	r3, #1
 8009c62:	9308      	str	r3, [sp, #32]
 8009c64:	2330      	movs	r3, #48	; 0x30
 8009c66:	f88b 3000 	strb.w	r3, [fp]
 8009c6a:	465b      	mov	r3, fp
 8009c6c:	781a      	ldrb	r2, [r3, #0]
 8009c6e:	3201      	adds	r2, #1
 8009c70:	701a      	strb	r2, [r3, #0]
 8009c72:	e78c      	b.n	8009b8e <_dtoa_r+0x5de>
 8009c74:	461d      	mov	r5, r3
 8009c76:	e7ea      	b.n	8009c4e <_dtoa_r+0x69e>
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4b9b      	ldr	r3, [pc, #620]	; (8009ee8 <_dtoa_r+0x938>)
 8009c7c:	f7f9 f924 	bl	8002ec8 <__aeabi_dmul>
 8009c80:	2200      	movs	r2, #0
 8009c82:	2300      	movs	r3, #0
 8009c84:	4606      	mov	r6, r0
 8009c86:	460f      	mov	r7, r1
 8009c88:	f7f9 fb86 	bl	8003398 <__aeabi_dcmpeq>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d09a      	beq.n	8009bc6 <_dtoa_r+0x616>
 8009c90:	e7cb      	b.n	8009c2a <_dtoa_r+0x67a>
 8009c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c94:	2a00      	cmp	r2, #0
 8009c96:	f000 808b 	beq.w	8009db0 <_dtoa_r+0x800>
 8009c9a:	9a06      	ldr	r2, [sp, #24]
 8009c9c:	2a01      	cmp	r2, #1
 8009c9e:	dc6e      	bgt.n	8009d7e <_dtoa_r+0x7ce>
 8009ca0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	d067      	beq.n	8009d76 <_dtoa_r+0x7c6>
 8009ca6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009caa:	9f07      	ldr	r7, [sp, #28]
 8009cac:	9d05      	ldr	r5, [sp, #20]
 8009cae:	9a05      	ldr	r2, [sp, #20]
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	441a      	add	r2, r3
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	9205      	str	r2, [sp, #20]
 8009cb8:	4498      	add	r8, r3
 8009cba:	f000 fcf3 	bl	800a6a4 <__i2b>
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	2d00      	cmp	r5, #0
 8009cc2:	dd0c      	ble.n	8009cde <_dtoa_r+0x72e>
 8009cc4:	f1b8 0f00 	cmp.w	r8, #0
 8009cc8:	dd09      	ble.n	8009cde <_dtoa_r+0x72e>
 8009cca:	4545      	cmp	r5, r8
 8009ccc:	9a05      	ldr	r2, [sp, #20]
 8009cce:	462b      	mov	r3, r5
 8009cd0:	bfa8      	it	ge
 8009cd2:	4643      	movge	r3, r8
 8009cd4:	1ad2      	subs	r2, r2, r3
 8009cd6:	9205      	str	r2, [sp, #20]
 8009cd8:	1aed      	subs	r5, r5, r3
 8009cda:	eba8 0803 	sub.w	r8, r8, r3
 8009cde:	9b07      	ldr	r3, [sp, #28]
 8009ce0:	b1eb      	cbz	r3, 8009d1e <_dtoa_r+0x76e>
 8009ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d067      	beq.n	8009db8 <_dtoa_r+0x808>
 8009ce8:	b18f      	cbz	r7, 8009d0e <_dtoa_r+0x75e>
 8009cea:	4631      	mov	r1, r6
 8009cec:	463a      	mov	r2, r7
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fd78 	bl	800a7e4 <__pow5mult>
 8009cf4:	9a04      	ldr	r2, [sp, #16]
 8009cf6:	4601      	mov	r1, r0
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f000 fcdb 	bl	800a6b6 <__multiply>
 8009d00:	9904      	ldr	r1, [sp, #16]
 8009d02:	9008      	str	r0, [sp, #32]
 8009d04:	4620      	mov	r0, r4
 8009d06:	f000 fc2d 	bl	800a564 <_Bfree>
 8009d0a:	9b08      	ldr	r3, [sp, #32]
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	9b07      	ldr	r3, [sp, #28]
 8009d10:	1bda      	subs	r2, r3, r7
 8009d12:	d004      	beq.n	8009d1e <_dtoa_r+0x76e>
 8009d14:	9904      	ldr	r1, [sp, #16]
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 fd64 	bl	800a7e4 <__pow5mult>
 8009d1c:	9004      	str	r0, [sp, #16]
 8009d1e:	2101      	movs	r1, #1
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fcbf 	bl	800a6a4 <__i2b>
 8009d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d28:	4607      	mov	r7, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 81d0 	beq.w	800a0d0 <_dtoa_r+0xb20>
 8009d30:	461a      	mov	r2, r3
 8009d32:	4601      	mov	r1, r0
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 fd55 	bl	800a7e4 <__pow5mult>
 8009d3a:	9b06      	ldr	r3, [sp, #24]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	4607      	mov	r7, r0
 8009d40:	dc40      	bgt.n	8009dc4 <_dtoa_r+0x814>
 8009d42:	9b00      	ldr	r3, [sp, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d139      	bne.n	8009dbc <_dtoa_r+0x80c>
 8009d48:	9b01      	ldr	r3, [sp, #4]
 8009d4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d136      	bne.n	8009dc0 <_dtoa_r+0x810>
 8009d52:	9b01      	ldr	r3, [sp, #4]
 8009d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d58:	0d1b      	lsrs	r3, r3, #20
 8009d5a:	051b      	lsls	r3, r3, #20
 8009d5c:	b12b      	cbz	r3, 8009d6a <_dtoa_r+0x7ba>
 8009d5e:	9b05      	ldr	r3, [sp, #20]
 8009d60:	3301      	adds	r3, #1
 8009d62:	9305      	str	r3, [sp, #20]
 8009d64:	f108 0801 	add.w	r8, r8, #1
 8009d68:	2301      	movs	r3, #1
 8009d6a:	9307      	str	r3, [sp, #28]
 8009d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d12a      	bne.n	8009dc8 <_dtoa_r+0x818>
 8009d72:	2001      	movs	r0, #1
 8009d74:	e030      	b.n	8009dd8 <_dtoa_r+0x828>
 8009d76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d7c:	e795      	b.n	8009caa <_dtoa_r+0x6fa>
 8009d7e:	9b07      	ldr	r3, [sp, #28]
 8009d80:	f109 37ff 	add.w	r7, r9, #4294967295
 8009d84:	42bb      	cmp	r3, r7
 8009d86:	bfbf      	itttt	lt
 8009d88:	9b07      	ldrlt	r3, [sp, #28]
 8009d8a:	9707      	strlt	r7, [sp, #28]
 8009d8c:	1afa      	sublt	r2, r7, r3
 8009d8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009d90:	bfbb      	ittet	lt
 8009d92:	189b      	addlt	r3, r3, r2
 8009d94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009d96:	1bdf      	subge	r7, r3, r7
 8009d98:	2700      	movlt	r7, #0
 8009d9a:	f1b9 0f00 	cmp.w	r9, #0
 8009d9e:	bfb5      	itete	lt
 8009da0:	9b05      	ldrlt	r3, [sp, #20]
 8009da2:	9d05      	ldrge	r5, [sp, #20]
 8009da4:	eba3 0509 	sublt.w	r5, r3, r9
 8009da8:	464b      	movge	r3, r9
 8009daa:	bfb8      	it	lt
 8009dac:	2300      	movlt	r3, #0
 8009dae:	e77e      	b.n	8009cae <_dtoa_r+0x6fe>
 8009db0:	9f07      	ldr	r7, [sp, #28]
 8009db2:	9d05      	ldr	r5, [sp, #20]
 8009db4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009db6:	e783      	b.n	8009cc0 <_dtoa_r+0x710>
 8009db8:	9a07      	ldr	r2, [sp, #28]
 8009dba:	e7ab      	b.n	8009d14 <_dtoa_r+0x764>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	e7d4      	b.n	8009d6a <_dtoa_r+0x7ba>
 8009dc0:	9b00      	ldr	r3, [sp, #0]
 8009dc2:	e7d2      	b.n	8009d6a <_dtoa_r+0x7ba>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9307      	str	r3, [sp, #28]
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009dce:	6918      	ldr	r0, [r3, #16]
 8009dd0:	f000 fc1a 	bl	800a608 <__hi0bits>
 8009dd4:	f1c0 0020 	rsb	r0, r0, #32
 8009dd8:	4440      	add	r0, r8
 8009dda:	f010 001f 	ands.w	r0, r0, #31
 8009dde:	d047      	beq.n	8009e70 <_dtoa_r+0x8c0>
 8009de0:	f1c0 0320 	rsb	r3, r0, #32
 8009de4:	2b04      	cmp	r3, #4
 8009de6:	dd3b      	ble.n	8009e60 <_dtoa_r+0x8b0>
 8009de8:	9b05      	ldr	r3, [sp, #20]
 8009dea:	f1c0 001c 	rsb	r0, r0, #28
 8009dee:	4403      	add	r3, r0
 8009df0:	9305      	str	r3, [sp, #20]
 8009df2:	4405      	add	r5, r0
 8009df4:	4480      	add	r8, r0
 8009df6:	9b05      	ldr	r3, [sp, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	dd05      	ble.n	8009e08 <_dtoa_r+0x858>
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	9904      	ldr	r1, [sp, #16]
 8009e00:	4620      	mov	r0, r4
 8009e02:	f000 fd3d 	bl	800a880 <__lshift>
 8009e06:	9004      	str	r0, [sp, #16]
 8009e08:	f1b8 0f00 	cmp.w	r8, #0
 8009e0c:	dd05      	ble.n	8009e1a <_dtoa_r+0x86a>
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4642      	mov	r2, r8
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fd34 	bl	800a880 <__lshift>
 8009e18:	4607      	mov	r7, r0
 8009e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e1c:	b353      	cbz	r3, 8009e74 <_dtoa_r+0x8c4>
 8009e1e:	4639      	mov	r1, r7
 8009e20:	9804      	ldr	r0, [sp, #16]
 8009e22:	f000 fd81 	bl	800a928 <__mcmp>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	da24      	bge.n	8009e74 <_dtoa_r+0x8c4>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	220a      	movs	r2, #10
 8009e2e:	9904      	ldr	r1, [sp, #16]
 8009e30:	4620      	mov	r0, r4
 8009e32:	f000 fbae 	bl	800a592 <__multadd>
 8009e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e38:	9004      	str	r0, [sp, #16]
 8009e3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 814d 	beq.w	800a0de <_dtoa_r+0xb2e>
 8009e44:	2300      	movs	r3, #0
 8009e46:	4631      	mov	r1, r6
 8009e48:	220a      	movs	r2, #10
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 fba1 	bl	800a592 <__multadd>
 8009e50:	9b02      	ldr	r3, [sp, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	4606      	mov	r6, r0
 8009e56:	dc4f      	bgt.n	8009ef8 <_dtoa_r+0x948>
 8009e58:	9b06      	ldr	r3, [sp, #24]
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	dd4c      	ble.n	8009ef8 <_dtoa_r+0x948>
 8009e5e:	e011      	b.n	8009e84 <_dtoa_r+0x8d4>
 8009e60:	d0c9      	beq.n	8009df6 <_dtoa_r+0x846>
 8009e62:	9a05      	ldr	r2, [sp, #20]
 8009e64:	331c      	adds	r3, #28
 8009e66:	441a      	add	r2, r3
 8009e68:	9205      	str	r2, [sp, #20]
 8009e6a:	441d      	add	r5, r3
 8009e6c:	4498      	add	r8, r3
 8009e6e:	e7c2      	b.n	8009df6 <_dtoa_r+0x846>
 8009e70:	4603      	mov	r3, r0
 8009e72:	e7f6      	b.n	8009e62 <_dtoa_r+0x8b2>
 8009e74:	f1b9 0f00 	cmp.w	r9, #0
 8009e78:	dc38      	bgt.n	8009eec <_dtoa_r+0x93c>
 8009e7a:	9b06      	ldr	r3, [sp, #24]
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	dd35      	ble.n	8009eec <_dtoa_r+0x93c>
 8009e80:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e84:	9b02      	ldr	r3, [sp, #8]
 8009e86:	b963      	cbnz	r3, 8009ea2 <_dtoa_r+0x8f2>
 8009e88:	4639      	mov	r1, r7
 8009e8a:	2205      	movs	r2, #5
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f000 fb80 	bl	800a592 <__multadd>
 8009e92:	4601      	mov	r1, r0
 8009e94:	4607      	mov	r7, r0
 8009e96:	9804      	ldr	r0, [sp, #16]
 8009e98:	f000 fd46 	bl	800a928 <__mcmp>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f73f adcc 	bgt.w	8009a3a <_dtoa_r+0x48a>
 8009ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ea4:	465d      	mov	r5, fp
 8009ea6:	ea6f 0a03 	mvn.w	sl, r3
 8009eaa:	f04f 0900 	mov.w	r9, #0
 8009eae:	4639      	mov	r1, r7
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f000 fb57 	bl	800a564 <_Bfree>
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	f43f aeb7 	beq.w	8009c2a <_dtoa_r+0x67a>
 8009ebc:	f1b9 0f00 	cmp.w	r9, #0
 8009ec0:	d005      	beq.n	8009ece <_dtoa_r+0x91e>
 8009ec2:	45b1      	cmp	r9, r6
 8009ec4:	d003      	beq.n	8009ece <_dtoa_r+0x91e>
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f000 fb4b 	bl	800a564 <_Bfree>
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 fb47 	bl	800a564 <_Bfree>
 8009ed6:	e6a8      	b.n	8009c2a <_dtoa_r+0x67a>
 8009ed8:	2700      	movs	r7, #0
 8009eda:	463e      	mov	r6, r7
 8009edc:	e7e1      	b.n	8009ea2 <_dtoa_r+0x8f2>
 8009ede:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009ee2:	463e      	mov	r6, r7
 8009ee4:	e5a9      	b.n	8009a3a <_dtoa_r+0x48a>
 8009ee6:	bf00      	nop
 8009ee8:	40240000 	.word	0x40240000
 8009eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eee:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 80fa 	beq.w	800a0ec <_dtoa_r+0xb3c>
 8009ef8:	2d00      	cmp	r5, #0
 8009efa:	dd05      	ble.n	8009f08 <_dtoa_r+0x958>
 8009efc:	4631      	mov	r1, r6
 8009efe:	462a      	mov	r2, r5
 8009f00:	4620      	mov	r0, r4
 8009f02:	f000 fcbd 	bl	800a880 <__lshift>
 8009f06:	4606      	mov	r6, r0
 8009f08:	9b07      	ldr	r3, [sp, #28]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d04c      	beq.n	8009fa8 <_dtoa_r+0x9f8>
 8009f0e:	6871      	ldr	r1, [r6, #4]
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 faf3 	bl	800a4fc <_Balloc>
 8009f16:	6932      	ldr	r2, [r6, #16]
 8009f18:	3202      	adds	r2, #2
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	0092      	lsls	r2, r2, #2
 8009f1e:	f106 010c 	add.w	r1, r6, #12
 8009f22:	300c      	adds	r0, #12
 8009f24:	f7fe fc18 	bl	8008758 <memcpy>
 8009f28:	2201      	movs	r2, #1
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f000 fca7 	bl	800a880 <__lshift>
 8009f32:	9b00      	ldr	r3, [sp, #0]
 8009f34:	f8cd b014 	str.w	fp, [sp, #20]
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	46b1      	mov	r9, r6
 8009f3e:	9307      	str	r3, [sp, #28]
 8009f40:	4606      	mov	r6, r0
 8009f42:	4639      	mov	r1, r7
 8009f44:	9804      	ldr	r0, [sp, #16]
 8009f46:	f7ff faa5 	bl	8009494 <quorem>
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009f52:	9804      	ldr	r0, [sp, #16]
 8009f54:	f000 fce8 	bl	800a928 <__mcmp>
 8009f58:	4632      	mov	r2, r6
 8009f5a:	9000      	str	r0, [sp, #0]
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 fcfc 	bl	800a95c <__mdiff>
 8009f64:	68c3      	ldr	r3, [r0, #12]
 8009f66:	4602      	mov	r2, r0
 8009f68:	bb03      	cbnz	r3, 8009fac <_dtoa_r+0x9fc>
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	9008      	str	r0, [sp, #32]
 8009f6e:	9804      	ldr	r0, [sp, #16]
 8009f70:	f000 fcda 	bl	800a928 <__mcmp>
 8009f74:	9a08      	ldr	r2, [sp, #32]
 8009f76:	4603      	mov	r3, r0
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	9308      	str	r3, [sp, #32]
 8009f7e:	f000 faf1 	bl	800a564 <_Bfree>
 8009f82:	9b08      	ldr	r3, [sp, #32]
 8009f84:	b9a3      	cbnz	r3, 8009fb0 <_dtoa_r+0xa00>
 8009f86:	9a06      	ldr	r2, [sp, #24]
 8009f88:	b992      	cbnz	r2, 8009fb0 <_dtoa_r+0xa00>
 8009f8a:	9a07      	ldr	r2, [sp, #28]
 8009f8c:	b982      	cbnz	r2, 8009fb0 <_dtoa_r+0xa00>
 8009f8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009f92:	d029      	beq.n	8009fe8 <_dtoa_r+0xa38>
 8009f94:	9b00      	ldr	r3, [sp, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	dd01      	ble.n	8009f9e <_dtoa_r+0x9ee>
 8009f9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009f9e:	9b05      	ldr	r3, [sp, #20]
 8009fa0:	1c5d      	adds	r5, r3, #1
 8009fa2:	f883 8000 	strb.w	r8, [r3]
 8009fa6:	e782      	b.n	8009eae <_dtoa_r+0x8fe>
 8009fa8:	4630      	mov	r0, r6
 8009faa:	e7c2      	b.n	8009f32 <_dtoa_r+0x982>
 8009fac:	2301      	movs	r3, #1
 8009fae:	e7e3      	b.n	8009f78 <_dtoa_r+0x9c8>
 8009fb0:	9a00      	ldr	r2, [sp, #0]
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	db04      	blt.n	8009fc0 <_dtoa_r+0xa10>
 8009fb6:	d125      	bne.n	800a004 <_dtoa_r+0xa54>
 8009fb8:	9a06      	ldr	r2, [sp, #24]
 8009fba:	bb1a      	cbnz	r2, 800a004 <_dtoa_r+0xa54>
 8009fbc:	9a07      	ldr	r2, [sp, #28]
 8009fbe:	bb0a      	cbnz	r2, 800a004 <_dtoa_r+0xa54>
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	ddec      	ble.n	8009f9e <_dtoa_r+0x9ee>
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	9904      	ldr	r1, [sp, #16]
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fc59 	bl	800a880 <__lshift>
 8009fce:	4639      	mov	r1, r7
 8009fd0:	9004      	str	r0, [sp, #16]
 8009fd2:	f000 fca9 	bl	800a928 <__mcmp>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	dc03      	bgt.n	8009fe2 <_dtoa_r+0xa32>
 8009fda:	d1e0      	bne.n	8009f9e <_dtoa_r+0x9ee>
 8009fdc:	f018 0f01 	tst.w	r8, #1
 8009fe0:	d0dd      	beq.n	8009f9e <_dtoa_r+0x9ee>
 8009fe2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009fe6:	d1d8      	bne.n	8009f9a <_dtoa_r+0x9ea>
 8009fe8:	9b05      	ldr	r3, [sp, #20]
 8009fea:	9a05      	ldr	r2, [sp, #20]
 8009fec:	1c5d      	adds	r5, r3, #1
 8009fee:	2339      	movs	r3, #57	; 0x39
 8009ff0:	7013      	strb	r3, [r2, #0]
 8009ff2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ff6:	2b39      	cmp	r3, #57	; 0x39
 8009ff8:	f105 32ff 	add.w	r2, r5, #4294967295
 8009ffc:	d04f      	beq.n	800a09e <_dtoa_r+0xaee>
 8009ffe:	3301      	adds	r3, #1
 800a000:	7013      	strb	r3, [r2, #0]
 800a002:	e754      	b.n	8009eae <_dtoa_r+0x8fe>
 800a004:	9a05      	ldr	r2, [sp, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	f102 0501 	add.w	r5, r2, #1
 800a00c:	dd06      	ble.n	800a01c <_dtoa_r+0xa6c>
 800a00e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a012:	d0e9      	beq.n	8009fe8 <_dtoa_r+0xa38>
 800a014:	f108 0801 	add.w	r8, r8, #1
 800a018:	9b05      	ldr	r3, [sp, #20]
 800a01a:	e7c2      	b.n	8009fa2 <_dtoa_r+0x9f2>
 800a01c:	9a02      	ldr	r2, [sp, #8]
 800a01e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a022:	eba5 030b 	sub.w	r3, r5, fp
 800a026:	4293      	cmp	r3, r2
 800a028:	d021      	beq.n	800a06e <_dtoa_r+0xabe>
 800a02a:	2300      	movs	r3, #0
 800a02c:	220a      	movs	r2, #10
 800a02e:	9904      	ldr	r1, [sp, #16]
 800a030:	4620      	mov	r0, r4
 800a032:	f000 faae 	bl	800a592 <__multadd>
 800a036:	45b1      	cmp	r9, r6
 800a038:	9004      	str	r0, [sp, #16]
 800a03a:	f04f 0300 	mov.w	r3, #0
 800a03e:	f04f 020a 	mov.w	r2, #10
 800a042:	4649      	mov	r1, r9
 800a044:	4620      	mov	r0, r4
 800a046:	d105      	bne.n	800a054 <_dtoa_r+0xaa4>
 800a048:	f000 faa3 	bl	800a592 <__multadd>
 800a04c:	4681      	mov	r9, r0
 800a04e:	4606      	mov	r6, r0
 800a050:	9505      	str	r5, [sp, #20]
 800a052:	e776      	b.n	8009f42 <_dtoa_r+0x992>
 800a054:	f000 fa9d 	bl	800a592 <__multadd>
 800a058:	4631      	mov	r1, r6
 800a05a:	4681      	mov	r9, r0
 800a05c:	2300      	movs	r3, #0
 800a05e:	220a      	movs	r2, #10
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fa96 	bl	800a592 <__multadd>
 800a066:	4606      	mov	r6, r0
 800a068:	e7f2      	b.n	800a050 <_dtoa_r+0xaa0>
 800a06a:	f04f 0900 	mov.w	r9, #0
 800a06e:	2201      	movs	r2, #1
 800a070:	9904      	ldr	r1, [sp, #16]
 800a072:	4620      	mov	r0, r4
 800a074:	f000 fc04 	bl	800a880 <__lshift>
 800a078:	4639      	mov	r1, r7
 800a07a:	9004      	str	r0, [sp, #16]
 800a07c:	f000 fc54 	bl	800a928 <__mcmp>
 800a080:	2800      	cmp	r0, #0
 800a082:	dcb6      	bgt.n	8009ff2 <_dtoa_r+0xa42>
 800a084:	d102      	bne.n	800a08c <_dtoa_r+0xadc>
 800a086:	f018 0f01 	tst.w	r8, #1
 800a08a:	d1b2      	bne.n	8009ff2 <_dtoa_r+0xa42>
 800a08c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a090:	2b30      	cmp	r3, #48	; 0x30
 800a092:	f105 32ff 	add.w	r2, r5, #4294967295
 800a096:	f47f af0a 	bne.w	8009eae <_dtoa_r+0x8fe>
 800a09a:	4615      	mov	r5, r2
 800a09c:	e7f6      	b.n	800a08c <_dtoa_r+0xadc>
 800a09e:	4593      	cmp	fp, r2
 800a0a0:	d105      	bne.n	800a0ae <_dtoa_r+0xafe>
 800a0a2:	2331      	movs	r3, #49	; 0x31
 800a0a4:	f10a 0a01 	add.w	sl, sl, #1
 800a0a8:	f88b 3000 	strb.w	r3, [fp]
 800a0ac:	e6ff      	b.n	8009eae <_dtoa_r+0x8fe>
 800a0ae:	4615      	mov	r5, r2
 800a0b0:	e79f      	b.n	8009ff2 <_dtoa_r+0xa42>
 800a0b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a118 <_dtoa_r+0xb68>
 800a0b6:	e007      	b.n	800a0c8 <_dtoa_r+0xb18>
 800a0b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a11c <_dtoa_r+0xb6c>
 800a0be:	b11b      	cbz	r3, 800a0c8 <_dtoa_r+0xb18>
 800a0c0:	f10b 0308 	add.w	r3, fp, #8
 800a0c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	4658      	mov	r0, fp
 800a0ca:	b017      	add	sp, #92	; 0x5c
 800a0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d0:	9b06      	ldr	r3, [sp, #24]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	f77f ae35 	ble.w	8009d42 <_dtoa_r+0x792>
 800a0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0da:	9307      	str	r3, [sp, #28]
 800a0dc:	e649      	b.n	8009d72 <_dtoa_r+0x7c2>
 800a0de:	9b02      	ldr	r3, [sp, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	dc03      	bgt.n	800a0ec <_dtoa_r+0xb3c>
 800a0e4:	9b06      	ldr	r3, [sp, #24]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	f73f aecc 	bgt.w	8009e84 <_dtoa_r+0x8d4>
 800a0ec:	465d      	mov	r5, fp
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	9804      	ldr	r0, [sp, #16]
 800a0f2:	f7ff f9cf 	bl	8009494 <quorem>
 800a0f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a0fa:	f805 8b01 	strb.w	r8, [r5], #1
 800a0fe:	9a02      	ldr	r2, [sp, #8]
 800a100:	eba5 030b 	sub.w	r3, r5, fp
 800a104:	429a      	cmp	r2, r3
 800a106:	ddb0      	ble.n	800a06a <_dtoa_r+0xaba>
 800a108:	2300      	movs	r3, #0
 800a10a:	220a      	movs	r2, #10
 800a10c:	9904      	ldr	r1, [sp, #16]
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 fa3f 	bl	800a592 <__multadd>
 800a114:	9004      	str	r0, [sp, #16]
 800a116:	e7ea      	b.n	800a0ee <_dtoa_r+0xb3e>
 800a118:	08012df0 	.word	0x08012df0
 800a11c:	08012e14 	.word	0x08012e14

0800a120 <__sflush_r>:
 800a120:	898a      	ldrh	r2, [r1, #12]
 800a122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a126:	4605      	mov	r5, r0
 800a128:	0710      	lsls	r0, r2, #28
 800a12a:	460c      	mov	r4, r1
 800a12c:	d458      	bmi.n	800a1e0 <__sflush_r+0xc0>
 800a12e:	684b      	ldr	r3, [r1, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc05      	bgt.n	800a140 <__sflush_r+0x20>
 800a134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	dc02      	bgt.n	800a140 <__sflush_r+0x20>
 800a13a:	2000      	movs	r0, #0
 800a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a142:	2e00      	cmp	r6, #0
 800a144:	d0f9      	beq.n	800a13a <__sflush_r+0x1a>
 800a146:	2300      	movs	r3, #0
 800a148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a14c:	682f      	ldr	r7, [r5, #0]
 800a14e:	6a21      	ldr	r1, [r4, #32]
 800a150:	602b      	str	r3, [r5, #0]
 800a152:	d032      	beq.n	800a1ba <__sflush_r+0x9a>
 800a154:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	075a      	lsls	r2, r3, #29
 800a15a:	d505      	bpl.n	800a168 <__sflush_r+0x48>
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	1ac0      	subs	r0, r0, r3
 800a160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a162:	b10b      	cbz	r3, 800a168 <__sflush_r+0x48>
 800a164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a166:	1ac0      	subs	r0, r0, r3
 800a168:	2300      	movs	r3, #0
 800a16a:	4602      	mov	r2, r0
 800a16c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a16e:	6a21      	ldr	r1, [r4, #32]
 800a170:	4628      	mov	r0, r5
 800a172:	47b0      	blx	r6
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	d106      	bne.n	800a188 <__sflush_r+0x68>
 800a17a:	6829      	ldr	r1, [r5, #0]
 800a17c:	291d      	cmp	r1, #29
 800a17e:	d848      	bhi.n	800a212 <__sflush_r+0xf2>
 800a180:	4a29      	ldr	r2, [pc, #164]	; (800a228 <__sflush_r+0x108>)
 800a182:	40ca      	lsrs	r2, r1
 800a184:	07d6      	lsls	r6, r2, #31
 800a186:	d544      	bpl.n	800a212 <__sflush_r+0xf2>
 800a188:	2200      	movs	r2, #0
 800a18a:	6062      	str	r2, [r4, #4]
 800a18c:	04d9      	lsls	r1, r3, #19
 800a18e:	6922      	ldr	r2, [r4, #16]
 800a190:	6022      	str	r2, [r4, #0]
 800a192:	d504      	bpl.n	800a19e <__sflush_r+0x7e>
 800a194:	1c42      	adds	r2, r0, #1
 800a196:	d101      	bne.n	800a19c <__sflush_r+0x7c>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b903      	cbnz	r3, 800a19e <__sflush_r+0x7e>
 800a19c:	6560      	str	r0, [r4, #84]	; 0x54
 800a19e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1a0:	602f      	str	r7, [r5, #0]
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	d0c9      	beq.n	800a13a <__sflush_r+0x1a>
 800a1a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	d002      	beq.n	800a1b4 <__sflush_r+0x94>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f7fe fb0c 	bl	80087cc <_free_r>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	6360      	str	r0, [r4, #52]	; 0x34
 800a1b8:	e7c0      	b.n	800a13c <__sflush_r+0x1c>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b0      	blx	r6
 800a1c0:	1c41      	adds	r1, r0, #1
 800a1c2:	d1c8      	bne.n	800a156 <__sflush_r+0x36>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0c5      	beq.n	800a156 <__sflush_r+0x36>
 800a1ca:	2b1d      	cmp	r3, #29
 800a1cc:	d001      	beq.n	800a1d2 <__sflush_r+0xb2>
 800a1ce:	2b16      	cmp	r3, #22
 800a1d0:	d101      	bne.n	800a1d6 <__sflush_r+0xb6>
 800a1d2:	602f      	str	r7, [r5, #0]
 800a1d4:	e7b1      	b.n	800a13a <__sflush_r+0x1a>
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	e7ad      	b.n	800a13c <__sflush_r+0x1c>
 800a1e0:	690f      	ldr	r7, [r1, #16]
 800a1e2:	2f00      	cmp	r7, #0
 800a1e4:	d0a9      	beq.n	800a13a <__sflush_r+0x1a>
 800a1e6:	0793      	lsls	r3, r2, #30
 800a1e8:	680e      	ldr	r6, [r1, #0]
 800a1ea:	bf08      	it	eq
 800a1ec:	694b      	ldreq	r3, [r1, #20]
 800a1ee:	600f      	str	r7, [r1, #0]
 800a1f0:	bf18      	it	ne
 800a1f2:	2300      	movne	r3, #0
 800a1f4:	eba6 0807 	sub.w	r8, r6, r7
 800a1f8:	608b      	str	r3, [r1, #8]
 800a1fa:	f1b8 0f00 	cmp.w	r8, #0
 800a1fe:	dd9c      	ble.n	800a13a <__sflush_r+0x1a>
 800a200:	4643      	mov	r3, r8
 800a202:	463a      	mov	r2, r7
 800a204:	6a21      	ldr	r1, [r4, #32]
 800a206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a208:	4628      	mov	r0, r5
 800a20a:	47b0      	blx	r6
 800a20c:	2800      	cmp	r0, #0
 800a20e:	dc06      	bgt.n	800a21e <__sflush_r+0xfe>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	e78e      	b.n	800a13c <__sflush_r+0x1c>
 800a21e:	4407      	add	r7, r0
 800a220:	eba8 0800 	sub.w	r8, r8, r0
 800a224:	e7e9      	b.n	800a1fa <__sflush_r+0xda>
 800a226:	bf00      	nop
 800a228:	20400001 	.word	0x20400001

0800a22c <_fflush_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	690b      	ldr	r3, [r1, #16]
 800a230:	4605      	mov	r5, r0
 800a232:	460c      	mov	r4, r1
 800a234:	b1db      	cbz	r3, 800a26e <_fflush_r+0x42>
 800a236:	b118      	cbz	r0, 800a240 <_fflush_r+0x14>
 800a238:	6983      	ldr	r3, [r0, #24]
 800a23a:	b90b      	cbnz	r3, 800a240 <_fflush_r+0x14>
 800a23c:	f000 f860 	bl	800a300 <__sinit>
 800a240:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <_fflush_r+0x48>)
 800a242:	429c      	cmp	r4, r3
 800a244:	d109      	bne.n	800a25a <_fflush_r+0x2e>
 800a246:	686c      	ldr	r4, [r5, #4]
 800a248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24c:	b17b      	cbz	r3, 800a26e <_fflush_r+0x42>
 800a24e:	4621      	mov	r1, r4
 800a250:	4628      	mov	r0, r5
 800a252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a256:	f7ff bf63 	b.w	800a120 <__sflush_r>
 800a25a:	4b07      	ldr	r3, [pc, #28]	; (800a278 <_fflush_r+0x4c>)
 800a25c:	429c      	cmp	r4, r3
 800a25e:	d101      	bne.n	800a264 <_fflush_r+0x38>
 800a260:	68ac      	ldr	r4, [r5, #8]
 800a262:	e7f1      	b.n	800a248 <_fflush_r+0x1c>
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <_fflush_r+0x50>)
 800a266:	429c      	cmp	r4, r3
 800a268:	bf08      	it	eq
 800a26a:	68ec      	ldreq	r4, [r5, #12]
 800a26c:	e7ec      	b.n	800a248 <_fflush_r+0x1c>
 800a26e:	2000      	movs	r0, #0
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	bf00      	nop
 800a274:	08012e44 	.word	0x08012e44
 800a278:	08012e64 	.word	0x08012e64
 800a27c:	08012e24 	.word	0x08012e24

0800a280 <std>:
 800a280:	2300      	movs	r3, #0
 800a282:	b510      	push	{r4, lr}
 800a284:	4604      	mov	r4, r0
 800a286:	e9c0 3300 	strd	r3, r3, [r0]
 800a28a:	6083      	str	r3, [r0, #8]
 800a28c:	8181      	strh	r1, [r0, #12]
 800a28e:	6643      	str	r3, [r0, #100]	; 0x64
 800a290:	81c2      	strh	r2, [r0, #14]
 800a292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a296:	6183      	str	r3, [r0, #24]
 800a298:	4619      	mov	r1, r3
 800a29a:	2208      	movs	r2, #8
 800a29c:	305c      	adds	r0, #92	; 0x5c
 800a29e:	f7fe fa7f 	bl	80087a0 <memset>
 800a2a2:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <std+0x38>)
 800a2a4:	6263      	str	r3, [r4, #36]	; 0x24
 800a2a6:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <std+0x3c>)
 800a2a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2aa:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <std+0x40>)
 800a2ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2ae:	4b05      	ldr	r3, [pc, #20]	; (800a2c4 <std+0x44>)
 800a2b0:	6224      	str	r4, [r4, #32]
 800a2b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800ada1 	.word	0x0800ada1
 800a2bc:	0800adc3 	.word	0x0800adc3
 800a2c0:	0800adfb 	.word	0x0800adfb
 800a2c4:	0800ae1f 	.word	0x0800ae1f

0800a2c8 <_cleanup_r>:
 800a2c8:	4901      	ldr	r1, [pc, #4]	; (800a2d0 <_cleanup_r+0x8>)
 800a2ca:	f000 b885 	b.w	800a3d8 <_fwalk_reent>
 800a2ce:	bf00      	nop
 800a2d0:	0800a22d 	.word	0x0800a22d

0800a2d4 <__sfmoreglue>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	1e4a      	subs	r2, r1, #1
 800a2d8:	2568      	movs	r5, #104	; 0x68
 800a2da:	4355      	muls	r5, r2
 800a2dc:	460e      	mov	r6, r1
 800a2de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2e2:	f7fe fac1 	bl	8008868 <_malloc_r>
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	b140      	cbz	r0, 800a2fc <__sfmoreglue+0x28>
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	e9c0 1600 	strd	r1, r6, [r0]
 800a2f0:	300c      	adds	r0, #12
 800a2f2:	60a0      	str	r0, [r4, #8]
 800a2f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2f8:	f7fe fa52 	bl	80087a0 <memset>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}

0800a300 <__sinit>:
 800a300:	6983      	ldr	r3, [r0, #24]
 800a302:	b510      	push	{r4, lr}
 800a304:	4604      	mov	r4, r0
 800a306:	bb33      	cbnz	r3, 800a356 <__sinit+0x56>
 800a308:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a30c:	6503      	str	r3, [r0, #80]	; 0x50
 800a30e:	4b12      	ldr	r3, [pc, #72]	; (800a358 <__sinit+0x58>)
 800a310:	4a12      	ldr	r2, [pc, #72]	; (800a35c <__sinit+0x5c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6282      	str	r2, [r0, #40]	; 0x28
 800a316:	4298      	cmp	r0, r3
 800a318:	bf04      	itt	eq
 800a31a:	2301      	moveq	r3, #1
 800a31c:	6183      	streq	r3, [r0, #24]
 800a31e:	f000 f81f 	bl	800a360 <__sfp>
 800a322:	6060      	str	r0, [r4, #4]
 800a324:	4620      	mov	r0, r4
 800a326:	f000 f81b 	bl	800a360 <__sfp>
 800a32a:	60a0      	str	r0, [r4, #8]
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 f817 	bl	800a360 <__sfp>
 800a332:	2200      	movs	r2, #0
 800a334:	60e0      	str	r0, [r4, #12]
 800a336:	2104      	movs	r1, #4
 800a338:	6860      	ldr	r0, [r4, #4]
 800a33a:	f7ff ffa1 	bl	800a280 <std>
 800a33e:	2201      	movs	r2, #1
 800a340:	2109      	movs	r1, #9
 800a342:	68a0      	ldr	r0, [r4, #8]
 800a344:	f7ff ff9c 	bl	800a280 <std>
 800a348:	2202      	movs	r2, #2
 800a34a:	2112      	movs	r1, #18
 800a34c:	68e0      	ldr	r0, [r4, #12]
 800a34e:	f7ff ff97 	bl	800a280 <std>
 800a352:	2301      	movs	r3, #1
 800a354:	61a3      	str	r3, [r4, #24]
 800a356:	bd10      	pop	{r4, pc}
 800a358:	08012ddc 	.word	0x08012ddc
 800a35c:	0800a2c9 	.word	0x0800a2c9

0800a360 <__sfp>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	4b1b      	ldr	r3, [pc, #108]	; (800a3d0 <__sfp+0x70>)
 800a364:	681e      	ldr	r6, [r3, #0]
 800a366:	69b3      	ldr	r3, [r6, #24]
 800a368:	4607      	mov	r7, r0
 800a36a:	b913      	cbnz	r3, 800a372 <__sfp+0x12>
 800a36c:	4630      	mov	r0, r6
 800a36e:	f7ff ffc7 	bl	800a300 <__sinit>
 800a372:	3648      	adds	r6, #72	; 0x48
 800a374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a378:	3b01      	subs	r3, #1
 800a37a:	d503      	bpl.n	800a384 <__sfp+0x24>
 800a37c:	6833      	ldr	r3, [r6, #0]
 800a37e:	b133      	cbz	r3, 800a38e <__sfp+0x2e>
 800a380:	6836      	ldr	r6, [r6, #0]
 800a382:	e7f7      	b.n	800a374 <__sfp+0x14>
 800a384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a388:	b16d      	cbz	r5, 800a3a6 <__sfp+0x46>
 800a38a:	3468      	adds	r4, #104	; 0x68
 800a38c:	e7f4      	b.n	800a378 <__sfp+0x18>
 800a38e:	2104      	movs	r1, #4
 800a390:	4638      	mov	r0, r7
 800a392:	f7ff ff9f 	bl	800a2d4 <__sfmoreglue>
 800a396:	6030      	str	r0, [r6, #0]
 800a398:	2800      	cmp	r0, #0
 800a39a:	d1f1      	bne.n	800a380 <__sfp+0x20>
 800a39c:	230c      	movs	r3, #12
 800a39e:	603b      	str	r3, [r7, #0]
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <__sfp+0x74>)
 800a3a8:	6665      	str	r5, [r4, #100]	; 0x64
 800a3aa:	e9c4 5500 	strd	r5, r5, [r4]
 800a3ae:	60a5      	str	r5, [r4, #8]
 800a3b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a3b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a3b8:	2208      	movs	r2, #8
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3c0:	f7fe f9ee 	bl	80087a0 <memset>
 800a3c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3cc:	e7e9      	b.n	800a3a2 <__sfp+0x42>
 800a3ce:	bf00      	nop
 800a3d0:	08012ddc 	.word	0x08012ddc
 800a3d4:	ffff0001 	.word	0xffff0001

0800a3d8 <_fwalk_reent>:
 800a3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	4680      	mov	r8, r0
 800a3de:	4689      	mov	r9, r1
 800a3e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3e4:	2600      	movs	r6, #0
 800a3e6:	b914      	cbnz	r4, 800a3ee <_fwalk_reent+0x16>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a3f2:	3f01      	subs	r7, #1
 800a3f4:	d501      	bpl.n	800a3fa <_fwalk_reent+0x22>
 800a3f6:	6824      	ldr	r4, [r4, #0]
 800a3f8:	e7f5      	b.n	800a3e6 <_fwalk_reent+0xe>
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d907      	bls.n	800a410 <_fwalk_reent+0x38>
 800a400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a404:	3301      	adds	r3, #1
 800a406:	d003      	beq.n	800a410 <_fwalk_reent+0x38>
 800a408:	4629      	mov	r1, r5
 800a40a:	4640      	mov	r0, r8
 800a40c:	47c8      	blx	r9
 800a40e:	4306      	orrs	r6, r0
 800a410:	3568      	adds	r5, #104	; 0x68
 800a412:	e7ee      	b.n	800a3f2 <_fwalk_reent+0x1a>

0800a414 <_localeconv_r>:
 800a414:	4b04      	ldr	r3, [pc, #16]	; (800a428 <_localeconv_r+0x14>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6a18      	ldr	r0, [r3, #32]
 800a41a:	4b04      	ldr	r3, [pc, #16]	; (800a42c <_localeconv_r+0x18>)
 800a41c:	2800      	cmp	r0, #0
 800a41e:	bf08      	it	eq
 800a420:	4618      	moveq	r0, r3
 800a422:	30f0      	adds	r0, #240	; 0xf0
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	2000000c 	.word	0x2000000c
 800a42c:	20000070 	.word	0x20000070

0800a430 <__swhatbuf_r>:
 800a430:	b570      	push	{r4, r5, r6, lr}
 800a432:	460e      	mov	r6, r1
 800a434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a438:	2900      	cmp	r1, #0
 800a43a:	b096      	sub	sp, #88	; 0x58
 800a43c:	4614      	mov	r4, r2
 800a43e:	461d      	mov	r5, r3
 800a440:	da07      	bge.n	800a452 <__swhatbuf_r+0x22>
 800a442:	2300      	movs	r3, #0
 800a444:	602b      	str	r3, [r5, #0]
 800a446:	89b3      	ldrh	r3, [r6, #12]
 800a448:	061a      	lsls	r2, r3, #24
 800a44a:	d410      	bmi.n	800a46e <__swhatbuf_r+0x3e>
 800a44c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a450:	e00e      	b.n	800a470 <__swhatbuf_r+0x40>
 800a452:	466a      	mov	r2, sp
 800a454:	f000 fd0a 	bl	800ae6c <_fstat_r>
 800a458:	2800      	cmp	r0, #0
 800a45a:	dbf2      	blt.n	800a442 <__swhatbuf_r+0x12>
 800a45c:	9a01      	ldr	r2, [sp, #4]
 800a45e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a462:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a466:	425a      	negs	r2, r3
 800a468:	415a      	adcs	r2, r3
 800a46a:	602a      	str	r2, [r5, #0]
 800a46c:	e7ee      	b.n	800a44c <__swhatbuf_r+0x1c>
 800a46e:	2340      	movs	r3, #64	; 0x40
 800a470:	2000      	movs	r0, #0
 800a472:	6023      	str	r3, [r4, #0]
 800a474:	b016      	add	sp, #88	; 0x58
 800a476:	bd70      	pop	{r4, r5, r6, pc}

0800a478 <__smakebuf_r>:
 800a478:	898b      	ldrh	r3, [r1, #12]
 800a47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a47c:	079d      	lsls	r5, r3, #30
 800a47e:	4606      	mov	r6, r0
 800a480:	460c      	mov	r4, r1
 800a482:	d507      	bpl.n	800a494 <__smakebuf_r+0x1c>
 800a484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	6123      	str	r3, [r4, #16]
 800a48c:	2301      	movs	r3, #1
 800a48e:	6163      	str	r3, [r4, #20]
 800a490:	b002      	add	sp, #8
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	ab01      	add	r3, sp, #4
 800a496:	466a      	mov	r2, sp
 800a498:	f7ff ffca 	bl	800a430 <__swhatbuf_r>
 800a49c:	9900      	ldr	r1, [sp, #0]
 800a49e:	4605      	mov	r5, r0
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7fe f9e1 	bl	8008868 <_malloc_r>
 800a4a6:	b948      	cbnz	r0, 800a4bc <__smakebuf_r+0x44>
 800a4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ac:	059a      	lsls	r2, r3, #22
 800a4ae:	d4ef      	bmi.n	800a490 <__smakebuf_r+0x18>
 800a4b0:	f023 0303 	bic.w	r3, r3, #3
 800a4b4:	f043 0302 	orr.w	r3, r3, #2
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	e7e3      	b.n	800a484 <__smakebuf_r+0xc>
 800a4bc:	4b0d      	ldr	r3, [pc, #52]	; (800a4f4 <__smakebuf_r+0x7c>)
 800a4be:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	6020      	str	r0, [r4, #0]
 800a4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	9b00      	ldr	r3, [sp, #0]
 800a4cc:	6163      	str	r3, [r4, #20]
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	6120      	str	r0, [r4, #16]
 800a4d2:	b15b      	cbz	r3, 800a4ec <__smakebuf_r+0x74>
 800a4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f000 fcd9 	bl	800ae90 <_isatty_r>
 800a4de:	b128      	cbz	r0, 800a4ec <__smakebuf_r+0x74>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	f043 0301 	orr.w	r3, r3, #1
 800a4ea:	81a3      	strh	r3, [r4, #12]
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	431d      	orrs	r5, r3
 800a4f0:	81a5      	strh	r5, [r4, #12]
 800a4f2:	e7cd      	b.n	800a490 <__smakebuf_r+0x18>
 800a4f4:	0800a2c9 	.word	0x0800a2c9

0800a4f8 <__malloc_lock>:
 800a4f8:	4770      	bx	lr

0800a4fa <__malloc_unlock>:
 800a4fa:	4770      	bx	lr

0800a4fc <_Balloc>:
 800a4fc:	b570      	push	{r4, r5, r6, lr}
 800a4fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a500:	4604      	mov	r4, r0
 800a502:	460e      	mov	r6, r1
 800a504:	b93d      	cbnz	r5, 800a516 <_Balloc+0x1a>
 800a506:	2010      	movs	r0, #16
 800a508:	f7fe f916 	bl	8008738 <malloc>
 800a50c:	6260      	str	r0, [r4, #36]	; 0x24
 800a50e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a512:	6005      	str	r5, [r0, #0]
 800a514:	60c5      	str	r5, [r0, #12]
 800a516:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a518:	68eb      	ldr	r3, [r5, #12]
 800a51a:	b183      	cbz	r3, 800a53e <_Balloc+0x42>
 800a51c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a524:	b9b8      	cbnz	r0, 800a556 <_Balloc+0x5a>
 800a526:	2101      	movs	r1, #1
 800a528:	fa01 f506 	lsl.w	r5, r1, r6
 800a52c:	1d6a      	adds	r2, r5, #5
 800a52e:	0092      	lsls	r2, r2, #2
 800a530:	4620      	mov	r0, r4
 800a532:	f7fe f93d 	bl	80087b0 <_calloc_r>
 800a536:	b160      	cbz	r0, 800a552 <_Balloc+0x56>
 800a538:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a53c:	e00e      	b.n	800a55c <_Balloc+0x60>
 800a53e:	2221      	movs	r2, #33	; 0x21
 800a540:	2104      	movs	r1, #4
 800a542:	4620      	mov	r0, r4
 800a544:	f7fe f934 	bl	80087b0 <_calloc_r>
 800a548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a54a:	60e8      	str	r0, [r5, #12]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1e4      	bne.n	800a51c <_Balloc+0x20>
 800a552:	2000      	movs	r0, #0
 800a554:	bd70      	pop	{r4, r5, r6, pc}
 800a556:	6802      	ldr	r2, [r0, #0]
 800a558:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a55c:	2300      	movs	r3, #0
 800a55e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a562:	e7f7      	b.n	800a554 <_Balloc+0x58>

0800a564 <_Bfree>:
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a568:	4606      	mov	r6, r0
 800a56a:	460d      	mov	r5, r1
 800a56c:	b93c      	cbnz	r4, 800a57e <_Bfree+0x1a>
 800a56e:	2010      	movs	r0, #16
 800a570:	f7fe f8e2 	bl	8008738 <malloc>
 800a574:	6270      	str	r0, [r6, #36]	; 0x24
 800a576:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a57a:	6004      	str	r4, [r0, #0]
 800a57c:	60c4      	str	r4, [r0, #12]
 800a57e:	b13d      	cbz	r5, 800a590 <_Bfree+0x2c>
 800a580:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a582:	686a      	ldr	r2, [r5, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a58a:	6029      	str	r1, [r5, #0]
 800a58c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a590:	bd70      	pop	{r4, r5, r6, pc}

0800a592 <__multadd>:
 800a592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a596:	690d      	ldr	r5, [r1, #16]
 800a598:	461f      	mov	r7, r3
 800a59a:	4606      	mov	r6, r0
 800a59c:	460c      	mov	r4, r1
 800a59e:	f101 0c14 	add.w	ip, r1, #20
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f8dc 0000 	ldr.w	r0, [ip]
 800a5a8:	b281      	uxth	r1, r0
 800a5aa:	fb02 7101 	mla	r1, r2, r1, r7
 800a5ae:	0c0f      	lsrs	r7, r1, #16
 800a5b0:	0c00      	lsrs	r0, r0, #16
 800a5b2:	fb02 7000 	mla	r0, r2, r0, r7
 800a5b6:	b289      	uxth	r1, r1
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a5be:	429d      	cmp	r5, r3
 800a5c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a5c4:	f84c 1b04 	str.w	r1, [ip], #4
 800a5c8:	dcec      	bgt.n	800a5a4 <__multadd+0x12>
 800a5ca:	b1d7      	cbz	r7, 800a602 <__multadd+0x70>
 800a5cc:	68a3      	ldr	r3, [r4, #8]
 800a5ce:	42ab      	cmp	r3, r5
 800a5d0:	dc12      	bgt.n	800a5f8 <__multadd+0x66>
 800a5d2:	6861      	ldr	r1, [r4, #4]
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	3101      	adds	r1, #1
 800a5d8:	f7ff ff90 	bl	800a4fc <_Balloc>
 800a5dc:	6922      	ldr	r2, [r4, #16]
 800a5de:	3202      	adds	r2, #2
 800a5e0:	f104 010c 	add.w	r1, r4, #12
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	0092      	lsls	r2, r2, #2
 800a5e8:	300c      	adds	r0, #12
 800a5ea:	f7fe f8b5 	bl	8008758 <memcpy>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7ff ffb7 	bl	800a564 <_Bfree>
 800a5f6:	4644      	mov	r4, r8
 800a5f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	615f      	str	r7, [r3, #20]
 800a600:	6125      	str	r5, [r4, #16]
 800a602:	4620      	mov	r0, r4
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a608 <__hi0bits>:
 800a608:	0c02      	lsrs	r2, r0, #16
 800a60a:	0412      	lsls	r2, r2, #16
 800a60c:	4603      	mov	r3, r0
 800a60e:	b9b2      	cbnz	r2, 800a63e <__hi0bits+0x36>
 800a610:	0403      	lsls	r3, r0, #16
 800a612:	2010      	movs	r0, #16
 800a614:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a618:	bf04      	itt	eq
 800a61a:	021b      	lsleq	r3, r3, #8
 800a61c:	3008      	addeq	r0, #8
 800a61e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a622:	bf04      	itt	eq
 800a624:	011b      	lsleq	r3, r3, #4
 800a626:	3004      	addeq	r0, #4
 800a628:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a62c:	bf04      	itt	eq
 800a62e:	009b      	lsleq	r3, r3, #2
 800a630:	3002      	addeq	r0, #2
 800a632:	2b00      	cmp	r3, #0
 800a634:	db06      	blt.n	800a644 <__hi0bits+0x3c>
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	d503      	bpl.n	800a642 <__hi0bits+0x3a>
 800a63a:	3001      	adds	r0, #1
 800a63c:	4770      	bx	lr
 800a63e:	2000      	movs	r0, #0
 800a640:	e7e8      	b.n	800a614 <__hi0bits+0xc>
 800a642:	2020      	movs	r0, #32
 800a644:	4770      	bx	lr

0800a646 <__lo0bits>:
 800a646:	6803      	ldr	r3, [r0, #0]
 800a648:	f013 0207 	ands.w	r2, r3, #7
 800a64c:	4601      	mov	r1, r0
 800a64e:	d00b      	beq.n	800a668 <__lo0bits+0x22>
 800a650:	07da      	lsls	r2, r3, #31
 800a652:	d423      	bmi.n	800a69c <__lo0bits+0x56>
 800a654:	0798      	lsls	r0, r3, #30
 800a656:	bf49      	itett	mi
 800a658:	085b      	lsrmi	r3, r3, #1
 800a65a:	089b      	lsrpl	r3, r3, #2
 800a65c:	2001      	movmi	r0, #1
 800a65e:	600b      	strmi	r3, [r1, #0]
 800a660:	bf5c      	itt	pl
 800a662:	600b      	strpl	r3, [r1, #0]
 800a664:	2002      	movpl	r0, #2
 800a666:	4770      	bx	lr
 800a668:	b298      	uxth	r0, r3
 800a66a:	b9a8      	cbnz	r0, 800a698 <__lo0bits+0x52>
 800a66c:	0c1b      	lsrs	r3, r3, #16
 800a66e:	2010      	movs	r0, #16
 800a670:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a674:	bf04      	itt	eq
 800a676:	0a1b      	lsreq	r3, r3, #8
 800a678:	3008      	addeq	r0, #8
 800a67a:	071a      	lsls	r2, r3, #28
 800a67c:	bf04      	itt	eq
 800a67e:	091b      	lsreq	r3, r3, #4
 800a680:	3004      	addeq	r0, #4
 800a682:	079a      	lsls	r2, r3, #30
 800a684:	bf04      	itt	eq
 800a686:	089b      	lsreq	r3, r3, #2
 800a688:	3002      	addeq	r0, #2
 800a68a:	07da      	lsls	r2, r3, #31
 800a68c:	d402      	bmi.n	800a694 <__lo0bits+0x4e>
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	d006      	beq.n	800a6a0 <__lo0bits+0x5a>
 800a692:	3001      	adds	r0, #1
 800a694:	600b      	str	r3, [r1, #0]
 800a696:	4770      	bx	lr
 800a698:	4610      	mov	r0, r2
 800a69a:	e7e9      	b.n	800a670 <__lo0bits+0x2a>
 800a69c:	2000      	movs	r0, #0
 800a69e:	4770      	bx	lr
 800a6a0:	2020      	movs	r0, #32
 800a6a2:	4770      	bx	lr

0800a6a4 <__i2b>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	f7ff ff27 	bl	800a4fc <_Balloc>
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	6144      	str	r4, [r0, #20]
 800a6b2:	6102      	str	r2, [r0, #16]
 800a6b4:	bd10      	pop	{r4, pc}

0800a6b6 <__multiply>:
 800a6b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ba:	4614      	mov	r4, r2
 800a6bc:	690a      	ldr	r2, [r1, #16]
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	bfb8      	it	lt
 800a6c4:	460b      	movlt	r3, r1
 800a6c6:	4688      	mov	r8, r1
 800a6c8:	bfbc      	itt	lt
 800a6ca:	46a0      	movlt	r8, r4
 800a6cc:	461c      	movlt	r4, r3
 800a6ce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a6d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a6d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6de:	eb07 0609 	add.w	r6, r7, r9
 800a6e2:	42b3      	cmp	r3, r6
 800a6e4:	bfb8      	it	lt
 800a6e6:	3101      	addlt	r1, #1
 800a6e8:	f7ff ff08 	bl	800a4fc <_Balloc>
 800a6ec:	f100 0514 	add.w	r5, r0, #20
 800a6f0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a6f4:	462b      	mov	r3, r5
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	4573      	cmp	r3, lr
 800a6fa:	d316      	bcc.n	800a72a <__multiply+0x74>
 800a6fc:	f104 0214 	add.w	r2, r4, #20
 800a700:	f108 0114 	add.w	r1, r8, #20
 800a704:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a708:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	9b00      	ldr	r3, [sp, #0]
 800a710:	9201      	str	r2, [sp, #4]
 800a712:	4293      	cmp	r3, r2
 800a714:	d80c      	bhi.n	800a730 <__multiply+0x7a>
 800a716:	2e00      	cmp	r6, #0
 800a718:	dd03      	ble.n	800a722 <__multiply+0x6c>
 800a71a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d05d      	beq.n	800a7de <__multiply+0x128>
 800a722:	6106      	str	r6, [r0, #16]
 800a724:	b003      	add	sp, #12
 800a726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72a:	f843 2b04 	str.w	r2, [r3], #4
 800a72e:	e7e3      	b.n	800a6f8 <__multiply+0x42>
 800a730:	f8b2 b000 	ldrh.w	fp, [r2]
 800a734:	f1bb 0f00 	cmp.w	fp, #0
 800a738:	d023      	beq.n	800a782 <__multiply+0xcc>
 800a73a:	4689      	mov	r9, r1
 800a73c:	46ac      	mov	ip, r5
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	f859 4b04 	ldr.w	r4, [r9], #4
 800a746:	f8dc a000 	ldr.w	sl, [ip]
 800a74a:	b2a3      	uxth	r3, r4
 800a74c:	fa1f fa8a 	uxth.w	sl, sl
 800a750:	fb0b a303 	mla	r3, fp, r3, sl
 800a754:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a758:	f8dc 4000 	ldr.w	r4, [ip]
 800a75c:	4443      	add	r3, r8
 800a75e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a762:	fb0b 840a 	mla	r4, fp, sl, r8
 800a766:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a76a:	46e2      	mov	sl, ip
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a772:	454f      	cmp	r7, r9
 800a774:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a778:	f84a 3b04 	str.w	r3, [sl], #4
 800a77c:	d82b      	bhi.n	800a7d6 <__multiply+0x120>
 800a77e:	f8cc 8004 	str.w	r8, [ip, #4]
 800a782:	9b01      	ldr	r3, [sp, #4]
 800a784:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a788:	3204      	adds	r2, #4
 800a78a:	f1ba 0f00 	cmp.w	sl, #0
 800a78e:	d020      	beq.n	800a7d2 <__multiply+0x11c>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	4689      	mov	r9, r1
 800a794:	46a8      	mov	r8, r5
 800a796:	f04f 0b00 	mov.w	fp, #0
 800a79a:	f8b9 c000 	ldrh.w	ip, [r9]
 800a79e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a7a2:	fb0a 440c 	mla	r4, sl, ip, r4
 800a7a6:	445c      	add	r4, fp
 800a7a8:	46c4      	mov	ip, r8
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a7b0:	f84c 3b04 	str.w	r3, [ip], #4
 800a7b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7b8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a7bc:	0c1b      	lsrs	r3, r3, #16
 800a7be:	fb0a b303 	mla	r3, sl, r3, fp
 800a7c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a7c6:	454f      	cmp	r7, r9
 800a7c8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a7cc:	d805      	bhi.n	800a7da <__multiply+0x124>
 800a7ce:	f8c8 3004 	str.w	r3, [r8, #4]
 800a7d2:	3504      	adds	r5, #4
 800a7d4:	e79b      	b.n	800a70e <__multiply+0x58>
 800a7d6:	46d4      	mov	ip, sl
 800a7d8:	e7b3      	b.n	800a742 <__multiply+0x8c>
 800a7da:	46e0      	mov	r8, ip
 800a7dc:	e7dd      	b.n	800a79a <__multiply+0xe4>
 800a7de:	3e01      	subs	r6, #1
 800a7e0:	e799      	b.n	800a716 <__multiply+0x60>
	...

0800a7e4 <__pow5mult>:
 800a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	4615      	mov	r5, r2
 800a7ea:	f012 0203 	ands.w	r2, r2, #3
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	d007      	beq.n	800a804 <__pow5mult+0x20>
 800a7f4:	3a01      	subs	r2, #1
 800a7f6:	4c21      	ldr	r4, [pc, #132]	; (800a87c <__pow5mult+0x98>)
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7fe:	f7ff fec8 	bl	800a592 <__multadd>
 800a802:	4607      	mov	r7, r0
 800a804:	10ad      	asrs	r5, r5, #2
 800a806:	d035      	beq.n	800a874 <__pow5mult+0x90>
 800a808:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a80a:	b93c      	cbnz	r4, 800a81c <__pow5mult+0x38>
 800a80c:	2010      	movs	r0, #16
 800a80e:	f7fd ff93 	bl	8008738 <malloc>
 800a812:	6270      	str	r0, [r6, #36]	; 0x24
 800a814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a818:	6004      	str	r4, [r0, #0]
 800a81a:	60c4      	str	r4, [r0, #12]
 800a81c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a824:	b94c      	cbnz	r4, 800a83a <__pow5mult+0x56>
 800a826:	f240 2171 	movw	r1, #625	; 0x271
 800a82a:	4630      	mov	r0, r6
 800a82c:	f7ff ff3a 	bl	800a6a4 <__i2b>
 800a830:	2300      	movs	r3, #0
 800a832:	f8c8 0008 	str.w	r0, [r8, #8]
 800a836:	4604      	mov	r4, r0
 800a838:	6003      	str	r3, [r0, #0]
 800a83a:	f04f 0800 	mov.w	r8, #0
 800a83e:	07eb      	lsls	r3, r5, #31
 800a840:	d50a      	bpl.n	800a858 <__pow5mult+0x74>
 800a842:	4639      	mov	r1, r7
 800a844:	4622      	mov	r2, r4
 800a846:	4630      	mov	r0, r6
 800a848:	f7ff ff35 	bl	800a6b6 <__multiply>
 800a84c:	4639      	mov	r1, r7
 800a84e:	4681      	mov	r9, r0
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff fe87 	bl	800a564 <_Bfree>
 800a856:	464f      	mov	r7, r9
 800a858:	106d      	asrs	r5, r5, #1
 800a85a:	d00b      	beq.n	800a874 <__pow5mult+0x90>
 800a85c:	6820      	ldr	r0, [r4, #0]
 800a85e:	b938      	cbnz	r0, 800a870 <__pow5mult+0x8c>
 800a860:	4622      	mov	r2, r4
 800a862:	4621      	mov	r1, r4
 800a864:	4630      	mov	r0, r6
 800a866:	f7ff ff26 	bl	800a6b6 <__multiply>
 800a86a:	6020      	str	r0, [r4, #0]
 800a86c:	f8c0 8000 	str.w	r8, [r0]
 800a870:	4604      	mov	r4, r0
 800a872:	e7e4      	b.n	800a83e <__pow5mult+0x5a>
 800a874:	4638      	mov	r0, r7
 800a876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a87a:	bf00      	nop
 800a87c:	08012f78 	.word	0x08012f78

0800a880 <__lshift>:
 800a880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a884:	460c      	mov	r4, r1
 800a886:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a88a:	6923      	ldr	r3, [r4, #16]
 800a88c:	6849      	ldr	r1, [r1, #4]
 800a88e:	eb0a 0903 	add.w	r9, sl, r3
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	4607      	mov	r7, r0
 800a896:	4616      	mov	r6, r2
 800a898:	f109 0501 	add.w	r5, r9, #1
 800a89c:	42ab      	cmp	r3, r5
 800a89e:	db32      	blt.n	800a906 <__lshift+0x86>
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	f7ff fe2b 	bl	800a4fc <_Balloc>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	f100 0114 	add.w	r1, r0, #20
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4553      	cmp	r3, sl
 800a8b2:	db2b      	blt.n	800a90c <__lshift+0x8c>
 800a8b4:	6920      	ldr	r0, [r4, #16]
 800a8b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8ba:	f104 0314 	add.w	r3, r4, #20
 800a8be:	f016 021f 	ands.w	r2, r6, #31
 800a8c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8ca:	d025      	beq.n	800a918 <__lshift+0x98>
 800a8cc:	f1c2 0e20 	rsb	lr, r2, #32
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	681e      	ldr	r6, [r3, #0]
 800a8d4:	468a      	mov	sl, r1
 800a8d6:	4096      	lsls	r6, r2
 800a8d8:	4330      	orrs	r0, r6
 800a8da:	f84a 0b04 	str.w	r0, [sl], #4
 800a8de:	f853 0b04 	ldr.w	r0, [r3], #4
 800a8e2:	459c      	cmp	ip, r3
 800a8e4:	fa20 f00e 	lsr.w	r0, r0, lr
 800a8e8:	d814      	bhi.n	800a914 <__lshift+0x94>
 800a8ea:	6048      	str	r0, [r1, #4]
 800a8ec:	b108      	cbz	r0, 800a8f2 <__lshift+0x72>
 800a8ee:	f109 0502 	add.w	r5, r9, #2
 800a8f2:	3d01      	subs	r5, #1
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f8c8 5010 	str.w	r5, [r8, #16]
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	f7ff fe32 	bl	800a564 <_Bfree>
 800a900:	4640      	mov	r0, r8
 800a902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a906:	3101      	adds	r1, #1
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	e7c7      	b.n	800a89c <__lshift+0x1c>
 800a90c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a910:	3301      	adds	r3, #1
 800a912:	e7cd      	b.n	800a8b0 <__lshift+0x30>
 800a914:	4651      	mov	r1, sl
 800a916:	e7dc      	b.n	800a8d2 <__lshift+0x52>
 800a918:	3904      	subs	r1, #4
 800a91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a91e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a922:	459c      	cmp	ip, r3
 800a924:	d8f9      	bhi.n	800a91a <__lshift+0x9a>
 800a926:	e7e4      	b.n	800a8f2 <__lshift+0x72>

0800a928 <__mcmp>:
 800a928:	6903      	ldr	r3, [r0, #16]
 800a92a:	690a      	ldr	r2, [r1, #16]
 800a92c:	1a9b      	subs	r3, r3, r2
 800a92e:	b530      	push	{r4, r5, lr}
 800a930:	d10c      	bne.n	800a94c <__mcmp+0x24>
 800a932:	0092      	lsls	r2, r2, #2
 800a934:	3014      	adds	r0, #20
 800a936:	3114      	adds	r1, #20
 800a938:	1884      	adds	r4, r0, r2
 800a93a:	4411      	add	r1, r2
 800a93c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a944:	4295      	cmp	r5, r2
 800a946:	d003      	beq.n	800a950 <__mcmp+0x28>
 800a948:	d305      	bcc.n	800a956 <__mcmp+0x2e>
 800a94a:	2301      	movs	r3, #1
 800a94c:	4618      	mov	r0, r3
 800a94e:	bd30      	pop	{r4, r5, pc}
 800a950:	42a0      	cmp	r0, r4
 800a952:	d3f3      	bcc.n	800a93c <__mcmp+0x14>
 800a954:	e7fa      	b.n	800a94c <__mcmp+0x24>
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
 800a95a:	e7f7      	b.n	800a94c <__mcmp+0x24>

0800a95c <__mdiff>:
 800a95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a960:	460d      	mov	r5, r1
 800a962:	4607      	mov	r7, r0
 800a964:	4611      	mov	r1, r2
 800a966:	4628      	mov	r0, r5
 800a968:	4614      	mov	r4, r2
 800a96a:	f7ff ffdd 	bl	800a928 <__mcmp>
 800a96e:	1e06      	subs	r6, r0, #0
 800a970:	d108      	bne.n	800a984 <__mdiff+0x28>
 800a972:	4631      	mov	r1, r6
 800a974:	4638      	mov	r0, r7
 800a976:	f7ff fdc1 	bl	800a4fc <_Balloc>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a984:	bfa4      	itt	ge
 800a986:	4623      	movge	r3, r4
 800a988:	462c      	movge	r4, r5
 800a98a:	4638      	mov	r0, r7
 800a98c:	6861      	ldr	r1, [r4, #4]
 800a98e:	bfa6      	itte	ge
 800a990:	461d      	movge	r5, r3
 800a992:	2600      	movge	r6, #0
 800a994:	2601      	movlt	r6, #1
 800a996:	f7ff fdb1 	bl	800a4fc <_Balloc>
 800a99a:	692b      	ldr	r3, [r5, #16]
 800a99c:	60c6      	str	r6, [r0, #12]
 800a99e:	6926      	ldr	r6, [r4, #16]
 800a9a0:	f105 0914 	add.w	r9, r5, #20
 800a9a4:	f104 0214 	add.w	r2, r4, #20
 800a9a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a9ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a9b0:	f100 0514 	add.w	r5, r0, #20
 800a9b4:	f04f 0e00 	mov.w	lr, #0
 800a9b8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a9bc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a9c0:	fa1e f18a 	uxtah	r1, lr, sl
 800a9c4:	b2a3      	uxth	r3, r4
 800a9c6:	1ac9      	subs	r1, r1, r3
 800a9c8:	0c23      	lsrs	r3, r4, #16
 800a9ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a9ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a9d2:	b289      	uxth	r1, r1
 800a9d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a9d8:	45c8      	cmp	r8, r9
 800a9da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a9de:	4694      	mov	ip, r2
 800a9e0:	f845 3b04 	str.w	r3, [r5], #4
 800a9e4:	d8e8      	bhi.n	800a9b8 <__mdiff+0x5c>
 800a9e6:	45bc      	cmp	ip, r7
 800a9e8:	d304      	bcc.n	800a9f4 <__mdiff+0x98>
 800a9ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a9ee:	b183      	cbz	r3, 800aa12 <__mdiff+0xb6>
 800a9f0:	6106      	str	r6, [r0, #16]
 800a9f2:	e7c5      	b.n	800a980 <__mdiff+0x24>
 800a9f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a9f8:	fa1e f381 	uxtah	r3, lr, r1
 800a9fc:	141a      	asrs	r2, r3, #16
 800a9fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa08:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800aa0c:	f845 3b04 	str.w	r3, [r5], #4
 800aa10:	e7e9      	b.n	800a9e6 <__mdiff+0x8a>
 800aa12:	3e01      	subs	r6, #1
 800aa14:	e7e9      	b.n	800a9ea <__mdiff+0x8e>

0800aa16 <__d2b>:
 800aa16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa1a:	460e      	mov	r6, r1
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	ec59 8b10 	vmov	r8, r9, d0
 800aa22:	4615      	mov	r5, r2
 800aa24:	f7ff fd6a 	bl	800a4fc <_Balloc>
 800aa28:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa32:	bb34      	cbnz	r4, 800aa82 <__d2b+0x6c>
 800aa34:	9301      	str	r3, [sp, #4]
 800aa36:	f1b8 0300 	subs.w	r3, r8, #0
 800aa3a:	d027      	beq.n	800aa8c <__d2b+0x76>
 800aa3c:	a802      	add	r0, sp, #8
 800aa3e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800aa42:	f7ff fe00 	bl	800a646 <__lo0bits>
 800aa46:	9900      	ldr	r1, [sp, #0]
 800aa48:	b1f0      	cbz	r0, 800aa88 <__d2b+0x72>
 800aa4a:	9a01      	ldr	r2, [sp, #4]
 800aa4c:	f1c0 0320 	rsb	r3, r0, #32
 800aa50:	fa02 f303 	lsl.w	r3, r2, r3
 800aa54:	430b      	orrs	r3, r1
 800aa56:	40c2      	lsrs	r2, r0
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	9201      	str	r2, [sp, #4]
 800aa5c:	9b01      	ldr	r3, [sp, #4]
 800aa5e:	61bb      	str	r3, [r7, #24]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	bf14      	ite	ne
 800aa64:	2102      	movne	r1, #2
 800aa66:	2101      	moveq	r1, #1
 800aa68:	6139      	str	r1, [r7, #16]
 800aa6a:	b1c4      	cbz	r4, 800aa9e <__d2b+0x88>
 800aa6c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aa70:	4404      	add	r4, r0
 800aa72:	6034      	str	r4, [r6, #0]
 800aa74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa78:	6028      	str	r0, [r5, #0]
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	b003      	add	sp, #12
 800aa7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa86:	e7d5      	b.n	800aa34 <__d2b+0x1e>
 800aa88:	6179      	str	r1, [r7, #20]
 800aa8a:	e7e7      	b.n	800aa5c <__d2b+0x46>
 800aa8c:	a801      	add	r0, sp, #4
 800aa8e:	f7ff fdda 	bl	800a646 <__lo0bits>
 800aa92:	9b01      	ldr	r3, [sp, #4]
 800aa94:	617b      	str	r3, [r7, #20]
 800aa96:	2101      	movs	r1, #1
 800aa98:	6139      	str	r1, [r7, #16]
 800aa9a:	3020      	adds	r0, #32
 800aa9c:	e7e5      	b.n	800aa6a <__d2b+0x54>
 800aa9e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800aaa2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaa6:	6030      	str	r0, [r6, #0]
 800aaa8:	6918      	ldr	r0, [r3, #16]
 800aaaa:	f7ff fdad 	bl	800a608 <__hi0bits>
 800aaae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aab2:	e7e1      	b.n	800aa78 <__d2b+0x62>

0800aab4 <__sfputc_r>:
 800aab4:	6893      	ldr	r3, [r2, #8]
 800aab6:	3b01      	subs	r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	b410      	push	{r4}
 800aabc:	6093      	str	r3, [r2, #8]
 800aabe:	da08      	bge.n	800aad2 <__sfputc_r+0x1e>
 800aac0:	6994      	ldr	r4, [r2, #24]
 800aac2:	42a3      	cmp	r3, r4
 800aac4:	db01      	blt.n	800aaca <__sfputc_r+0x16>
 800aac6:	290a      	cmp	r1, #10
 800aac8:	d103      	bne.n	800aad2 <__sfputc_r+0x1e>
 800aaca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aace:	f7fe bc21 	b.w	8009314 <__swbuf_r>
 800aad2:	6813      	ldr	r3, [r2, #0]
 800aad4:	1c58      	adds	r0, r3, #1
 800aad6:	6010      	str	r0, [r2, #0]
 800aad8:	7019      	strb	r1, [r3, #0]
 800aada:	4608      	mov	r0, r1
 800aadc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <__sfputs_r>:
 800aae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae4:	4606      	mov	r6, r0
 800aae6:	460f      	mov	r7, r1
 800aae8:	4614      	mov	r4, r2
 800aaea:	18d5      	adds	r5, r2, r3
 800aaec:	42ac      	cmp	r4, r5
 800aaee:	d101      	bne.n	800aaf4 <__sfputs_r+0x12>
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	e007      	b.n	800ab04 <__sfputs_r+0x22>
 800aaf4:	463a      	mov	r2, r7
 800aaf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafa:	4630      	mov	r0, r6
 800aafc:	f7ff ffda 	bl	800aab4 <__sfputc_r>
 800ab00:	1c43      	adds	r3, r0, #1
 800ab02:	d1f3      	bne.n	800aaec <__sfputs_r+0xa>
 800ab04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab08 <_vfiprintf_r>:
 800ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	b09d      	sub	sp, #116	; 0x74
 800ab10:	4617      	mov	r7, r2
 800ab12:	461d      	mov	r5, r3
 800ab14:	4606      	mov	r6, r0
 800ab16:	b118      	cbz	r0, 800ab20 <_vfiprintf_r+0x18>
 800ab18:	6983      	ldr	r3, [r0, #24]
 800ab1a:	b90b      	cbnz	r3, 800ab20 <_vfiprintf_r+0x18>
 800ab1c:	f7ff fbf0 	bl	800a300 <__sinit>
 800ab20:	4b7c      	ldr	r3, [pc, #496]	; (800ad14 <_vfiprintf_r+0x20c>)
 800ab22:	429c      	cmp	r4, r3
 800ab24:	d158      	bne.n	800abd8 <_vfiprintf_r+0xd0>
 800ab26:	6874      	ldr	r4, [r6, #4]
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	0718      	lsls	r0, r3, #28
 800ab2c:	d55e      	bpl.n	800abec <_vfiprintf_r+0xe4>
 800ab2e:	6923      	ldr	r3, [r4, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d05b      	beq.n	800abec <_vfiprintf_r+0xe4>
 800ab34:	2300      	movs	r3, #0
 800ab36:	9309      	str	r3, [sp, #36]	; 0x24
 800ab38:	2320      	movs	r3, #32
 800ab3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab3e:	2330      	movs	r3, #48	; 0x30
 800ab40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab44:	9503      	str	r5, [sp, #12]
 800ab46:	f04f 0b01 	mov.w	fp, #1
 800ab4a:	46b8      	mov	r8, r7
 800ab4c:	4645      	mov	r5, r8
 800ab4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab52:	b10b      	cbz	r3, 800ab58 <_vfiprintf_r+0x50>
 800ab54:	2b25      	cmp	r3, #37	; 0x25
 800ab56:	d154      	bne.n	800ac02 <_vfiprintf_r+0xfa>
 800ab58:	ebb8 0a07 	subs.w	sl, r8, r7
 800ab5c:	d00b      	beq.n	800ab76 <_vfiprintf_r+0x6e>
 800ab5e:	4653      	mov	r3, sl
 800ab60:	463a      	mov	r2, r7
 800ab62:	4621      	mov	r1, r4
 800ab64:	4630      	mov	r0, r6
 800ab66:	f7ff ffbc 	bl	800aae2 <__sfputs_r>
 800ab6a:	3001      	adds	r0, #1
 800ab6c:	f000 80c2 	beq.w	800acf4 <_vfiprintf_r+0x1ec>
 800ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab72:	4453      	add	r3, sl
 800ab74:	9309      	str	r3, [sp, #36]	; 0x24
 800ab76:	f898 3000 	ldrb.w	r3, [r8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 80ba 	beq.w	800acf4 <_vfiprintf_r+0x1ec>
 800ab80:	2300      	movs	r3, #0
 800ab82:	f04f 32ff 	mov.w	r2, #4294967295
 800ab86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab8a:	9304      	str	r3, [sp, #16]
 800ab8c:	9307      	str	r3, [sp, #28]
 800ab8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab92:	931a      	str	r3, [sp, #104]	; 0x68
 800ab94:	46a8      	mov	r8, r5
 800ab96:	2205      	movs	r2, #5
 800ab98:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ab9c:	485e      	ldr	r0, [pc, #376]	; (800ad18 <_vfiprintf_r+0x210>)
 800ab9e:	f7f7 ff87 	bl	8002ab0 <memchr>
 800aba2:	9b04      	ldr	r3, [sp, #16]
 800aba4:	bb78      	cbnz	r0, 800ac06 <_vfiprintf_r+0xfe>
 800aba6:	06d9      	lsls	r1, r3, #27
 800aba8:	bf44      	itt	mi
 800abaa:	2220      	movmi	r2, #32
 800abac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abb0:	071a      	lsls	r2, r3, #28
 800abb2:	bf44      	itt	mi
 800abb4:	222b      	movmi	r2, #43	; 0x2b
 800abb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abba:	782a      	ldrb	r2, [r5, #0]
 800abbc:	2a2a      	cmp	r2, #42	; 0x2a
 800abbe:	d02a      	beq.n	800ac16 <_vfiprintf_r+0x10e>
 800abc0:	9a07      	ldr	r2, [sp, #28]
 800abc2:	46a8      	mov	r8, r5
 800abc4:	2000      	movs	r0, #0
 800abc6:	250a      	movs	r5, #10
 800abc8:	4641      	mov	r1, r8
 800abca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abce:	3b30      	subs	r3, #48	; 0x30
 800abd0:	2b09      	cmp	r3, #9
 800abd2:	d969      	bls.n	800aca8 <_vfiprintf_r+0x1a0>
 800abd4:	b360      	cbz	r0, 800ac30 <_vfiprintf_r+0x128>
 800abd6:	e024      	b.n	800ac22 <_vfiprintf_r+0x11a>
 800abd8:	4b50      	ldr	r3, [pc, #320]	; (800ad1c <_vfiprintf_r+0x214>)
 800abda:	429c      	cmp	r4, r3
 800abdc:	d101      	bne.n	800abe2 <_vfiprintf_r+0xda>
 800abde:	68b4      	ldr	r4, [r6, #8]
 800abe0:	e7a2      	b.n	800ab28 <_vfiprintf_r+0x20>
 800abe2:	4b4f      	ldr	r3, [pc, #316]	; (800ad20 <_vfiprintf_r+0x218>)
 800abe4:	429c      	cmp	r4, r3
 800abe6:	bf08      	it	eq
 800abe8:	68f4      	ldreq	r4, [r6, #12]
 800abea:	e79d      	b.n	800ab28 <_vfiprintf_r+0x20>
 800abec:	4621      	mov	r1, r4
 800abee:	4630      	mov	r0, r6
 800abf0:	f7fe fbe2 	bl	80093b8 <__swsetup_r>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d09d      	beq.n	800ab34 <_vfiprintf_r+0x2c>
 800abf8:	f04f 30ff 	mov.w	r0, #4294967295
 800abfc:	b01d      	add	sp, #116	; 0x74
 800abfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac02:	46a8      	mov	r8, r5
 800ac04:	e7a2      	b.n	800ab4c <_vfiprintf_r+0x44>
 800ac06:	4a44      	ldr	r2, [pc, #272]	; (800ad18 <_vfiprintf_r+0x210>)
 800ac08:	1a80      	subs	r0, r0, r2
 800ac0a:	fa0b f000 	lsl.w	r0, fp, r0
 800ac0e:	4318      	orrs	r0, r3
 800ac10:	9004      	str	r0, [sp, #16]
 800ac12:	4645      	mov	r5, r8
 800ac14:	e7be      	b.n	800ab94 <_vfiprintf_r+0x8c>
 800ac16:	9a03      	ldr	r2, [sp, #12]
 800ac18:	1d11      	adds	r1, r2, #4
 800ac1a:	6812      	ldr	r2, [r2, #0]
 800ac1c:	9103      	str	r1, [sp, #12]
 800ac1e:	2a00      	cmp	r2, #0
 800ac20:	db01      	blt.n	800ac26 <_vfiprintf_r+0x11e>
 800ac22:	9207      	str	r2, [sp, #28]
 800ac24:	e004      	b.n	800ac30 <_vfiprintf_r+0x128>
 800ac26:	4252      	negs	r2, r2
 800ac28:	f043 0302 	orr.w	r3, r3, #2
 800ac2c:	9207      	str	r2, [sp, #28]
 800ac2e:	9304      	str	r3, [sp, #16]
 800ac30:	f898 3000 	ldrb.w	r3, [r8]
 800ac34:	2b2e      	cmp	r3, #46	; 0x2e
 800ac36:	d10e      	bne.n	800ac56 <_vfiprintf_r+0x14e>
 800ac38:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ac3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac3e:	d138      	bne.n	800acb2 <_vfiprintf_r+0x1aa>
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	1d1a      	adds	r2, r3, #4
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	9203      	str	r2, [sp, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	bfb8      	it	lt
 800ac4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac50:	f108 0802 	add.w	r8, r8, #2
 800ac54:	9305      	str	r3, [sp, #20]
 800ac56:	4d33      	ldr	r5, [pc, #204]	; (800ad24 <_vfiprintf_r+0x21c>)
 800ac58:	f898 1000 	ldrb.w	r1, [r8]
 800ac5c:	2203      	movs	r2, #3
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f7f7 ff26 	bl	8002ab0 <memchr>
 800ac64:	b140      	cbz	r0, 800ac78 <_vfiprintf_r+0x170>
 800ac66:	2340      	movs	r3, #64	; 0x40
 800ac68:	1b40      	subs	r0, r0, r5
 800ac6a:	fa03 f000 	lsl.w	r0, r3, r0
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	4303      	orrs	r3, r0
 800ac72:	f108 0801 	add.w	r8, r8, #1
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	f898 1000 	ldrb.w	r1, [r8]
 800ac7c:	482a      	ldr	r0, [pc, #168]	; (800ad28 <_vfiprintf_r+0x220>)
 800ac7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac82:	2206      	movs	r2, #6
 800ac84:	f108 0701 	add.w	r7, r8, #1
 800ac88:	f7f7 ff12 	bl	8002ab0 <memchr>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d037      	beq.n	800ad00 <_vfiprintf_r+0x1f8>
 800ac90:	4b26      	ldr	r3, [pc, #152]	; (800ad2c <_vfiprintf_r+0x224>)
 800ac92:	bb1b      	cbnz	r3, 800acdc <_vfiprintf_r+0x1d4>
 800ac94:	9b03      	ldr	r3, [sp, #12]
 800ac96:	3307      	adds	r3, #7
 800ac98:	f023 0307 	bic.w	r3, r3, #7
 800ac9c:	3308      	adds	r3, #8
 800ac9e:	9303      	str	r3, [sp, #12]
 800aca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca2:	444b      	add	r3, r9
 800aca4:	9309      	str	r3, [sp, #36]	; 0x24
 800aca6:	e750      	b.n	800ab4a <_vfiprintf_r+0x42>
 800aca8:	fb05 3202 	mla	r2, r5, r2, r3
 800acac:	2001      	movs	r0, #1
 800acae:	4688      	mov	r8, r1
 800acb0:	e78a      	b.n	800abc8 <_vfiprintf_r+0xc0>
 800acb2:	2300      	movs	r3, #0
 800acb4:	f108 0801 	add.w	r8, r8, #1
 800acb8:	9305      	str	r3, [sp, #20]
 800acba:	4619      	mov	r1, r3
 800acbc:	250a      	movs	r5, #10
 800acbe:	4640      	mov	r0, r8
 800acc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc4:	3a30      	subs	r2, #48	; 0x30
 800acc6:	2a09      	cmp	r2, #9
 800acc8:	d903      	bls.n	800acd2 <_vfiprintf_r+0x1ca>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0c3      	beq.n	800ac56 <_vfiprintf_r+0x14e>
 800acce:	9105      	str	r1, [sp, #20]
 800acd0:	e7c1      	b.n	800ac56 <_vfiprintf_r+0x14e>
 800acd2:	fb05 2101 	mla	r1, r5, r1, r2
 800acd6:	2301      	movs	r3, #1
 800acd8:	4680      	mov	r8, r0
 800acda:	e7f0      	b.n	800acbe <_vfiprintf_r+0x1b6>
 800acdc:	ab03      	add	r3, sp, #12
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	4622      	mov	r2, r4
 800ace2:	4b13      	ldr	r3, [pc, #76]	; (800ad30 <_vfiprintf_r+0x228>)
 800ace4:	a904      	add	r1, sp, #16
 800ace6:	4630      	mov	r0, r6
 800ace8:	f7fd feac 	bl	8008a44 <_printf_float>
 800acec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800acf0:	4681      	mov	r9, r0
 800acf2:	d1d5      	bne.n	800aca0 <_vfiprintf_r+0x198>
 800acf4:	89a3      	ldrh	r3, [r4, #12]
 800acf6:	065b      	lsls	r3, r3, #25
 800acf8:	f53f af7e 	bmi.w	800abf8 <_vfiprintf_r+0xf0>
 800acfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acfe:	e77d      	b.n	800abfc <_vfiprintf_r+0xf4>
 800ad00:	ab03      	add	r3, sp, #12
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	4622      	mov	r2, r4
 800ad06:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <_vfiprintf_r+0x228>)
 800ad08:	a904      	add	r1, sp, #16
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f7fe f950 	bl	8008fb0 <_printf_i>
 800ad10:	e7ec      	b.n	800acec <_vfiprintf_r+0x1e4>
 800ad12:	bf00      	nop
 800ad14:	08012e44 	.word	0x08012e44
 800ad18:	08012f84 	.word	0x08012f84
 800ad1c:	08012e64 	.word	0x08012e64
 800ad20:	08012e24 	.word	0x08012e24
 800ad24:	08012f8a 	.word	0x08012f8a
 800ad28:	08012f8e 	.word	0x08012f8e
 800ad2c:	08008a45 	.word	0x08008a45
 800ad30:	0800aae3 	.word	0x0800aae3

0800ad34 <_putc_r>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	460d      	mov	r5, r1
 800ad38:	4614      	mov	r4, r2
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	b118      	cbz	r0, 800ad46 <_putc_r+0x12>
 800ad3e:	6983      	ldr	r3, [r0, #24]
 800ad40:	b90b      	cbnz	r3, 800ad46 <_putc_r+0x12>
 800ad42:	f7ff fadd 	bl	800a300 <__sinit>
 800ad46:	4b13      	ldr	r3, [pc, #76]	; (800ad94 <_putc_r+0x60>)
 800ad48:	429c      	cmp	r4, r3
 800ad4a:	d112      	bne.n	800ad72 <_putc_r+0x3e>
 800ad4c:	6874      	ldr	r4, [r6, #4]
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	60a3      	str	r3, [r4, #8]
 800ad56:	da16      	bge.n	800ad86 <_putc_r+0x52>
 800ad58:	69a2      	ldr	r2, [r4, #24]
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	db02      	blt.n	800ad64 <_putc_r+0x30>
 800ad5e:	b2eb      	uxtb	r3, r5
 800ad60:	2b0a      	cmp	r3, #10
 800ad62:	d110      	bne.n	800ad86 <_putc_r+0x52>
 800ad64:	4622      	mov	r2, r4
 800ad66:	4629      	mov	r1, r5
 800ad68:	4630      	mov	r0, r6
 800ad6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad6e:	f7fe bad1 	b.w	8009314 <__swbuf_r>
 800ad72:	4b09      	ldr	r3, [pc, #36]	; (800ad98 <_putc_r+0x64>)
 800ad74:	429c      	cmp	r4, r3
 800ad76:	d101      	bne.n	800ad7c <_putc_r+0x48>
 800ad78:	68b4      	ldr	r4, [r6, #8]
 800ad7a:	e7e8      	b.n	800ad4e <_putc_r+0x1a>
 800ad7c:	4b07      	ldr	r3, [pc, #28]	; (800ad9c <_putc_r+0x68>)
 800ad7e:	429c      	cmp	r4, r3
 800ad80:	bf08      	it	eq
 800ad82:	68f4      	ldreq	r4, [r6, #12]
 800ad84:	e7e3      	b.n	800ad4e <_putc_r+0x1a>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	6022      	str	r2, [r4, #0]
 800ad8c:	701d      	strb	r5, [r3, #0]
 800ad8e:	b2e8      	uxtb	r0, r5
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	bf00      	nop
 800ad94:	08012e44 	.word	0x08012e44
 800ad98:	08012e64 	.word	0x08012e64
 800ad9c:	08012e24 	.word	0x08012e24

0800ada0 <__sread>:
 800ada0:	b510      	push	{r4, lr}
 800ada2:	460c      	mov	r4, r1
 800ada4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada8:	f000 f8a6 	bl	800aef8 <_read_r>
 800adac:	2800      	cmp	r0, #0
 800adae:	bfab      	itete	ge
 800adb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adb2:	89a3      	ldrhlt	r3, [r4, #12]
 800adb4:	181b      	addge	r3, r3, r0
 800adb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adba:	bfac      	ite	ge
 800adbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800adbe:	81a3      	strhlt	r3, [r4, #12]
 800adc0:	bd10      	pop	{r4, pc}

0800adc2 <__swrite>:
 800adc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc6:	461f      	mov	r7, r3
 800adc8:	898b      	ldrh	r3, [r1, #12]
 800adca:	05db      	lsls	r3, r3, #23
 800adcc:	4605      	mov	r5, r0
 800adce:	460c      	mov	r4, r1
 800add0:	4616      	mov	r6, r2
 800add2:	d505      	bpl.n	800ade0 <__swrite+0x1e>
 800add4:	2302      	movs	r3, #2
 800add6:	2200      	movs	r2, #0
 800add8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800addc:	f000 f868 	bl	800aeb0 <_lseek_r>
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ade6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	4632      	mov	r2, r6
 800adee:	463b      	mov	r3, r7
 800adf0:	4628      	mov	r0, r5
 800adf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adf6:	f000 b817 	b.w	800ae28 <_write_r>

0800adfa <__sseek>:
 800adfa:	b510      	push	{r4, lr}
 800adfc:	460c      	mov	r4, r1
 800adfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae02:	f000 f855 	bl	800aeb0 <_lseek_r>
 800ae06:	1c43      	adds	r3, r0, #1
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	bf15      	itete	ne
 800ae0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae16:	81a3      	strheq	r3, [r4, #12]
 800ae18:	bf18      	it	ne
 800ae1a:	81a3      	strhne	r3, [r4, #12]
 800ae1c:	bd10      	pop	{r4, pc}

0800ae1e <__sclose>:
 800ae1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae22:	f000 b813 	b.w	800ae4c <_close_r>
	...

0800ae28 <_write_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4c07      	ldr	r4, [pc, #28]	; (800ae48 <_write_r+0x20>)
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	4608      	mov	r0, r1
 800ae30:	4611      	mov	r1, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	6022      	str	r2, [r4, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f7f8 febb 	bl	8003bb2 <_write>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_write_r+0x1e>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_write_r+0x1e>
 800ae44:	602b      	str	r3, [r5, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	20000efc 	.word	0x20000efc

0800ae4c <_close_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4c06      	ldr	r4, [pc, #24]	; (800ae68 <_close_r+0x1c>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4605      	mov	r5, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	f7f8 fec7 	bl	8003bea <_close>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_close_r+0x1a>
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_close_r+0x1a>
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	20000efc 	.word	0x20000efc

0800ae6c <_fstat_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4c07      	ldr	r4, [pc, #28]	; (800ae8c <_fstat_r+0x20>)
 800ae70:	2300      	movs	r3, #0
 800ae72:	4605      	mov	r5, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	4611      	mov	r1, r2
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	f7f8 fec2 	bl	8003c02 <_fstat>
 800ae7e:	1c43      	adds	r3, r0, #1
 800ae80:	d102      	bne.n	800ae88 <_fstat_r+0x1c>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	b103      	cbz	r3, 800ae88 <_fstat_r+0x1c>
 800ae86:	602b      	str	r3, [r5, #0]
 800ae88:	bd38      	pop	{r3, r4, r5, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000efc 	.word	0x20000efc

0800ae90 <_isatty_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4c06      	ldr	r4, [pc, #24]	; (800aeac <_isatty_r+0x1c>)
 800ae94:	2300      	movs	r3, #0
 800ae96:	4605      	mov	r5, r0
 800ae98:	4608      	mov	r0, r1
 800ae9a:	6023      	str	r3, [r4, #0]
 800ae9c:	f7f8 fec1 	bl	8003c22 <_isatty>
 800aea0:	1c43      	adds	r3, r0, #1
 800aea2:	d102      	bne.n	800aeaa <_isatty_r+0x1a>
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	b103      	cbz	r3, 800aeaa <_isatty_r+0x1a>
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}
 800aeac:	20000efc 	.word	0x20000efc

0800aeb0 <_lseek_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4c07      	ldr	r4, [pc, #28]	; (800aed0 <_lseek_r+0x20>)
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	4608      	mov	r0, r1
 800aeb8:	4611      	mov	r1, r2
 800aeba:	2200      	movs	r2, #0
 800aebc:	6022      	str	r2, [r4, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	f7f8 feba 	bl	8003c38 <_lseek>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_lseek_r+0x1e>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	b103      	cbz	r3, 800aece <_lseek_r+0x1e>
 800aecc:	602b      	str	r3, [r5, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	20000efc 	.word	0x20000efc

0800aed4 <__ascii_mbtowc>:
 800aed4:	b082      	sub	sp, #8
 800aed6:	b901      	cbnz	r1, 800aeda <__ascii_mbtowc+0x6>
 800aed8:	a901      	add	r1, sp, #4
 800aeda:	b142      	cbz	r2, 800aeee <__ascii_mbtowc+0x1a>
 800aedc:	b14b      	cbz	r3, 800aef2 <__ascii_mbtowc+0x1e>
 800aede:	7813      	ldrb	r3, [r2, #0]
 800aee0:	600b      	str	r3, [r1, #0]
 800aee2:	7812      	ldrb	r2, [r2, #0]
 800aee4:	1c10      	adds	r0, r2, #0
 800aee6:	bf18      	it	ne
 800aee8:	2001      	movne	r0, #1
 800aeea:	b002      	add	sp, #8
 800aeec:	4770      	bx	lr
 800aeee:	4610      	mov	r0, r2
 800aef0:	e7fb      	b.n	800aeea <__ascii_mbtowc+0x16>
 800aef2:	f06f 0001 	mvn.w	r0, #1
 800aef6:	e7f8      	b.n	800aeea <__ascii_mbtowc+0x16>

0800aef8 <_read_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4c07      	ldr	r4, [pc, #28]	; (800af18 <_read_r+0x20>)
 800aefc:	4605      	mov	r5, r0
 800aefe:	4608      	mov	r0, r1
 800af00:	4611      	mov	r1, r2
 800af02:	2200      	movs	r2, #0
 800af04:	6022      	str	r2, [r4, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f7f8 fe36 	bl	8003b78 <_read>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_read_r+0x1e>
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	b103      	cbz	r3, 800af16 <_read_r+0x1e>
 800af14:	602b      	str	r3, [r5, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	20000efc 	.word	0x20000efc

0800af1c <__ascii_wctomb>:
 800af1c:	b149      	cbz	r1, 800af32 <__ascii_wctomb+0x16>
 800af1e:	2aff      	cmp	r2, #255	; 0xff
 800af20:	bf85      	ittet	hi
 800af22:	238a      	movhi	r3, #138	; 0x8a
 800af24:	6003      	strhi	r3, [r0, #0]
 800af26:	700a      	strbls	r2, [r1, #0]
 800af28:	f04f 30ff 	movhi.w	r0, #4294967295
 800af2c:	bf98      	it	ls
 800af2e:	2001      	movls	r0, #1
 800af30:	4770      	bx	lr
 800af32:	4608      	mov	r0, r1
 800af34:	4770      	bx	lr
	...

0800af38 <_init>:
 800af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3a:	bf00      	nop
 800af3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af3e:	bc08      	pop	{r3}
 800af40:	469e      	mov	lr, r3
 800af42:	4770      	bx	lr

0800af44 <_fini>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	bf00      	nop
 800af48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4a:	bc08      	pop	{r3}
 800af4c:	469e      	mov	lr, r3
 800af4e:	4770      	bx	lr
